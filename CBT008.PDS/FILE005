:READ CBTTAPE EXEC
/* **************************************************************** */
/* *     Module Name: CBTTAPE EXEC                                * */
/* *                                                              * */
/* *     Author:        George Shedlock Jr.                       * */
/* *                    george@shedlock.org                       * */
/* *                                                              * */
/* *                                                              * */
/* *     Version:       2.0                                       * */
/* *                                                              * */
/* *     Purpose:       This REXX EXEC was written because I made * */
/* *                    the mistake of telling Sam Golob that it  * */
/* *                    wouldn't be hard to write something like  * */
/* *                    this since I had most of the pieces and   * */
/* *                    just had to put them together. Well, here * */
/* *                    it is... 3 years, 1100 miles (I moved     * */
/* *                    from New Jersey), and a lot of deserved   * */
/* *                    nagging from Sam. If this is of some      * */
/* *                    value to you, great. If this is of NO     * */
/* *                    value to you, you're welcome to write     * */
/* *                    something of your own. Feel free to       * */
/* *                    modify this to suit your needs.  If you   * */
/* *                    modify this, please send me a copy so     * */
/* *                    that it can be shared with others.        * */
/* *                                                              * */
/* *                    This EXEC will allow the VM site a way    * */
/* *                    to process the CBT tape in the native     * */
/* *                    VM environment. This is mainly because    * */
/* *                    there are a lot of really good programs,  * */
/* *                    macros, etc on this tape. Well, OK        * */
/* *                    there are some so-so programs also, but   * */
/* *                    most of it is good. Included in this      * */
/* *                    file is a program I found in my travels   * */
/* *                    on the Internet some years ago. If I      * */
/* *                    could remember who wrote it or where I    * */
/* *                    found it, I would gladly give the proper  * */
/* *                    credit. This program is the IEBCOPY       * */
/* *                    program. Although it will only load or    * */
/* *                    list the modules from the tape, it is     * */
/* *                    still a good little utility.              * */
/* *                                                              * */
/* *     Initial setup:                                           * */
/* *         SP PUN * CL K                                        * */
/* *         TAPE REW                                             * */
/* *         TAPE FSF 4                                           * */
/* *         FI INMOVE TAP1 (RECFM FB LRECL 80 BLOCK 80           * */
/* *         FI OUTMOVE PUNCH (RECFM FB LRECL 80 BLOCK 80         * */
/* *         MOVEFILE                                             * */
/* *         CL PUN                                               * */
/* *         SP RDR CL K                                          * */
/* *         READCARD * *                                         * */
/* *         CBTTAPE 402 SETUP A 3390                             * */
/* *                                                              * */
/* *         NOTE: It is assumed that the CBT tape is mounted     * */
/* *               on your 181                                    * */
/* *               In the CBTTAPE command, the 402 is the CBT     * */
/* *               version, SETUP tells it to load the            * */
/* *               appropriate files from the CBT tape, assemble  * */
/* *               them and generate load modules. In addition    * */
/* *               SETUP will also create an index of the CBT     * */
/* *               tape so that future retrievals will be easier. * */
/* *                                                              * */
/* *     On-going usage:                                          * */
/* *            CBTTAPE 402 fileno target disktype                * */
/* *         NOTE: It is assumed that the CBT tape is mounted     * */
/* *               on your 181. The 402 is again the CBT version, * */
/* *               fileno is the file number you want to load,    * */
/* *               target is the filemode of the disk that will   * */
/* *               receive the extracted modules, and disktype    * */
/* *               is the device type to use for some t-disk      * */
/* *               (sometimes we need a little work space)        * */
/* *         Example:                                             * */
/* *               CBTTAPE 402 122 R 3390                         * */
/* *                    This will get, if we need it, 20 cylinders* */
/* *                    of t-disk on a 3390, and load file 122    * */
/* *                    from CBT version 402 to the R minidisk.   * */
/* *                                                              * */
/* *     Required files:                                          * */
/* *         CBTTAPE EXEC        (This file)                      * */
/* *         CBTTAPE MACLIB      (From elsewhere in this file)    * */
/* *         CBT973   ASSEMBLE  (From file 002 of the CBT tape)   * */
/* *         IEBCOPY  ASSEMBLE  (From elsewhere in this file)     * */
/* *         IEBCOPY  HELP        (From elsewhere in this file)   * */
/* **************************************************************** */

address command
arg CbtVersion File_No Target_Disk DiskType

/* *********************************** */
/* * Set up some initial variables   * */
/* *********************************** */

If Target_Disk = '' Then Do
    Target_Disk = 'A'
    End

If DiskType = '' Then Do
    DiskType = '3390'
    End

Maxfiles = 500
Spaces = '                    '                         /* 20 spaces */

If CbtVersion = '' Then Do
    Say 'CBT Version not entered'
    Say 'Re-enter with correct version'
    Exit 99
    End   /*  If CbtVersion  */

CBTVersion = right(CBTVersion,4,'0')
CBT = 'CBT' || CBTVersion
CBTF1 = CBT || ' FILE001 *'
CBTF3 = CBT || ' FILE003 *'

'STATE ' CBT 'INDEX *'
If RC <> 0 Then Do
    Say 'Building ' CBT ' INDEX'
    Call Obtain_Temp_Disk
    Call Load_File_One
    Call Condense_File_One
    Call Load_File_Three
    Call Process_File_Three
    Call Release_Temp_Disk
    Say 'Build of ' CBT ' INDEX is complete'
    End   /* If RC   */
'SET CMSTYPE HT'
'STATE CBT973 MODULE *'
SaveRC = RC
'SET CMSTYPE RT'
If SaveRC <> 0 Then Do
    Call Obtain_Temp_Disk
    Call Load_File_Two
    Call Generate_Cbt973
    Call Release_Temp_Disk
    End   /* If RC   */

'SET CMSTYPE HT'
'STATE IEBCOPY MODULE *'
SaveRC = RC
'SET CMSTYPE RT'
If SaveRC <> 0 Then Do
    CALL GENERATE_IEBCOPY
    End   /*  If RC */

If File_No = 'SETUP' Then Do
    Say 'Setup completed'
    Exit 0
    End   /*  If File_No  */
Address CMS 'EXECIO * DISKR' CBT 'INDEX * (ZONE 1 3 FIND /' || File_No || '/ '
Parse upper PULL junk
Parse upper PULL Line
Parse upper VAR Line 55 BKI 60 BKO 65 .
Parse upper VAR Line 1 FileNo 4 Desc 24 Last_Upd 32 P1 40 P2 48 LR 51 fm 55 .

If File_No <> FileNo Then Do
    Say 'Requested file number (' File_No ') not found'
    Exit 98
    End                                           /* If File_No ... */

Say 'File ' File_No ' is in ' P1 ' format'
Say 'File ' File_No ' is in ' P2 ' subformat'

Call Position_File

If P1 = 'IEBCOPY' Then Do     /* This is the COPY PROC simulation   */
    'SET CMSTYPE HT'
    'FILEDEF TAPE TAP1 SL VOLID' Cbt
    'IEBCOPY LOAD FMODE ' Target_Disk
    SaveRc = RC
    'SET CMSTYPE RT'
    End  /*  If P1 ...  */

If P1 = 'CBT973' Then Do     /* This is the UPDATEO PROC simulation */
    Call Obtain_Temp_Disk
    File_No = right(File_No,4,'0')
    'FILEDEF INMOVE TAP1 (RECFM VB BLOCK ' BKI
    File_Num = 'FILE' || File_No
    'FILEDEF OUTMOVE DISK' CBT File_Num Fm1 ' (RECFM VB BLOCK' BKI
    'MOVEFILE'
    SaveRc1 = RC
    'FILEDEF INPUT DISK' CBT File_Num Fm1 ' (RECFM VB BLOCK' BKI
    'FILEDEF OUTPUT DISK' CBT File_Num Target_Disk '(RECFM FB BLOCK 80'
    'CBT973'
    SaveRc = RC
    If SaveRc1 ^= 0 Then Do
        SaveRc = SaveRc1
        End
    Out_FT = CBTVersion || File_No
    'PIPE (name MULTI end ?) ',
      '| < 'CBT  File_Num Target_Disk ,
      '| tee: strfind $./ ADD NAME=$ ',
      '| SPEC substring 6.8 of w3 1.8 /'Out_FT Target_Disk '/ 10',
      '| JX: juxtapose ',
      '| putfiles ',
      '? tee: ',
      '| JX: '
    'SET CMSTYPE RT'
    End  /*  If P1 ...  */

If P1 = 'IEBGENER' Then Do    /* This is the GENERO PROC simulation */
    'FILEDEF INMOVE TAP1 (RECFM' LR 'BLOCK ' BKI 'RECFM' FM
    File_Num = 'FILE' || File_No
    'FILEDEF OUTMOVE DISK' CBT File_Num Target_Disk ' (RECFM FB BLOCK 80'
    'MOVEFILE'
    SaveRc = RC
    End  /*  If P1 ...  */

If SaveRc = 0 Then Do
    Say 'File ' File_No ' has been successfully loaded to ' Target_Disk
    Exit 0
    End  /*  If SaveRc ...  */
Say 'File ' File_No ' has not been loaded '
Exit SaveRc

Position_File:
    Say 'Positioning to file ' FileNo
    'SET CMSTYPE HT'
    'TAPE REW'                  /*  Reset so we know where we are */
    Skip_Files = FileNo - 1
    If Skip_Files = 0
        Then return
    'TAPE FSF ' Skip_Files
    'SET CMSTYPE RT'
    Return

Condense_File_One:
    Address CMS 'EXECIO * DISKR' CBTF1 '(LO /'DO NOT REMOVE'/ FIFO'
    Parse Upper Pull junk
    Parse Upper Pull junk
    Do Forever
        Address CMS 'EXECIO 1 DISKR' CBTF1 '(VAR LINE'
        Parse upper VAR Line 1 . 5 Desc 22 FileNo 25 . 46 Last_upd 54 .
        FileNo = Strip(FileNo)
        If FileNo = '' Then Return
        File_Desc.FileNo  = Desc
        File_FileNo.FileNo = FileNo
        File_Last_Upd.FileNo = Last_Upd
        End   /*  Do Forever    */
    'ERASE' CBT 'FILE001' Fm1
    Return

Generate_Iebcopy:
    'SET CMSTYPE HT'
    'ASSEMBLE IEBCOPY'
    'LOAD IEBCOPY'
    'GENMOD IEBCOPY'
    'COPY IEBCOPY MODULE' Fm1 ' = = 'Target_Disk
    'SET CMSTYPE RT'
    Return

Generate_Iebupdte:
    'SET CMSTYPE HT'
    'ASSEMBLE IEBUPDTE'
    'LOAD IEBUPDTE'
    'GENMOD IEBUPDTE'
    'COPY IEBUPDTE MODULE ' Fm1 ' = = 'Target_Disk
    'SET CMSTYPE RT'
    Return

Generate_Cbt973:
    'SET CMSTYPE HT'
    'GLOBAL MACLIB OSMACRO OSMACRO1 CBTTAPE'
    'ASSEMBLE CBT973'
    'LOAD CBT973'
    'GENMOD CBT973'
    'COPY CBT973 MODULE' Fm1 ' = =' Target_Disk
    'SET CMSTYPE RT'
    Return


Obtain_Temp_Disk:
    'SET CMSTYPE HT'
    'GETFMADR'
    Parse pull . Fm1 Vaddr1 .
    ADDRESS CMS 'DEFINE T' || Disktype Vaddr1 '20'
    queue 'yes'
    queue 'TMP' || Right(Vaddr1,3,'0')
    'FORMAT' Vaddr1 Fm1
    'SET CMSTYPE RT'
    Return

Release_Temp_Disk:
    'SET CMSTYPE HT'
    'RELEASE' Fm1 '(det'
    'SET CMSTYPE RT'
    Return

Load_File_One:
    Say 'Positioning to first file'
    'SET CMSTYPE HT'
    'TAPE REW'
    'FILEDEF INPUT TAP1 (LRECL 80 BLOCK 32720 RECFM FB'
    'FILEDEF OUTPUT DISK' CBT 'FILE001' Fm1 '(LRECL 80 BLOCK 80 RECFM FB'
    'MOVEFILE INPUT OUTPUT'
    'SET CMSTYPE RT'
    Return

Load_File_Two:
    Say 'Positioning to second file'
    'SET CMSTYPE HT'
    'TAPE REW'              /*  Reset so we know where we are   */
    'TAPE FSF 1'            /*  skip first file                 */
    'FILEDEF INPUT TAP1 (LRECL 80 BLOCK 32720 RECFM FB'
    'FILED OUTPUT DISK CBT973 ASSEMBLE' FM1 '(LRECL 80 BLOCK 80 RECFM FB'
    'MOVEFILE INPUT OUTPUT'
    'SET CMSTYPE RT'
    Return

Load_File_Three:
    Say 'Positioning to third file'
    'SET CMSTYPE HT'
    'TAPE REW'              /*  Reset so we know where we are   */
    'TAPE FSF 2'            /*  skip first two files            */
    'FILEDEF INPUT TAP1 (LRECL 80 BLOCK 32720 RECFM FB'
    'FILEDEF OUTPUT DISK' CBT 'FILE003' FM1 '(LRECL 80 BLOCK 80 RECFM FB'
    'MOVEFILE INPUT OUTPUT'
    'SET CMSTYPE RT'
    Return

Process_File_Three:
    i = 0
    Detail.0 = 0
    Scale1 = '0  0                   2       3       4       4  5   5    6    6'
    'EXECIO 1 DISKW' CBT 'INDEX ' Target_Disk '( STR' Scale1
    Scale2 = '1  4                   4       2       0       8  1   5    0    5'
    'EXECIO 1 DISKW' CBT 'INDEX ' Target_Disk '( STR' Scale2
    Do Forever
        Address CMS 'EXECIO 1 DISKR' CBTF3 '(VAR LINE'
        If Rc ^= 0 Then Do
            Signal Process_File_Three_B
            End
        If substr(Line,3,7) = 'STEPLIB' Then Do
            Iterate
            End
        If substr(Line,3,4) ^= 'STEP' Then Do
            Iterate
            End
        i = i + 1
        Detail.i = line
        Detail.0 = Detail.0 + 1
        End
Process_File_Three_B:
    Do j = 1 to Detail.0
        Parse Upper VAR Detail.j junk 'EXEC' Proc_Name ',LAB=' Rest
        FileNo = Left(Rest,3)
        Proc_Name = Strip(Proc_Name)
        Select;
            When Proc_Name = 'COPY' Then Do
                P1 = 'IEBCOPY'
                P2 = ' '
                BKO = 0
                Call Save_Entry
                Iterate
                End    /* When Proc_Name = 'COPY'       */
            When Proc_Name = 'GENER' Then Do
                LR = 80
                BKI = 32716
                BKO = 0
                FM = FB
                P1 = 'IEBGENER'
                P2 = P1
                Call Process_Overrides
                Call Save_Entry
                Iterate
                End    /* When Proc_Name = 'GENER'      */
            When Proc_Name = 'GENERO' Then Do
                LR = 80
                BKI = 32720
                BKO = 0
                FM = FB
                P1 = 'IEBGENER'
                P2 = P1
                Call Process_Overrides
                Call Save_Entry
                Iterate
                End    /* When Proc_Name = 'GENERO'     */
            When Proc_Name = 'UPDATEO' Then Do
                LR = 80
                BKI = 32720
                BKO = 0
                FM = FB
                P1 = 'CBT973'
                P2 = 'PDSLOAD'
                Call Process_Overrides
                Call Save_Entry
                Iterate
                End    /* When Proc_Name = 'UPDATEO'    */
            Otherwise Do
                Iterate
                End    /* Otherwise Do                  */
            Parse Pull junk
        End            /* SELECT                        */
    End                /* DO                            */
    Return

Process_Overrides:
    Parse VALUE Rest WITH . 'FM=' RecFm ',' .
    Parse VALUE Rest WITH . 'LR=' LrecL ',' .
    Parse VALUE Rest WITH . 'BKI=' BlkSizeI ',' .
    Parse VALUE Rest WITH . 'BKO=' BlkSizeO ' ' .
    If LrecL <> '' Then LR = LrecL
    If RecFm <> '' Then FM = RecFm
    If BlkSizeI <> '' Then BKI = BlkSizeI
    If BlkSizeO <> '' Then BKO = BlkSizeO
    Return

Save_Entry:
    FileNo    = RIGHT(FileNo,3,'0')
    Desc      = LEFT(File_Desc.FileNo,20)
    Last_Upd  = LEFT(File_Last_Upd.FileNo,8)
    P1        = LEFT(P1,8)
    P2        = LEFT(P2,8)
    LR        = RIGHT(LR,3,'0')
    FM        = LEFT(FM,4)
    BKI       = RIGHT(BKI,5,'0')
    BKO       = RIGHT(BKO,5,'0')

    Entry = FileNo || Desc || Last_Upd || P1 || P2 || LR || FM
    Entry = Entry || BKI || BKO
    Entry = LEFT(Entry,80)
    'EXECIO 1 DISKW' CBT 'INDEX ' Target_Disk '( STR' Entry
    Return
:READ CBTTAPE MACLIB
DMSLIBÑ  
         MACRO                                                          00000010
&NAME    VWTL  &MESG,&MF=I                                              00000020
         GBLB  &IHBWTL                                                  00000030
&IHBWTL  SETB  1                                                        00000040
&NAME    VWTO  &MESG,MF=&MF                                             00000050
&IHBWTL  SETB  0                                                        00000060
         AIF   ('&MF' EQ 'L').END                                       00000070
         SVC   36                                ISSUE WTL SVC          00000080
.END     MEND                                                           00000090
//
         MACRO                                                          TEM00010
&N       HEXCON  &I,&O,&Q                                               TEM00020
         LCLA  &IQ,&OQ,&TQ                                              TEM00030
&IQ      SETA  &Q+1                                                     TEM00040
&OQ      SETA  &Q+&IQ                                                   TEM00050
&TQ      SETA  &Q+&Q                                                    TEM00060
&N       UNPK  0(&OQ,&O),0(&IQ,&I)                                      TEM00070
         TR    0(&TQ,&O),HEXTAB-240                                     TEM00080
         MVI   &TQ.(&O),C' '                                            TEM00090
         LA    &I,&Q.(&I)                                               TEM00100
         LA    &O,&OQ.(&O)                                              TEM00110
         MEND                                                           TEM00120
//
         MACRO                                                          VLI00010
&NAME    VLINE  &X,&CC                                                  VLI00020
         LCLA  &A,&B,&B1,&B2,&B3,&K,&L1                                 VLI00030
         LCLC  &L,&N,&F,&F1,&GNAME                                      VLI00040
&GNAME   SETC  'IHB'.'&SYSNDX'                                          VLI00050
         DS    0F                                                       VLI00060
&NAME    DC    Y(&GNAME-*)                                              VLI00070
         DC    Y(0)                                                     VLI00080
         AIF   ('&CC' EQ '').CC1                                        VLI00090
         DC    CL1'&CC'                                                 VLI00100
         AGO   .LOOP                                                    VLI00110
.CC1     DC    C' '                                                     VLI00120
.LOOP    ANOP                                                           VLI00130
&F1      SETC  ' '                                                      VLI00140
&A       SETA  &A+1                                                     VLI00150
&K       SETA  K'&X(&A)                                                 VLI00160
         AIF   ('&X(&A)'(1,1) EQ '''' AND '&X(&A)'(&K,1) EQ '''').CON   VLI00170
         AIF   ('&X(&A)'(1,1) EQ '(' AND '&X(&A)'(&K,1) EQ ')').VAR     VLI00180
.ERR     MNOTE 4,'THE SUBPARM &X(&A) NOT RECOGNIZED, IGNORED'           VLI00190
         AGO   .TEST                                                    VLI00200
.ERR2    MNOTE 4,'NO LENGTH SPECIFIED IN &X(&A), IGNORED'               VLI00210
         AGO   .TEST                                                    VLI00220
.CON     DC    C&X(&A)                                                  VLI00230
         AGO   .TEST                                                    VLI00240
.VAR     ANOP                                                           VLI00250
&B       SETA  1                                                        VLI00260
.VAR1    ANOP                                                           VLI00270
&B       SETA  &B+1                                                     VLI00280
         AIF   ('&X(&A)'(&B,1) EQ ')').ERR2                             VLI00290
         AIF   ('&X(&A)'(&B,1) NE ',').VAR1                             VLI00300
&B1      SETA  &B-2                                                     VLI00310
&B2      SETA  &B+1                                                     VLI00320
.VAR3    ANOP                                                           VLI00330
&B       SETA  &B+1                                                     VLI00340
         AIF   ('&X(&A)'(&B,1) EQ ',').VAR4                             VLI00350
         AIF   ('&X(&A)'(&B,1) NE ')').VAR3                             VLI00360
.VAR4    ANOP                                                           VLI00370
&B3      SETA  &B-&B2                                                   VLI00380
&N       SETC  '&X(&A)'(2,&B1)                                          VLI00390
&L       SETC  '&X(&A)'(&B2,&B3)                                        VLI00400
         AIF   ('&X(&A)'(&B,1) EQ ')').VAR5                             VLI00410
&F       SETC  '&X(&A)'(&B+1,1)                                         VLI00420
&F1      SETC  ''                                                       VLI00430
&L1      SETA  &L                                                       VLI00440
.CONCAT  ANOP                                                           VLI00450
&F1      SETC  '&F1'.'&F'                                               VLI00460
&L1      SETA  &L1-1                                                    VLI00470
         AIF   (&L1 GT 0).CONCAT                                        VLI00480
.VAR5    ANOP                                                           VLI00490
&NAME.&N DC    CL&L'&F1'                                                VLI00500
.TEST    AIF   (&A LT N'&X).LOOP                                        VLI00510
&GNAME   EQU   *                                                        VLI00520
         MEND                                                           VLI00530
//
         MACRO                                                          VWT00010
         VWTOLST  &X                                                    VWT00020
         LCLA  &A,&B,&B1,&B2,&B3,&K,&L1                                 VWT00030
         LCLC  &L,&N,&F,&F1                                             VWT00040
&F1      SETC  ' '                                                      VWT00050
.LOOP    ANOP                                                           VWT00060
&A       SETA  &A+1                                                     VWT00070
&K       SETA  K'&X(&A)                                                 VWT00080
         AIF   ('&X(&A)'(1,1) EQ '''' AND '&X(&A)'(&K,1) EQ '''').CON   VWT00090
         AIF   ('&X(&A)'(1,1) EQ '(' AND '&X(&A)'(&K,1) EQ ')').VAR     VWT00100
.ERR     MNOTE 4,'THE SUBPARM &X(&A) NOT RECOGNIZED, IGNORED'           VWT00110
         AGO   .TEST                                                    VWT00120
.ERR2    MNOTE 4,'NO LENGTH SPECIFIED IN &X(&A), IGNORED'               VWT00130
         AGO   .TEST                                                    VWT00140
.CON     DC    C&X(&A)                 FIXED MESSAGE TEXT               VWT00150
         AGO   .TEST                                                    VWT00160
.VAR     ANOP                                                           VWT00170
&B       SETA  1                                                        VWT00180
.VAR1    ANOP                                                           VWT00190
&B       SETA  &B+1                                                     VWT00200
         AIF   ('&X(&A)'(&B,1) EQ ')').ERR2                             VWT00210
         AIF   ('&X(&A)'(&B,1) NE ',').VAR1                             VWT00220
&B1      SETA  &B-2                                                     VWT00230
&B2      SETA  &B+1                                                     VWT00240
.VAR3    ANOP                                                           VWT00250
&B       SETA  &B+1                                                     VWT00260
         AIF   ('&X(&A)'(&B,1) EQ ',').VAR4                             VWT00270
         AIF   ('&X(&A)'(&B,1) NE ')').VAR3                             VWT00280
.VAR4    ANOP                                                           VWT00290
&B3      SETA  &B-&B2                                                   VWT00300
&N       SETC  '&X(&A)'(2,&B1)                                          VWT00310
&L       SETC  '&X(&A)'(&B2,&B3)                                        VWT00320
         AIF   ('&X(&A)'(&B,1) EQ ')').VAR5                             VWT00330
&F       SETC  '&X(&A)'(&B+1,1)                                         VWT00340
&F1      SETC  ''                                                       VWT00350
&L1      SETA  &L                                                       VWT00360
.CONCAT  ANOP                                                           VWT00370
&F1      SETC  '&F1'.'&F'                                               VWT00380
&L1      SETA  &L1-1                                                    VWT00390
         AIF   (&L1 GT 0).CONCAT                                        VWT00400
.VAR5    ANOP                                                           VWT00410
&N       DC    CL&L'&F1'               VARIABLE MESSAGE TEXT            VWT00420
.TEST    AIF   (&A LT N'&X).LOOP                                        VWT00430
         MEND                                                           VWT00440
//
         MACRO                                                          00000010
&NAME    VWTOR &MESG,&RYAD,&LENGTH,&ECB,&MF=I,&MSGTYP=,&ROUTCDE=,      X00000020
               &DESC=,&MCSFLAG=                                         00000030
         GBLB  &IHBWTOR                                                 00000040
         LCLC  &GNAME                                                   00000050
&GNAME   SETC  'IHB'.'&SYSNDX'                                          00000060
         AIF   ('&MF' EQ 'I').IROUT                                     00000070
         AIF   ('&MF' EQ 'L').LROUT                                     00000080
         AIF   (N'&MF LE 1).ERROR1                                      00000090
         AIF   ('&MF(1)' NE 'E').ERROR1                                 00000100
&NAME    IHBINNRA &MF(2)                                                00000110
.CHKRYAD AIF   ('&RYAD' EQ '').NORYAD                                   00000120
         AIF   ('&LENGTH' NE '').SKIP                                   00000130
         IC    14,0(1,0)                         SAVE REPLY LENGTH      00000140
.SKIP    AIF   ('&RYAD'(1,1) EQ '(').REGNOT                             00000150
         LA    15,&RYAD           LOAD REPLY ADDR                 M4520 00000160
         ST    15,0(1,0)          STORE RPLY ADDR                 M4520 00000170
         AGO   .CONT                                                    00000180
.ERROR1  IHBERMAC 35,,&MF                                               00000190
         MEXIT                                                          00000200
.ERROR2  IHBERMAC 19                                                    00000210
         MEXIT                                                          00000220
.ERROR3  IHBERMAC 69                                                    00000230
         MEXIT                                                          00000240
.ERROR4  IHBERMAC 14                                                    00000250
         MEXIT                                                          00000260
.ERROR5  IHBERMAC 03                                                    00000270
         MEXIT                                                          00000280
.ERROR6  IHBERMAC 11                                                    00000290
         MEXIT                                                          00000300
.REGNOT  ST    &RYAD(1),0(1,0)                   STORE REPLY ADDR       00000310
.CONT    AIF   ('&LENGTH' NE '').SKIPA                                  00000320
         STC   14,0(1,0)                         RESTORE REPLY LENGTH   00000330
         AGO   .CHKECB                                                  00000340
.SKIPA   AIF   ('&LENGTH'(1,1) EQ '(').REGPRES                          00000350
         MVI   0(1),&LENGTH                      MOVE IN REPLY LENGTH   00000360
         AGO   .CHKECB                                                  00000370
.REGPRES STC   &LENGTH(1),0(1,0)                 STORE REPLY LENGTH     00000380
         AGO   .CHKECB                                                  00000390
.NORYAD  AIF   ('&LENGTH' NE '').SKIPA                                  00000400
.CHKECB  AIF   ('&ECB' EQ '').SVC                                       00000410
         AIF   ('&ECB'(1,1) EQ '(').ISREG                               00000420
         LA    14,&ECB                           LOAD ADDRESS OF ECB    00000430
         ST    14,4(1,0)                         STORE ECB ADDRESS      00000440
         AGO   .SVC                                                     00000450
.ISREG   ST    &ECB(1),4(1,0)                    STORE ECB ADDRESS      00000460
.SVC     SVC   35                                ISSUE WTOR SVC         00000470
          AGO  .END                                                     00000480
.LROUT   ANOP                                                           00000490
&NAME    DS    0F                                                       00000500
         AIF   ('&LENGTH' EQ '').PUTZERO                                00000510
         AIF   ('&LENGTH'(1,1) EQ '(').ERROR3                           00000520
         DC    AL1(&LENGTH)                      REPLY LENGTH           00000530
         AGO   .CHKRY                                                   00000540
.PUTZERO DC    AL1(0)                            REPLY LENGTH           00000550
.CHKRY   AIF   ('&RYAD' EQ '').PUTZER                                   00000560
         AIF   ('&RYAD'(1,1) EQ '(').ERROR3                             00000570
         DC    AL3(&RYAD)                        REPLY ADDRESS          00000580
         AGO   .CHKECBL                                                 00000590
.PUTZER  DC    AL3(0)                            REPLY ADDRESS          00000600
.CHKECBL AIF   ('&ECB' EQ '').ZEROS                                     00000610
         AIF   ('&ECB'(1,1) EQ '(').ERROR3                              00000620
         DC    A(&ECB)                           ECB ADDRESS            00000630
         AGO   .MESGCK                                                  00000640
.ZEROS   DC    A(0)                              ECB ADDRESS            00000650
.MESGCK  AIF   ('&MESG' EQ '').ERROR2                                   00000660
&IHBWTOR SETB  1                                                        00000670
         VWTO  &MESG,MF=&MF,MSGTYP=&MSGTYP,ROUTCDE=&ROUTCDE,DESC=&DESC,X00000680
               MCSFLAG=&MCSFLAG                                         00000690
&IHBWTOR SETB  0                                                        00000700
         AIF   ('&MF' EQ 'I').IRETURN                                   00000710
         AGO   .END                                                     00000720
.IROUT   CNOP  0,4                                                      00000730
&NAME    BAL   1,&GNAME.A                        BRANCH AROUND LIST     00000740
         AIF   ('&LENGTH' EQ '').ERROR4                                 00000750
         AIF   ('&LENGTH'(1,1) EQ '(').ZEROA                            00000760
         DC    AL1(&LENGTH)                      REPLY LENGTH           00000770
         AGO   .CHKNEXT                                                 00000780
.ZEROA   DC    AL1(0)                            REPLY LENGTH           00000790
.CHKNEXT AIF   ('&RYAD' EQ '').ERROR5                                   00000800
         AIF   ('&RYAD'(1,1) EQ '(').ZEROB                              00000810
         DC    AL3(&RYAD)                        REPLY ADDRESS          00000820
         AGO   .CHKECBI                                                 00000830
.ZEROB   DC    AL3(0)                            REPLY ADDRESS          00000840
.CHKECBI AIF   ('&ECB' EQ '').ERROR6                                    00000850
         AIF   ('&ECB'(1,1) EQ '(').ZEROC                               00000860
         DC    A(&ECB)                           ECB ADDRESS            00000870
         AGO   .MESGCK                                                  00000880
.ZEROC   DC    A(0)                              ECB ADDRESS            00000890
         AGO   .MESGCK                                                  00000900
.IRETURN ANOP                                                           00000910
&GNAME.A DS    0H                                                       00000920
         AIF   ('&RYAD'(1,1) NE '(').NOTRYAD                            00000930
         AIF   ('&LENGTH'(1,1) EQ '(').EASY                             00000940
         IC    14,0(1,0)                         SAVE REPLY LENGTH      00000950
         ST    &RYAD(1),0(1,0)                   STORE REPLY ADDRESS    00000960
         STC   14,0(1,0)                         RESTORE REPLY LENGTH   00000970
         AGO   .CHKECBQ                                                 00000980
.EASY    ST    &RYAD(1),0(1,0)                   STORE REPLY ADDRESS    00000990
.PUTLTH  STC   &LENGTH(1),0(1,0)                 STORE REPLY LENGTH     00001000
         AGO   .CHKECBQ                                                 00001010
.NOTRYAD AIF   ('&LENGTH'(1,1) EQ '(').PUTLTH                           00001020
.CHKECBQ AIF   ('&ECB'(1,1) NE '(').SVC                                 00001030
         ST    &ECB(1),4(1,0)                    STORE ECB ADDRESS      00001040
         AGO   .SVC                                                     00001050
.END     MEND                                                           00001060
//
         MACRO                                                          VWT00010
&N       VWTO  &X,&MF=I,&ROUTCDE=,&DESC=,&MSGTYP=,&MCSFLAG=             VWT00020
         GBLB  &IHBWTOR,&IHBWTL                                         VWT00030
         LCLA  &A                                                       VWT00040
         LCLB  &R(16),&D(16)                                            VWT00050
         LCLC  &GNAM,&MCSF,&RTC(2),&DEC(2)                              VWT00060
         AIF   (T'&MSGTYP EQ 'O' AND T'&MCSFLAG EQ 'O').OKPARM          VWT00070
         MNOTE 8,'VWTO/VWTOR DOESN''T SUPPORT MSGTYP= OR MCSFLAG= OPERA.VWT00080
               NDS.  THEY ARE IGNORED.'                                 VWT00090
.OKPARM  ANOP                                                           VWT00100
&MCSF    SETC  '0000'                                                   VWT00110
&GNAM    SETC  'IHB'.'&SYSNDX'                                          VWT00120
         AIF   ('&ROUTCDE' EQ '' AND '&DESC' EQ '').NOMCS               VWT00130
&MCSF    SETC  '8000'                                                   VWT00140
.NOMCS   AIF   ('&MF(1)' EQ 'I').MFI                                    VWT00150
         AIF   ('&MF(1)' EQ 'E').MFE                                    VWT00160
         AIF   ('&MF(1)' EQ 'L').MFL                                    VWT00170
         MNOTE 4,'MF=&MF NOT RECOGNIZED,  IGNORED.'                     VWT00180
.MFI     AIF   (&IHBWTOR).MFI1                                          VWT00190
         CNOP  0,4                                                      VWT00200
&N       BAL   1,&GNAM.A               BRANCH AROUND MESSAGE            VWT00210
.MFI1    ANOP                                                           VWT00220
.MFL1    DC    Y(&GNAM-*)              MESSAGE LENGTH                   VWT00230
         DC    X'&MCSF'                MCSFLAGS FIELD                   VWT00240
         VWTOLST  &X                                                    VWT00250
&GNAM    EQU   *                                                        VWT00260
         AIF   ('&MCSF' EQ '0000').SKCODES                              VWT00270
&A       SETA  0                                                        VWT00280
         AIF   ('&DESC' EQ '').NODCODE                                  VWT00290
         AIF   ('&ROUTCDE' NE '').DCSET                                 VWT00300
&R(2)    SETB  1                                                        VWT00310
.DCSET   ANOP                                                           VWT00320
&A       SETA  &A+1                                                     VWT00330
         AIF   (&DESC(&A) GE 1 AND &DESC(&A) LE 16).DCOK                VWT00340
         MNOTE 8,'&DESC(&A) IS INVALID DESCRIPTOR CODE - IGNORED.'      VWT00350
         AGO   .NXDC                                                    VWT00360
.DCOK    ANOP                                                           VWT00370
&D(&DESC(&A))  SETB  1                                                  VWT00380
.NXDC    AIF   (N'&DESC GT &A).DCSET                                    VWT00390
&A       SETA  0                                                        VWT00400
.NODCODE AIF   ('&ROUTCDE' EQ '').NOROUT                                VWT00410
.RCSET   ANOP                                                           VWT00420
&A       SETA  &A+1                                                     VWT00430
         AIF   (&ROUTCDE(&A) GE 1 AND &ROUTCDE(&A) LE 16).RCOK          VWT00440
         MNOTE 8,&ROUTCDE(&A) IS INVALID ROUTCDE - IGNORED.'            VWT00450
         AGO   .NXRC                                                    VWT00460
.RCOK    ANOP                                                           VWT00470
&R(&ROUTCDE(&A))  SETB  1                                               VWT00480
.NXRC    AIF   (N'&ROUTCDE GT &A).RCSET                                 VWT00490
.NOROUT  ANOP                                                           VWT00500
.SETCODE ANOP                                                           VWT00510
&DEC(1)  SETC  '&D(1).&D(2).&D(3).&D(4).&D(5).&D(6).&D(7).&D(8)'        VWT00520
&DEC(2)  SETC  '&D(9).&D(10).&D(11).&D(12).&D(13).&D(14).&D(15).&D(16)' VWT00530
&RTC(1)  SETC  '&R(1).&R(2).&R(3).&R(4).&R(5).&R(6).&R(7).&R(8)'        VWT00540
&RTC(2)  SETC  '&R(9).&R(10).&R(11).&R(12).&R(13).&R(14).&R(15).&R(16)' VWT00550
         DC    B'&DEC(1)&DEC(2)'       DESCRIPTOR CODES                 VWT00560
         DC    B'&RTC(1)&RTC(2)'       ROUTING CODES                    VWT00570
.SKCODES ANOP                                                           VWT00580
         AIF   ('&MF(1)' EQ 'L').END                                    VWT00590
         AIF   (&IHBWTOR).END                                           VWT00600
&GNAM.A  DS    0H                                                       VWT00610
         AIF   (&IHBWTL).END                                            VWT00620
         SVC   35                      ISSUE SVC                        VWT00630
         MEXIT                                                          VWT00640
.MFE     AIF   (N'&MF NE 2).E1                                          VWT00650
&N       IHBINNRA  &MF(2)                                               VWT00660
         AIF   (&IHBWTL).END                                            VWT00670
         SVC   35                      ISSUE SVC                        VWT00680
         MEXIT                                                          VWT00690
.MFL     AIF   (&IHBWTOR).MFL1                                          VWT00700
&N       DS    0F                                                       VWT00710
         AGO   .MFL1                                                    VWT00720
.E1      IHBERMAC  35,,&MF                                              VWT00730
.END     MEND                                                           VWT00740
//
         MACRO                                                          MAP04220
&SYMBOL  XPRSPACE  &WA,&LINES=1,&COND=                                  MAP04230
.* MACRO TO EXECUTE A SPACE CALL TO 'XPRNTSUB'.                         MAP04240
         LCLA  &N,&B6,&B7                                               MAP04250
         LCLC  &TAG,&SYM                                                MAP04260
&SYM     SETC  '&SYMBOL'                                                MAP04270
&TAG     SETC  'IHB&SYSNDX'                                             MAP04280
.LOOP    ANOP                                                           MAP04290
&N       SETA  &N+1                                                     MAP04300
         AIF   (&N GT N'&COND).LDONE                                    MAP04310
.TST1    AIF   ('&COND(&N)' NE 'NOEJ').TST2                             MAP04320
&B6      SETA  1                                                        MAP04330
         AGO   .LOOP                                                    MAP04340
.TST2    AIF   ('&COND(&N)' NE 'ATHOF').TST3                            MAP04350
&B7      SETA  1                                                        MAP04360
         AGO   .LOOP                                                    MAP04370
.TST3    MNOTE 4,'OPERAND &COND(&N) AFTER KEYWORD COND IS ILLEGAL'      MAP04380
         AGO   .LOOP                                                    MAP04390
.LDONE   CNOP  2,4                                                      MAP04400
         AIF   ('&LINES'(1,1) NE '(').NOTREG1                           MAP04410
&SYM     STC   &LINES(1),&TAG.A+1      STORE INTO PARM LIST             MAP04420
&SYM     SETC  ''                                                       MAP04430
.NOTREG1 ANOP                                                           MAP04440
&SYM     BAL   1,&TAG.L                LOAD PARM LIST ADDRESS           MAP04450
&TAG.A   DC    B'000000&B6&B7'         OPTION BITS                      MAP04460
         AIF   ('&LINES'(1,1) NE '(').NOTREG2                           MAP04470
         DC    X'00'                   SPACING AMOUNT                   MAP04480
         AGO   .VCON                                                    MAP04490
.NOTREG2 DC    AL1(&LINES)             SPACING AMOUNT                   MAP04500
.VCON    ANOP                                                           MAP04510
&TAG.L   XPRINNRA  &WA,44                                               MAP04520
         MEND                                                           MAP04530
//
         MACRO                                                          00010002
         REGISTER &GPR=R                                                00020003
*        REGISTER EQUATES                                               00030002
&GPR.0   EQU   0                                                        00040003
&GPR.1   EQU   1                                                        00050003
&GPR.2   EQU   2                                                        00060003
&GPR.3   EQU   3                                                        00070003
&GPR.4   EQU   4                                                        00080003
&GPR.5   EQU   5                                                        00090003
&GPR.6   EQU   6                                                        00100003
&GPR.7   EQU   7                                                        00110003
&GPR.8   EQU   8                                                        00120003
&GPR.9   EQU   9                                                        00130003
&GPR.10  EQU   10                                                       00140003
&GPR.11  EQU   11                                                       00150003
&GPR.12  EQU   12                                                       00160003
&GPR.13  EQU   13                                                       00170003
&GPR.14  EQU   14                                                       00180003
&GPR.15  EQU   15                                                       00190003
         MEND                                                           00200001
//
         MACRO                                                          00010001
&N       BLANK &X,&L                                                    00020001
         LCLA  &LL                                                      00030001
&N       MVI   &X,C' '                                                  00040001
         AIF   (T'&L EQ 'O').DEF                                        00050001
         MVC   &X+1(&L-1),&X                                            00060001
         MEXIT                                                          00070001
.DEF     ANOP                                                           00080001
&LL      SETA  L'&X-1                                                   00090001
         MVC   &X+1(&LL),&X                                             00100001
         MEND                                                           00110001
//
         MACRO
&SYMBOL  XPRCLOSE  &WA
.* MACRO TO EXECUTE A CLOSE CALL TO 'XPRNTSUB'.
         CNOP  0,4
&SYMBOL  B     *+8                     BRANCH AROUND ADDRESS
         XPRINNRA  &WA,68
         MEND
//
         MACRO
&SYMBOL  XPRDCB  &DDNAME=SYSPRINT,&BLKSIZE=0
         LCLC  &TAG
.* MACRO TO GENERATE A WORK AREA FOR A PRINTER DATA SET, CONTAINING
.* A SAVE AREA, THE DCB, OPEN AND CLOSE PARAMETER LISTS, AND VARIOUS
.* CELLS AND SWITCHES.
&TAG     SETC  '&SYMBOL'
         AIF   (T'&SYMBOL NE 'O').TOK  TEST IF NAME SUPPLIED
&TAG     SETC  'XPRDCB01'              SUPPLY STANDARD PRDCB NAME
.TOK     ANOP
&TAG     DS    0D                      ALIGN ON DOUBLE-WORD BOUNDARY
         DS    18F                     STANDARD SAVE AREA
         SPACE
*        DCB   DDNAME=&DDNAME,DSORG=PS,RECFM=VBM,LRECL=137,           X
*              BLKSIZE=&BLKSIZE,MACRF=PL,BFTEK=S,BUFNO=2
IHB&SYSNDX DCB DDNAME=&DDNAME,DSORG=PS,RECFM=VBM,LRECL=137,            X
               BLKSIZE=&BLKSIZE,MACRF=PL,BFTEK=S,BUFNO=2
         SPACE
* PARAMETER LISTS FOR OPEN AND CLOSE:
         SPACE
         OPEN  (IHB&SYSNDX,(OUTPUT,LEAVE)),MF=L  PARM LIST FOR OPEN
         SPACE
         CLOSE (IHB&SYSNDX,LEAVE),MF=L PARM LIST FOR CLOSE
         SPACE
* WORK CELLS AND VARIABLE STORAGE:
         SPACE
         DS    1D                      WORK CELL
         DS    3F                      WORK CELLS
         DS    1A                      PAGE HEADING PARM LIST ADDRESS
         DS    1F                      MAXIMUM NUMBER OF OUTPUT LINES
         DS    1H                      PAGE WIDTH
         DS    1H                      PAGE LENGTH
         DS    1H                      PAGE NUMBER
         DS    1H                      PAGE BALANCE
         DS    1X                      SWITCHES
         DS    CL24                    DATE & TIME FOR PAGE HEADING
         SPACE 2
         MEND
//
         MACRO
&SYMBOL  XPREJECT  &WA,&COND=
.* MACRO TO EXECUTE AN EJECT CALL TO 'XPRNTSUB'.
         LCLC  &TAG,&SYM,&OPT,&R
         LCLA  &K
&SYM     SETC  '&SYMBOL'
&TAG     SETC  'IHB&SYSNDX'
         CNOP  2,4
.TST1    AIF   ('&COND' NE '').TST2
&OPT     SETC  'F000'
         AGO   .SIMPLE
.TST2    AIF   ('&COND' NE 'ATHOF').TSTC
&OPT     SETC  'F100'
.SIMPLE  ANOP
&SYM     BAL   1,&TAG.L                LOAD PARM ADDRESS
         DC    XL2'&OPT'               OPTION BITS
         AGO   .VCON
.TSTC    AIF   ('&COND(1)' NE 'EQ').NE
&OPT     SETC  '80'
.NE      AIF   ('&COND(1)' NE 'NE').LT
&OPT     SETC  '70'
.LT      AIF   ('&COND(1)' NE 'LT').GT
&OPT     SETC  '40'
.GT      AIF   ('&COND(1)' NE 'GT').LE
&OPT     SETC  '20'
.LE      AIF   ('&COND(1)' NE 'LE').GE
&OPT     SETC  'C0'
.GE      AIF   ('&COND(1)' NE 'GE').NOT
&OPT     SETC  'A0'
.NOT     AIF   ('&OPT' NE '').COK
         MNOTE 4,'COND OPERAND &COND(1) ILLEGAL'
.COK     AIF   ('&COND(2)' NE '').C2OK
         MNOTE 4,'COND TEST QUANTITY MISSING'
         AGO   .NOTREG
.C2OK    AIF   ('&COND(2)'(1,1) NE '(').NOTREG
&K       SETA  K'&COND(2)-2
&R       SETC  '&COND(2)'(2,&K)
&SYM     STC   &R,&TAG.A               STORE INTO PARM LIST
&SYM     SETC  ''
.NOTREG  ANOP
&SYM     BAL   1,&TAG.L                LOAD PARM ADDRESS
         DC    XL1'&OPT'               CONDITION MASK
         AIF   ('&COND(2)' EQ '').NOTREG2
         AIF   ('&COND(2)'(1,1) NE '(').NOTREG2
&TAG.A   DC    AL1(0)                  TEST QUANTITY
         AGO   .VCON
.NOTREG2 DC    AL1(&COND(2))           TEST QUANTITY
.VCON    ANOP
&TAG.L   XPRINNRA  &WA,92
         MEND
//
         MACRO
&TAG     XPRINNRA  &WA,&IHBPARM
.* INNER MACRO USED IN CALLS TO 'XPRNTSUB'
         DC    V(XPRNTSUB)             PRINTING SUBROUTINE ADDRESS
&TAG     L     15,*-4                  LOAD ENTRY POINT
         AIF   ('&WA' NE '').WOK
         LA    0,XPRDCB01              LOAD STANDARD WORK AREA ADDRESS
         AGO   .BAL
.WOK     AIF   ('&WA' EQ '(0)').BAL
         AIF   ('&WA'(1,1) EQ '(').REG
         LA    0,&WA                   LOAD WORK AREA ADDRESS
         AGO   .BAL
.REG     LR    0,&WA(1)                LOAD WORK AREA ADDRESS
.BAL     BAL   14,&IHBPARM.(15)        CALL PRINT SUBROUTINE
         MEND
//
         MACRO
&SYMBOL  XPRLDEF  &TEXT=,&LENGTH=132,&OFFSET=0,&SPA=1,&SPB=0
.* MACRO TO DEFINE PRINT LINE DESCRIPTOR BLOCKS ("PLD" BLOCKS) FOR
.* THE PRINTING SUBROUTINE "XPRNTSUB".
         LCLA  &N
         LCLC  &B3,&B6,&B7
         ACTR  25                      JUST IN CASE
&B3      SETC  '0'
&B6      SETC  '0'
&B7      SETC  '0'
.* PROCESS OPTIONS IN SPA OPERAND:
.TSTA1   AIF   ('&SPA(2)' EQ '').TSTB1
         AIF   ('&SPA(2)' NE 'NOEJ').TSTA2
&B3      SETC  '1'
         AGO   .TSTB1
.TSTA2   MNOTE 4,'OPERAND &SPA(2) AFTER KEYWORD SPA IS ILLEGAL'
.* PROCESS OPTIONS IN SPB OPERAND:
.TSTB1   ANOP
&N       SETA  2
.TSTB5   AIF   ('&SPB(&N)' NE 'NOEJ').TSTB2
&B7      SETC  '1'
         AGO   .TSTB4
.TSTB2   AIF   ('&SPB(&N)' NE 'ATHOF').TSTB3
&B6      SETC  '1'
         AGO   .TSTB4
.TSTB3   AIF   ('&SPB(&N)' EQ '').TSTB4
         MNOTE 4,'OPERAND &SPB(&N) AFTER KEYWORD SPB IS ILLEGAL'
.TSTB4   ANOP
&N       SETA  &N+1
         AIF   (&N LE 3).TSTB5
.IFTEXT  AIF   ('&TEXT' NE '').TOK
         MNOTE 4,'TEXT ADDRESS MISSING'
.TOK     ANOP
&SYMBOL  DS    0F                      ALIGN ON FULL-WORD BOUNDARY
         DC    BL1'000&B3.00&B6&B7'    OPTION BITS
         DC    AL3(&TEXT)              TEXT ADDRESS
         DC    AL1(&LENGTH)            TEXT LENGTH
         DC    AL1(&OFFSET)            MARGIN OFFSET
.TESTB   AIF   ('&SPB(1)' EQ 'EJECT').BSKIP
         AIF   ('&SPB(1)' EQ 'SKIP').BSKIP
         DC    AL1(&SPB(1))            PRE-SPACING
         AGO   .TESTA
.BSKIP   ANOP
         DC    AL1(255)                EJECT BEFORE PRINTING
.TESTA   AIF   ('&SPA(1)' EQ 'EJECT').ASKIP
         AIF   ('&SPA(1)' EQ 'SKIP').ASKIP
         DC    AL1(&SPA(1))            POST-SPACING
         MEXIT
.ASKIP   ANOP
         DC    AL1(255)                EJECT AFTER PRINTING
         MEND
//
         MACRO
&SYMBOL  XPRLIST  &WA,&LIST=,&IHBPARM=32
.* MACRO TO DELIVER A LIST OF PRINT LINE DESCRIPTORS TO 'XPRNTSUB'.
         LCLA  &N,&K,&D
         LCLC  &TAG,&SYM,&R
         ACTR  100
&SYM     SETC  '&SYMBOL'
&TAG     SETC  'IHB&SYSNDX'
         AIF   ('&LIST' NE '').LOK
         MNOTE 8,'LIST OPERAND MUST BE SUPPLIED'
         MEXIT
.LOK     CNOP  0,4
         AIF   ('&LIST' NE '(1)').STLOOP
&SYMBOL  B     &TAG.L                  BRANCH AROUND ADDRESS
         AGO   .VCON
.STLOOP  ANOP
&N       SETA  &N+1
         AIF   (&N GT N'&LIST).STDONE
         AIF   ('&LIST(&N)'(1,1) NE '(').STLOOP
&K       SETA  K'&LIST(&N)-2
&R       SETC  '&LIST(&N)'(2,&K)
&D       SETA  4*(&N-1)
&SYM     ST    &R,&TAG.A+&D            STORE INTO PARM LIST
&SYM     SETC  ''
         AIF   (&N NE N'&LIST).STLOOP
         OI    &TAG.A+&D,X'80'         SET END-OF-LIST BIT
.STDONE  ANOP
&SYM     BAL   1,&TAG.L                LOAD PARM LIST ADDRESS
&SYM     SETC  '&TAG.A'
&N       SETA  0
.LOOP    ANOP
&N       SETA  &N+1
         AIF   (&N GT N'&LIST).VCON
         AIF   ('&LIST(&N)'(1,1) NE '(').NOTREG
&SYM     DC    A(0)
&SYM     SETC  ''
         AGO   .LOOP
.NOTREG  AIF   (&N EQ N'&LIST).LAST
&SYM     DC    A(&LIST(&N))
&SYM     SETC  ''
         AGO   .LOOP
.LAST    ANOP
&SYM     DC    X'80'                   END-OF-LIST BIT
         DC    AL3(&LIST(&N))
.VCON    ANOP
&TAG.L   XPRINNRA  &WA,&IHBPARM
         MEND
//
         MACRO
&SYMBOL  XPRMOD  &WA,&MAXLINE=0,&PAGENO=0,&PAGEWID=0,&PAGELEN=0,       X
               &TIME=0,&DATE=0
.* MACRO TO EXECUTE A MODIFY CALL TO 'XPRINTSUB'.
&SYMBOL  XPROPEN  &WA,MAXLINE=&MAXLINE,PAGENO=&PAGENO,PAGEWID=&PAGEWID,X
               PAGELEN=&PAGELEN,TIME=&TIME,DATE=&DATE,IHBPARM=104
         MEND
//
         MACRO
&SYMBOL  XPRNTLIN  &WA,&TEXT=00,&LENGTH=132,&OFFSET=0,&SPB=0,&SPA=1
         LCLA  &N
         LCLC  &B3,&B6,&B7,&T,&R
         ACTR  25
&T       SETC  'IHB&SYSNDX'
&B3      SETC  '0'
&B6      SETC  '0'
&B7      SETC  '0'
.* PROCESS OPTIONS IN SPA OPERAND:
.TSTA1   AIF   ('&SPA(2)' EQ '').TSTB1
         AIF   ('&SPA(2)' NE 'NOEJ').TSTA2
&B3      SETC  '1'
         AGO   .TSTB1
.TSTA2   MNOTE 4,'OPERAND &SPA(2) AFTER KEYWORD SPA IS ILLEGAL'
.* PROCESS OPTIONS IN SPB OPERAND:
.TSTB1   ANOP
&N       SETA  2
.TSTB5   AIF   ('&SPB(&N)' NE 'NOEJ').TSTB2
&B7      SETC  '1'
         AGO   .TSTB4
.TSTB2   AIF   ('&SPB(&N)' NE 'ATHOF').TSTB3
&B6      SETC  '1'
         AGO   .TSTB4
.TSTB3   AIF   ('&SPB(&N)' EQ '').TSTB4
         MNOTE 4,'OPERAND &SPB(&N) AFTER KEYWORD SPB IS ILLEGAL'
.TSTB4   ANOP
&N       SETA  &N+1
         AIF   (&N LE 3).TSTB5
.* GENERATE STORE INSTRUCTIONS IF REGISTER NOTATION IS USED:
         CNOP  0,4
         AIF   ('&SYMBOL' EQ '').IFR1
&SYMBOL  DS    0H
.IFR1    AIF   ('&TEXT' NE '00').TXTOK
         MNOTE 4,'TEXT ADDRESS MUST BE SUPPLIED'
.TXTOK   AIF   ('&TEXT'(1,1) NE '(').IFR2
         ST    &TEXT(1),&T.A           STORE TEXT ADDRESS
         MVI   &T.A,B'000&B3.00&B6&B7' INSERT OPTION BITS
.IFR2    AIF   ('&LENGTH'(1,1) NE '(').IFR3
         STC   &LENGTH(1),&T.A+4       STORE TEXT LENGTH
.IFR3    AIF   ('&OFFSET'(1,1) NE '(').IFR4
         STC   &OFFSET(1),&T.A+5       STORE MARGIN OFFSET
.IFR4    AIF   ('&SPB(1)'(1,1) NE '(').IFR5
&N       SETA  K'&SPB(1)-2
&R       SETC  '&SPB(1)'(2,&N)
         STC   &R,&T.A+6               STORE PRE-SPACING
.IFR5    AIF   ('&SPA(1)'(1,1) NE '(').LOAD1
&N       SETA  K'&SPA(1)-2
&R       SETC  '&SPA(1)'(2,&N)
         STC   &R,&T.A+7               STORE POST-SPACING
.* LOAD REG 1 AND GENERATE PLD LIST ADDRESS:
.LOAD1   BAL   1,&T.L                  LOAD PARM ADDRESS
         DC    X'80'                   MARK END OF ADDRESS LIST
         DC    AL3(&T.A)               ADDRESS OF PLD
.* GENREATE PLD PARAMETERS TO DESCRIBE THE PRINT LINE:
.IFR11   AIF   ('&TEXT'(1,1) NE '(').NOTR11
&T.A     DC    A(0)                    TEXT ADDRESS & OPTION BITS
         AGO   .IFR12
.NOTR11  ANOP
&T.A     DC    B'000&B3.00&B6&B7'      OPTION BITS
         DC    AL3(&TEXT)              TEXT ADDRESS
.IFR12   AIF   ('&LENGTH'(1,1) NE '(').NOTR12
         DC    AL1(0)                  TEXT LENGTH
         AGO   .IFR13
.NOTR12  DC    AL1(&LENGTH)            TEXT LENGTH
.IFR13   AIF   ('&OFFSET'(1,1) NE '(').NOTR13
         DC    AL1(0)                  MARGIN OFFSET
         AGO   .IFR14
.NOTR13  DC    AL1(&OFFSET)            MARGIN OFFSET
.IFR14   AIF   ('&SPB(1)'(1,1) NE '(').NOTR14
         DC    AL1(0)                  PRE-SPACING
         AGO   .IFR15
.NOTR14  AIF   ('&SPB(1)' EQ 'EJECT').BSKIP
         AIF   ('&SPB(1)' EQ 'SKIP').BSKIP
         DC    AL1(&SPB(1))            PRE-SPACING
         AGO   .IFR15
.BSKIP   DC    AL1(255)                SKIP BEFOR PRINTING
.IFR15   AIF   ('&SPA(1)'(1,1) NE '(').NOTR15
         DC    AL1(0)                  POST-SPACING
         AGO   .VCON
.NOTR15  AIF   ('&SPA(1)' EQ 'EJECT').ASKIP
         AIF   ('&SPA(1)' EQ 'SKIP').ASKIP
         DC    AL1(&SPA(1))            POST-SPACING
         AGO   .VCON
.ASKIP   DC    AL1(255)                SKIP AFTER PRINTING
.VCON    ANOP
&T.L     XPRINNRA  &WA,32
         MEND
//
         MACRO
&SYMBOL  XPROPEN  &WA,&MAXLINE=0,&PAGENO=0,&PAGEWID=0,&PAGELEN=0,      X
               &TIME=0,&DATE=0,&DDNAME=SYSPRINT,&IHBPARM=56
.* MACRO TO EXECUTE AN 'OPEN' OR 'MODIFY' CALL TO 'XPRNTSUB'.
         LCLC  &TAG
&TAG     SETC  'IHB&SYSNDX'
         AIF   ('&SYMBOL' EQ '').T1
&SYMBOL  DS    0H
.T1      AIF   ('&MAXLINE'(1,1) NE '(').T2
         ST    &MAXLINE(1),&TAG.A      STORE IN PARM LIST
.T2      AIF   ('&PAGENO'(1,1) NE '(').T3
         STH   &PAGENO(1),&TAG.A+4     STORE IN PARM LIST
.T3      AIF   ('&PAGEWID'(1,1) NE '(').T4
         STC   &PAGEWID(1),&TAG.A+6    STORE IN PARM LIST
.T4      AIF   ('&PAGELEN'(1,1) NE '(').T5
         STC   &PAGELEN(1),&TAG.A+7    STORE IN PARM LIST
.T5      AIF   ('&TIME'(1,1) NE '(').T6
         ST    &TIME(1),&TAG.A+8       STORE IN PARM LIST
.T6      AIF   ('&DATE'(1,1) NE '(').T7
         ST    &DATE(1),&TAG.A+12      STORE IN PARM LIST
.T7      AIF   ('&DDNAME'(1,1) NE '(').CNOP
         MVC   &TAG.A+16(8),0(&DDNAME(1))  STORE IN PARM LIST
.CNOP    CNOP  0,4
         BAL   1,&TAG.L                LOAD PARM LIST ADDRESS
.P1      AIF   ('&MAXLINE'(1,1) EQ '(').PR1
&TAG.A   DC    A(&MAXLINE)             PRINT OUTPUT LIMIT
         AGO   .P2
.PR1     ANOP
&TAG.A   DC    A(0)                    PRINT OUTPUT LIMIT
.P2      AIF   ('&PAGENO'(1,1) EQ '(').PR2
         DC    AL2(&PAGENO)            PAGE NUMBER
         AGO   .P3
.PR2     DC    AL2(0)                  PAGE NUMBER
.P3      AIF   ('&PAGEWID'(1,1) EQ '(').PR3
         DC    AL1(&PAGEWID)           PAGE WIDTH
         AGO   .P4
.PR3     DC    AL1(0)                  PAGE WIDTH
.P4      AIF   ('&PAGELEN'(1,1) EQ '(').PR4
         DC    AL1(&PAGELEN)           PAGE LENGTH
         AGO   .P5
.PR4     DC    AL1(0)                  PAGE LENGTH
.P5      AIF   ('&TIME'(1,1) EQ '(').PR5
         DC    A(&TIME)                ADDRESS OF TIME
         AGO   .P6
.PR5     DC    A(0)                    ADDRESS OF TIME
.P6      AIF   ('&DATE'(1,1) EQ '(').PR6
         DC    A(&DATE)                ADDRESS OF DATE
         AGO   .P7
.PR6     DC    A(0)                    ADDRESS OF DATE
.P7      AIF   ('&IHBPARM' NE '56').VCON
         AIF   ('&DDNAME'(1,1) EQ '(').PR7
         DC    CL8'&DDNAME'            DDNAME FOR DATA SET
         AGO   .VCON
.PR7     DC    CL8' '                  DDNAME FOR DATA SET
.VCON    ANOP
&TAG.L   XPRINNRA  &WA,&IHBPARM
         MEND
//
         MACRO
&SYMBOL  XPRHEAD  &WA,&LIST=
.* MACRO TO PRESENT A LIST OF PRINT LINE DESCRIPTORS FOR PAGE HEADINGS
.* TO 'XPRNTSUB'.
&SYMBOL  XPRLIST  &WA,LIST=&LIST,IHBPARM=80
         MEND
//
*                                                                       00500005
*        %GOTO TIOTL1;   /*                                             00550005
         MACRO                                                          01000005
         IEFTIOT1   ,   */                                              01500005
*%TIOTL1 : ;                                                            01550005
*                                                                       01600005
*/* **************************************************************** */ 01650005
*/*            TASK INPUT/OUTPUT TABLE                               */ 01700005
*/*                                                                  */ 01750005
*/*  OS/VS1 SU4, 12/07/76, LEVEL=1                                   */ 01755060
*/*                                                                  */ 01850005
*/*  METHOD OF ACCESS                                                */ 01900005
*/*      BAL  - A DSECT CARD SHOULD PRECEDE MACRO CALL.  USING ON    */ 01950005
*/*             TIOT1 GIVES ADDRESSABILITY FOR ALL SYMBOLS.          */ 01960005
*/*      PL/S - DCL TIOTPTR PTR                                      */ 01970005
*/* **************************************************************** */ 01980005
*%GOTO TIOTL2;  /*                                                      01990005
         SPACE 1                                                        01992005
         DS    0F                                                       02000005
TIOT1    EQU   * -            TIOTPTR                                   02500005
TIOCNJOB DS    CL8  -         JOB NAME                                  03000005
TIOCSTEP DS    CL16 -         FOR A JOB STEP THAT IS NOT A PROCEDURE    03500005
*                             STEP, 8-BYTE JOB STEP NAME AND 8 RESERVED 03550005
*                             BYTES.  FOR A JOB STEP THAT IS A          03600005
*                             PROCEDURE STEP, 8-BYTE PROCEDURE STEP     03650005
*                             NAME AND 8-BYTE JOB STEP NAME OF THE JOB  03700005
*                             STEP THAT CALLED THE PROCEDURE.           03750005
         SPACE 1                                                        03800005
*********************************************************************** 04000005
*                                                                     * 04500003
*   DD ENTRY                                                          * 05000005
*                                                                     * 05050005
*        THERE IS A 16-BYTE DD ENTRY FOR EACH DD STATEMENT IN THE     * 05100005
*        JOB STEP OR PROCEDURE STEP.  (REFERENCES TO GDG (ALL) DATA   * 05150005
*        SETS, THE JOBLIB DATA SET OR PGM=*.DDNAME CREATE STILL       * 05200005
*        OTHER DD ENTRIES.)                                           * 05250005
*                                                                     * 05500005
*        A DD ENTRY INCLUDES A DEVICE ENTRY.  BEFORE ALLOCATION,      * 06000005
*        THERE MAY BE SEVERAL DEVICE ENTRIES IN EACH DD ENTRY.        * 06500005
*                                                                     * 07000003
*********************************************************************** 07500005
         SPACE 1                                                        07550005
TIOENTRY EQU   * -            TIODDPTR                                  08000005
TIOELNGH DS    FL1 -          LENGTH, IN BYTES, OF THIS ENTRY           08500005
*                             (INCLUDING ALL DEVICE ENTRIES)            08550005
TIOESTTA DS    B -            STATUS BYTE A                             09000005
TIOSLTYP EQU   X'80' -        NONSTANDARD LABEL (TAPE)                  09500005
TIOSPLTP EQU   X'40' -        DURING ALLOCATION, SPLIT CYLINDER         10000005
*                             PRIMARY.  (THIS IS THE FIRST DD ENTRY FOR 10050005
*                             A SPLIT CYLINDER.)                        10100005
*                             DURING STEP TERMINATION, NO UNALLOCATION  10150005
*                             NECESSARY.                                10200005
TIOSPLTS EQU   X'20' -        DURING ALLOCATION, SPLIT CYLINDER         10500005
*                             SECONDARY.  (THIS IS NOT THE FIRST DD     10550005
*                             ENTRY FOR A SPLIT CYLINDER.)              10600005
*                             DURING STEP TERMINATION, REWIND BUT NO    10650005
*                             UNLOADING.                                10700005
TIOSJBLB EQU   X'10' -        JOBLIB INDICATOR                          11000005
TIOSDADS EQU   X'08' -        DADSM ALLOCATION NECESSRY                 11500005
TIOSLABL EQU   X'04' -        LABELED TAPE.  IF BIT 0 IS OFF, SL OR     12000005
*                             SUL.  IF BIT 0 IS ALSO ON, AL OR AUL.     12050005
TIOSDSP1 EQU   X'02' -        REWIND/UNLOAD THE TAPE VOLUME (TAPE)      12500005
*                             PRIVATE VOLUME (DIRECT ACCESS)     MDC001 12550005
TIOSDSP2 EQU   X'01' -        REWIND THE TAPE VOLUME (TAPE)             13000005
*                             PUBLIC VOLUME (DIRECT ACCESS)      MDC002 13050005
TIOERLOC DS    0CL2 -         RELATIVE LOCATION OF POOL                 15500005
TIOEWTCT DS    CL1 -          DURING ALLOCATION, NUMBER OF DEVICES      16000005
*                             REQUESTED FOR THIS DATA SET               16050005
TIOELINK DS    CL1 -          DURING ALLOCATION, LINK TO THE            17500005
*                             APPROPRIATE PRIME SPLIT, UNIT AFFINITY,   17550005
*                             VOLUME AFFINITY OR SUBALLOCATE TIOT       17600005
*                             ENTRY.  AFTER ALLOCATION, FLAG BYTE.      17650005
TIOSYOUT EQU   X'80' -        THIS IS A SYSOUT DATA SET THAT CONTAINS   20500005
*                             DATA (AFTER CLOSE)                        20550005
TIOTSSDS EQU   X'40' -        SUBSYSTEM DATA SET (OS/VS1)               20600060
*                             (MDC300)                         @M06SP9A 20650060
TIOTTERM EQU   X'20' -        DEVICE IS A TERMINAL                      21500005
TIOEDYNM EQU   X'10' -        DYNAM CODED ON DD STATEMENT               22000005
TIOEQNAM EQU   X'08' -        QNAME CODED ON DD STATEMENT               22500005
TIOESYIN EQU   X'04' -        ENTRY FOR SPOOLED SYSIN DATA SET          22550005
*                             (OS/VS1)                           MDC003 22560005
TIOESYOT EQU   X'02' -        ENTRY FOR SPOOLED SYSOUT DATA SET         22600005
*                             (OS/VS1)                           MDC004 22602005
TIOESSDS EQU   X'02' -        ENTRY FOR A SUBSYSTEM DATA SET            22610005
*                             (OS/VS2)                           MDC005 22620005
TIOTREM  EQU   X'01' -        ENTRY FOR A REMOTE DEVICE          ICB340 22650005
TIOEDDNM DS    CL8 -          DD NAME                                   24000005
TIOEJFCB DS    CL3 -          RELATIVE TRACK ADDRESS (TTR) OF THE JFCB. 24500005
*                             (DURING ALLOCATION, TTR OF THE SIOT IF    24550005
*                             SUBALLOCATE WAS REQUESTED.)               24600005
TIOESTTC DS    B -            STATUS BYTE C.  USED DURING ALLOCATION    25000005
*                             ONLY.  SET TO ZEROS AT END OF ALLOCATION. 25050005
TIOSDKCR EQU   X'80' -        MAIN STORAGE OR DASD ADDRESS              25500005
TIOSDEFR EQU   X'40' -        DEFERRED MOUNT                            26000005
TIOSAFFP EQU   X'20' -        PRIMARY UNIT AFFINITY                     26500005
TIOSAFFS EQU   X'10' -        SECONDARY UNIT AFFINITY                   27000005
TIOSVOLP EQU   X'08' -        PRIMARY VOLUME AFFINITY                   27500005
TIOSVOLS EQU   X'04' -        SECONDARY VOLUME AFFINITY                 28000005
TIOSBALP EQU   X'02' -        PRIMARY SUBALLOCATE                       28500005
TIOSBALS EQU   X'01' -        SECONDARY SUBALLOCATE                     29000005
         SPACE 1                                                        29050005
*********************************************************************** 29500005
*                                                                     * 30000003
*   DEVICE ENTRIES                                                    * 30500005
*                                                                     * 31000005
*      1. DURING ALLOCATION -                                         * 31500005
*                ONE DEVICE ENTRY FOR EACH DEVICE REQUIRED, OR FOR    * 32000005
*                EACH PUBLIC DEVICE ELIGIBLE.                         * 32500005
*                                                                     * 33000005
*      2. DURING PROBLEM PROGRAM -                                    * 33500005
*                ONE DEVICE ENTRY FOR EACH ALLOCATED DEVICE.          * 34000005
*                                                                     * 34500005
*********************************************************************** 35000005
         SPACE 1                                                        35050005
TIOESTTB DS    B -            STATUS BYTE B - DURING ALLOCATION AND     35500005
*                             DURING PROBLEM PROGRAM                    35550005
TIOSUSED EQU   X'80' -        DATA SET IS ON DEVICE                     36000005
TIOSREQD EQU   X'40' -        DATA SET WILL USE DEVICE                  36500005
TIOSPVIO EQU   X'20' -        DEVICE VIOLATES SEPARATION                37000005
TIOSVLSR EQU   X'10' -        VOLUME SERIAL PRESENT                     37500005
TIOSSETU EQU   X'08' -        SETUP MESSAGE REQUIRED                    38000005
TIOSMNTD EQU   X'04' -        IF 0, DELETE UNLOADED VOLUME IF UNLOAD    38500005
*                             REQUIRED.  IF 1, RETAIN UNLOADED VOLUME   38550005
*                             IF UNLOAD REQUIRED.                       38600005
TIOSUNLD EQU   X'02' -        UNLOAD REQUIRED                           39000005
TIOSVERF EQU   X'01' -        VERIFICATION REQUIRED                     39500005
TIOEFSRT DS    AL3 -          DURING PROBLEM PROGRAM, ADDRESS OF UCB.   40000005
*                             DURING ALLOCATION, BITS 0-11 CONTAIN      40050005
*                             OFFSET, IN THE UCB LOOK-UP TABLE, TO AN   40100005
*                             ADDRESS FOR A DEVICE REQUIRED OR ELIGIBLE 40150005
*                             FOR THIS DATA SET.  THE UCB LOOK-UP TABLE 40200005
*                             HAS ADDRESSES OF UCB'S.  BITS 12-23       40250005
*                             CONTAIN OFFSET, IN THE STEP VOLUME TABLE  40300005
*                             (VOLT), TO THE VOLUME SERIAL NUMBER FOR   40350005
*                             THE VOLUME REQUIRED OR ELIGIBLE FOR THIS  40400005
*                             DATA SET.                                 40450005
         SPACE 2                                                        40460005
*        TIOT POOL ENTRY                                                40500005
         SPACE 1                                                        40550005
POOLSTAR EQU   *                                                        41000005
         DS    CL1 -          RESERVED                                  41500005
TIOPNSLT DS    FL1 -          NUMBER OF SLOTS FOR POOL                  42000005
         DS    CL1 -          RESERVED                                  42500005
TIOPNSRT DS    FL1 -          NUMBER OF DEVICES (FILLED SLOTS)          43000005
TIOPPOOL DS    CL8 -          POOL NAME                                 44000005
TIOPSTTB DS    XL1 -          STATUS OF SLOT                            44500005
TIOPSLOT DS    AL3 -          UCB ADDRESS OR EMPTY SLOT                 45000005
TIOTFEND DS    CL4 -          FINAL END OF THE TIOT - BINARY ZEROS      45500005
         MEND   ,  */                                                   46500005
//
*%TIOTL2:;                                                              47000005
*                                                                       47100005
* DECLARE                                                               47500005
*  1 TIOT1    BASED(TIOTPTR) BDY(WORD),                                 48000005
*   2 TIOCNJOB    CHAR(8),               /* JOB NAME                 */ 48500005
*   2 TIOCSTEP    CHAR(16);              /* FOR A JOB STEP THAT IS      49000005
*                                           NOT A PROCEDURE STEP,       49050005
*                                           8-BYTE JOB STEP NAME AND    49100005
*                                           8 RESERVED BYTES.  FOR A    49150005
*                                           JOB STEP THAT IS A          49200005
*                                           PROCEDURE STEP, 8-BYTE      49250005
*                                           PROCEDURE STEP NAME AND     49300005
*                                           8-BYTE JOB STEP NAME OF     49350005
*                                           THE JOB STEP THAT CALLED    49400005
*                                           THE PROCEDURE.           */ 49450005
*                                                                       49460005
*/********************************************************************/ 49500005
*/*                                                                  */ 50000005
*/* DD ENTRY                                                         */ 50500005
*/*                                                                  */ 50550005
*/*      THERE IS A 16-BYTE DD ENTRY FOR EACH DD STATEMENT IN THE    */ 50600005
*/*      JOB STEP OR PROCEDURE STEP.  (REFERENCES TO GDG (ALL) DATA  */ 50650005
*/*      SETS, THE JOBLIB DATA SET OR PGM=*.DDNAME CREATE STILL      */ 50700005
*/*      OTHER DD ENTRIES.)                                          */ 50750005
*/*                                                                  */ 51000005
*/*      A DD ENTRY INCLUDES A DEVICE ENTRY.  BEFORE ALLOCATION,     */ 51500005
*/*      THERE MAY BE SEVERAL DEVICE ENTRIES IN EACH DD ENTRY.       */ 52000005
*/*                                                                  */ 52500005
*/********************************************************************/ 53000005
*                                                                       53100005
* DECLARE                                                               53500005
*%IF TIOENPTR=''  %THEN                                                 53550005
*    %GOTO TIOTA1;                                                      53600005
*  1 TIOENTRY   BASED(TIOENPTR) BDY(WORD),                              54000005
*%GOTO TIOTA3;                                                          54050005
*%TIOTA1 : ;                                                            54100005
*%IF IKEPLS='2'  %THEN                                                  54150005
*    %GOTO TIOTA2;                                                      54200005
*  1 TIOENTRY BASED(ADDR(TIOT1)+24) BDY(WORD),                          54250005
*%GOTO TIOTA3;                                                          54260005
*%TIOTA2 : ;                                                            54300005
*  1 TIOENTRY DEF(TIOT1) POS(25) BDY(WORD),                             54350005
*%TIOTA3 : ;                                                            54400005
*   2 TIOELNGH    PTR(8),                /* LENGTH, IN BYTES, OF THIS   54500005
*                                           ENTRY (INCLUDING ALL        54550005
*                                           DEVICE ENTRIES)          */ 54600005
*   2 TIOESTTA    BIT(8),                /* STATUS BYTE A            */ 55000005
*    3 TIOSLTYP BIT(1),                  /* NONSTANDARD LABEL (TAPE) */ 55500005
*    3 TIOSPLTP BIT(1),                  /* DURING ALLOCATION, SPLIT    56000005
*                                           CYLINDER PRIMARY.  (THIS    56050005
*                                           IS THE FIRST DD ENTRY FOR   56100005
*                                           A SPLIT CYLINDER.)          56150005
*                                           DURING STEP TERMINATION,    56200005
*                                           NO UNALLOCATION             56250005
*                                           NECESSARY.               */ 56300005
*    3 TIOSPLTS BIT(1),                  /* DURING ALLOCATION, SPLIT    56500005
*                                           CYLINDER SECONDARY.         56550005
*                                           (THIS IS NOT THE FIRST DD   56600005
*                                           ENTRY FOR A SPLIT           56650005
*                                           CYLINDER.)  DURING STEP     56700005
*                                           TERMINATION, REWIND BUT     56750005
*                                           NO UNLOADING.            */ 56800005
*    3 TIOSJBLB BIT(1),                  /* JOBLIB INDICATOR         */ 57000005
*    3 TIOSDADS BIT(1),                  /* DADSM ALLOCATION            57500005
*                                           NECESSARY                */ 57550005
*    3 TIOSLABL BIT(1),                  /* LABELED TAPE.  IF BIT 0     58000005
*                                           IS OFF, SL OR SUL.  IF      58050005
*                                           BIT 0 IS ALSO ON, AL OR     58100005
*                                           AUL.                     */ 58150005
*    3 TIOSDSP1 BIT(1),                  /* REWIND/UNLOAD THE TAPE      58500005
*                                           VOLUME  (TAPE)              58510005
*                                           PRIVATE VOLUME (DIRECT      58550005
*                                           ACCESS)            MDC001*/ 58600005
*    3 TIOSDSP2 BIT(1),                  /* REWIND THE TAPE VOLUME      59000005
*                                           (TAPE)                      59010005
*                                           PUBLIC VOLUME (DIRECT       59050005
*                                           ACCESS)            MDC002*/ 59100005
*   2 TIOERLOC    CHAR(2),               /* RELATIVE LOCATION OF POOL*/ 60500005
*    3 TIOEWTCT    PTR(8),               /* DURING ALLOCATION, NUMBER   61000005
*                                           OF DEVICES REQUESTED FOR    61050005
*                                           THIS DATA SET            */ 61100005
*    3 TIOELINK    CHAR(1),              /* DURING ALLOCATION, LINK     63000005
*                                           TO THE APPROPRIATE PRIME    63050005
*                                           SPLIT, UNIT AFFINITY,       63100005
*                                           VOLUME AFFINITY OR          63150005
*                                           SUBALLOCATE TIOT ENTRY.     63200005
*                                           AFTER ALLOCATION, FLAG      63250005
*                                           BYTE                     */ 63300005
*     4 TIOSYOUT BIT(1),                 /* THIS IS A SYSOUT DATA SET   66000005
*                                           THAT CONTAINS DATA          66050005
*                                           (AFTER CLOSE)            */ 66100005
*     4 TIOTSSDS BIT(1),                 /* SUBSYSTEM DATA SET          66150060
*                                           (OS/VS1)                    66500060
*                                           (MDC300)         @M06SP9A*/ 66520060
*     4 TIOTTERM BIT(1),                 /* DEVICE IS A TERMINAL     */ 67000005
*     4 TIOEDYNM BIT(1),                 /* DYNAM CODED ON DD           67500005
*                                           STATEMENT                */ 67550005
*     4 TIOEQNAM BIT(1),                 /* QNAME CODED ON DD           68000005
*                                           STATEMENT                */ 68010005
*     4 TIOESYIN BIT(1),                 /* ENTRY FOR SPOOLED SYSIN     68050005
*                                           DATA SET (OS/VS1)  MDC003*/ 68052005
*     4 TIOESYOT BIT(1),                 /* ENTRY FOR SPOOLED SYSOUT    68100005
*                                           DATA SET (OS/VS1)  MDC004*/ 68150005
*      5 TIOESSDS BIT(1),                /* ENTRY FOR A SUBSYSTEM DATA  68200005
*                                           SET (OS/VS2)       MDC005*/ 68250005
*     4 TIOTREM  BIT(1),                 /* ENTRY FOR A REMOTE DEVICE   68500005
*                                                              ICB340*/ 68550005
*   2 TIOEDDNM    CHAR(8),               /* DD NAME                  */ 69000005
*   2 TIOEJFCB    CHAR(3),               /* RELATIVE TRACK ADDRESS      69500005
*                                           (TTR) OF THE JFCB.          69550005
*                                           (DURING ALLOCATION, TTR     69600005
*                                           OF THE SIOT IF SUBALLOCATE  69650005
*                                           WAS REQUESTED.)          */ 69700005
*   2 TIOESTTC    BIT(8),                /* STATUS BYTE C.  USED        70000005
*                                           DURING ALLOCATION ONLY.     70050005
*                                           SET TO ZEROS AT END OF      70100005
*                                           ALLOCATION.              */ 70150005
*    3 TIOSDKCR BIT(1),                  /* MAIN STORAGE OR DASD        70500005
*                                           ADDRESS                  */ 70550005
*    3 TIOSDEFR BIT(1),                  /* DEFERRED MOUNT           */ 71000005
*    3 TIOSAFFP BIT(1),                  /* PRIMARY UNIT AFFINITY    */ 71500005
*    3 TIOSAFFS BIT(1),                  /* SECONDARY UNIT AFFINITY  */ 72000005
*    3 TIOSVOLP BIT(1),                  /* PRIMARY VOLUME AFFINITY  */ 72500005
*    3 TIOSVOLS BIT(1),                  /* SECONDARY VOLUME AFFINITY*/ 73000005
*    3 TIOSBALP BIT(1),                  /* PRIMARY SUBALLOCATE      */ 73500005
*    3 TIOSBALS BIT(1),                  /* SECONDARY SUBALLOCATE    */ 74000005
*                                                                       74050005
*/********************************************************************/ 74500005
*/*                                                                  */ 75000005
*/* DEVICE ENTRIES                                                   */ 75500005
*/*                                                                  */ 76000005
*/*    1. DURING ALLOCATION -                                        */ 76500005
*/*              ONE DEVICE ENTRY FOR EACH DEVICE REQUIRED, OR FOR   */ 77000005
*/*              EACH PUBLIC DEVICE ELIGIBLE.                        */ 77500005
*/*                                                                  */ 78000005
*/*    2. DURING PROBLEM PROGRAM -                                   */ 78500005
*/*              ONE DEVICE ENTRY FOR EACH ALLOCATED DEVICE.         */ 79000005
*/*                                                                  */ 79500005
*/********************************************************************/ 80000005
*                                                                       80050005
*   2 TIOESTTB    BIT(8) BDY(WORD),      /* STATUS BYTE B - DURING      80500005
*                                           ALLOCATION AND DURING       80550005
*                                           PROBLEM PROGRAM          */ 80600005
*    3 TIOSUSED BIT(1),                  /* DATA SET IS ON DEVICE    */ 81000005
*    3 TIOSREQD BIT(1),                  /* DATA SET WILL USE DEVICE */ 81500005
*    3 TIOSPVIO BIT(1),                  /* DEVICE VIOLATES             82000005
*                                           SEPARATION               */ 82050005
*    3 TIOSVLSR BIT(1),                  /* VOLUME SERIAL PRESENT    */ 82500005
*    3 TIOSSETU BIT(1),                  /* SETUP MESSAGE REQUIRED   */ 83000005
*    3 TIOSMNTD BIT(1),                  /* IF 0, DELETE UNLOADED       83500005
*                                           VOLUME IF UNLOAD            83550005
*                                           REQUIRED.  IF 1, RETAIN     83600005
*                                           UNLOADED VOLUME IF          83650005
*                                           UNLOAD REQUIRED.         */ 83700005
*    3 TIOSUNLD BIT(1),                  /* UNLOAD REQUIRED          */ 84000005
*    3 TIOSVERF BIT(1),                  /* VERIFICATION REQUIRED    */ 84500005
*   2 TIOEFSRT    PTR(24),               /* DURING PROBLEM PROGRAM,     85000005
*                                           ADDRESS OF THE UCB.         85050005
*                                           DURING ALLOCATION, BITS     85100005
*                                           0-11 CONTAIN OFFSET, IN     85150005
*                                           THE UCB LOOK-UP TABLE, TO   85200005
*                                           AN ADDRESS FOR A DEVICE     85250005
*                                           REQUIRED OR ELIGIBLE FOR    85300005
*                                           THIS DATA SET.  THE UCB     85350005
*                                           LOOK-UP TABLE HAS           85400005
*                                           ADDRESSES OF UCB'S.         85450005
*                                           BITS 12-23 CONTAIN OFFSET,  85460005
*                                           IN THE STEP VOLUME TABLE    85470005
*                                           (VOLT) TO THE VOLUME        85480005
*                                           SERIAL NUMBER FOR THE       85490005
*                                           VOLUME REQUIRED OR          85492005
*                                           ELIGIBLE FOR THIS DATA      85494005
*                                           SET.                     */ 85496005
*                                                                       85498005
*/********************************************************************/ 85500005
*/*                                                                  */ 86000005
*/*            TIOT POOL ENTRY                                       */ 86500005
*/*                                                                  */ 87000005
*/********************************************************************/ 87500005
*                                                                       87550005
*   2 POOLSTAR,                                                         88000005
*    3 *           CHAR(1),              /* RESERVED                 */ 88500005
*    3 TIOPNSLT    PTR(8),               /* NUMBER OF SLOTS FOR POOL */ 89000005
*    3 *           CHAR(1),              /* RESERVED                 */ 89050005
*    3 TIOPNSRT    PTR(8),               /* NUMBER OF DEVICES (FILLED   90000005
*                                           SLOTS)                   */ 90500005
*    3 TIOPPOOL    CHAR(8),              /* POOL NAME                */ 91000005
*    3 TIOPSTTB    CHAR(1),              /* STATUS OF SLOT           */ 91500005
*    3 TIOPSLOT    PTR(24),              /* UCB ADDRESS OR EMPTY SLOT*/ 92000005
*    3 TIOTFEND    CHAR(4);              /* FINAL END OF THE TIOT -     92500005
*                                           BINARY ZEROS             */ 93000005
*                                                                       93050005
*/********************************************************************/ 93100005
*/*                                                                  */ 93150005
*/*            DECLARE FOR MULTIPLE DEVICE ENTRIES                   */ 93200005
*/*                                                                  */ 93250005
*/********************************************************************/ 93300005
*                                                                       93350005
*DECLARE                                                                93400005
*%IF IKEPLS='2'  %THEN                                                  93450005
*    %GOTO TIOTA4;                                                      93500005
*  1 TIOEDEVE (*) FIXED(31) BASED(ADDR(TIOESTTB)),                      93550005
*%GOTO TIOTA5;                                                          93600005
*%TIOTA4 : ;                                                            93650005
*  1 TIOEDEVE (*) FIXED(31) DEF(TIOESTTB),                              93700005
*%TIOTA5 : ;                                                            93750005
*   2 TIOSTTB     BIT(8),                /* STATUS BYTE B - DURING      93800005
*                                           ALLOCATION AND DURING       93810005
*                                           PROBLEM PROGRAM          */ 93820005
*    3 TIOUSED  BIT(1),                  /* DATA SET IS ON DEVICE    */ 93850005
*    3 TIOREQD  BIT(1),                  /* DATA SET WILL USE DEVICE */ 93900005
*    3 TIOPVIO  BIT(1),                  /* DEVICE VIOLATES             93950005
*                                           SEPARATION               */ 93960005
*    3 TIOVLSR  BIT(1),                  /* VOLUME SERIAL PRESENT    */ 94000005
*    3 TIOSETU  BIT(1),                  /* SETUP MESSAGE REQUIRED   */ 94050005
*    3 TIOMNTD  BIT(1),                  /* IF 0, DELETE UNLOADED       94100005
*                                           VOLUME IF UNLOAD            94110005
*                                           REQUIRED.  IF 1, RETAIN     94120005
*                                           UNLOADED VOLUME IF          94130005
*                                           UNLOAD REQUIRED.         */ 94140005
*    3 TIOUNLD  BIT(1),                  /* UNLOAD REQUIRED          */ 94150005
*    3 TIOVERF  BIT(1),                  /* VERIFICATION REQUIRED    */ 94200005
*   2 TIOUCBP     PTR(24);               /* DURING PROBLEM PROGRAM,     94250005
*                                           ADDRESS OF THE UCB.         94300005
*                                           DURING ALLOCATION, BITS     94350005
*                                           0-11 CONTAIN OFFSET, IN     94400005
*                                           THE UCB LOOK-UP TABLE, TO   94450005
*                                           AN ADDRESS FOR A DEVICE     94500005
*                                           REQUIRED OR ELIGIBLE FOR    94550005
*                                           THIS DATA SET.  THE UCB     94600005
*                                           LOOK-UP TABLE HAS           94650005
*                                           ADDRESSES OF UCB'S.         94700005
*                                           BITS 12-23 CONTAIN OFFSET,  94750005
*                                           IN THE STEP VOLUME TABLE    94800005
*                                           (VOLT) TO THE VOLUME        94850005
*                                           SERIAL NUMBER FOR THE       94900005
*                                           VOLUME REQUIRED OR          94950005
*                                           ELIGIBLE FOR THIS DATA      95000005
*                                           SET.                     */ 95050005
*                                                                       00100001
*        %GOTO JFCBL1;          /*                                      00150002
         MACRO                                                          00200000
         IEFJFCBN &LIST=NO   ,   */                                     00300002
*%JFCBL1 : ;                                                            00350001
*                                                                       00360001
*/* **************************************************************** */ 00400001
*/*                                                                  */ 00500001
*/*                    JOB FILE CONTROL BLOCK                        */ 00600001
*/*                                                                  */ 00700001
*/*  OS/VS1 SU6, 09/22/76, LEVEL=2                                   */ 00710060
*/*                                                                  */ 00762001
*/*  METHOD OF ACCESS                                                */ 00772001
*/*      BAL  - A DSECT CARD SHOULD PRECEDE MACRO CALL.  USING ON    */ 00782001
*/*             INFMJFCB GIVES ADDRESSABILITY FOR ALL SYMBOLS.       */ 00792001
*/*      PL/S - DCL JFCBPTR PTR                                      */ 00794001
*/*                                                                  */ 00796002
*/*  F.E.'S                                                          */ 00798002
*/*      MICROFICHE LISTING - IEFJFCBN                               */ 00798402
*/*                                                                  */ 00798802
*/*  DEVELOPERS                                                      */ 00799202
*/*      BAL LISTING  - SPECIFY LIST=YES ON MACRO CALL.              */ 00799602
*/*      PL/S LISTING - SPECIFY %IHALIST='YES' BEFORE INCLUDE.       */ 00799702
*/*                                                                  */ 00799802
*/*      FOR INTEGRATION A LISTING SHOULD NOT BE REQUESTED.          */ 00799902
*/* **************************************************************** */ 00800001
*%GOTO JFCBL2;  /*                                                      00802001
         PUSH  PRINT                                                    00802402
         AIF   ('&LIST' EQ 'YES').JFCB1                                 00802802
         PRINT OFF                                                      00803202
.JFCB1   ANOP                                                           00803602
         SPACE 1                                                        00804001
         DS    0F                                                       00810001
INFMJFCB EQU   *                                                        00900000
JFCBQNAM DS    0CL8 -    PROCESS QUEUE NAME SPECIFIED BY THE QNAME      00910002
*                        KEYWORD  (TCAM)                                00920002
JFCBDSNM DS    CL44 -    DATA SET NAME                                  01000000
JFCIPLTX DS    0CL7 -    MODULE NAME OF NETWORK CONTROL PROGRAM (TCAM)  01050002
*                                                                ICB391 01060002
JFCBELNM DS    CL8 -     ELEMENT NAME OR RELATIVE GENERATION NUMBER.    01100002
*                        TYPE OF AREA (INDEX, PRIME OR OVERFLOW) FOR    01200002
*                        AN INDEXED SEQUENTIAL DATA SET ONLY.           01300002
JFCBTSDM DS    B -       JOB MANAGEMENT/DATA MANAGEMENT INTERFACE       01400000
JFCCAT   EQU   X'80' -   DATA SET IS CATALOGED                          01500002
JFCVSL   EQU   X'40' -   VOLUME SERIAL LIST HAS BEEN CHANGED            01600002
JFCSDS   EQU   X'20' -   DATA SET IS A SYSIN OR SYSOUT DATA SET         01700002
JFCTTR   EQU   X'10' -   A JOB STEP IS TO BE RESTARTED.  USE JFCBOTTR   01800002
*                        INSTEAD OF DS1LSTAR FIELD TO REPOSITION DATA   01850002
*                        SET IF AUTOMATIC STEP RESTART OCCURS.  (THIS   01900002
*                        JOB HAD ABEND PROCESSING FOR A DATA SET OPENED 01950002
*                        FOR MOD.)                                      02000002
JFCNWRIT EQU   X'08' -   DO NOT WRITE BACK THE JFCB DURING OPEN         02100000
*                        PROCESSING                                     02200000
JFCNDSCB EQU   X'04' -   DO NOT MERGE DSCB OR LABEL FIELDS INTO THIS    02300002
*                        JFCB                                           02400002
JFCNDCB  EQU   X'02' -   DO NOT MERGE DCB FIELDS INTO THIS JFCB         02500000
JFCPAT   EQU   X'01' -   THE PATTERNING DSCB IS COMPLETE                02600000
JFCBDSCB DS    CL3 -     TTR ADDRESS OF THE FORMAT 1 DSCB FOR DATA SET  02700002
*                        PART ON THE FIRST VOLUME OF THE DATA SET       02750002
*                                                                ICB398 02752002
JFCFCBID DS    0CL4 -    FORMS CONTROL BUFFER IMAGE IDENTIFICATION FOR  02760001
*                        THE 3211 PRINTER OR DATA PROTECTION IMAGE      02760402
*                        IDENTIFICATION FOR THE 3525 CARD PUNCH WITH    02760802
*                        THE READ AND PRINT FEATURES OR FORMAT RECORD   02763002
*                        ID                                      MDC007 02765302
JFCBFRID DS    0CL4 -    LAST 4 CHARACTERS OF A PDS MEMBER TO BE USED   02767502
*                        IN THE INTERPRETATION OF DOCUMENTS READ BY     02769702
*                        3886 DEVICE FOR THIS STEP               MDC024 02771902
JFCAMCRO DS    BL2 -     VSAM CHECKPOINT/RESTART OPTION INDICATORS      02774102
*                                                                ICB438 02776302
JFCAMSTR DS    H -       NUMBER OF STRINGS                       ICB438 02778502
JFCBADBF DS    H -       NUMBER OF DATA BUFFERS                  ICB438 02780702
JFCNLREC DS    H -       LOGICAL RECORD LENGTH FOR VSAM          ICB438 02782902
JFCVINDX DS    H -       MASS STORAGE SYSTEM COMMUNICATOR (MSSC) VOLUME 02787303
*                        SELECTION INDEX  (MDC308)             @Z30LP9A 02793304
JFCBLTYP DS    B -       LABEL TYPE                                     02800000
JFCRSV38 EQU   X'80',,C'X' RESERVED                                     02810001
JFCBAL   EQU   X'40' -   AMERICAN NATIONAL STANDARD TAPE LABELS (AL OR  02850002
*                        IF BIT 4 IS ALSO ON, AUL)                      02852002
JFCBLTM  EQU   X'20' -   UNLABELLED TAPE CREATED BY DOS MAY HAVE        02860002
*                        LEADING TAPE MARK.  OPEN/CLOSE/EOV AND RESTART 02870002
*                        MUST SPACE OVER A TAPE MARK IF ONE EXISTS.     02880002
*                                                                ICB398 02890002
JFCBLP   EQU   X'10' -   BYPASS LABEL PROCESSING                        02900000
JFCSUL   EQU   X'0A' -   USER LABEL                                     03000000
JFCNSL   EQU   X'04' -   NONSTANDARD LABEL                              03100000
JFCSL    EQU   X'02' -   STANDARD LABEL                                 03200000
JFCNL    EQU   X'01' -   NO LABEL                                       03300000
JFCBOTTR DS    0CL3 -    DASD MOD DATA SET - IF AUTOMATIC STEP RESTART  03400002
*                        WAS REQUESTED, TTR OF THE END-OF-DATA          03500002
*                        INDICATOR EXISTING WHEN THE DATA SET WAS FIRST 03600002
*                        OPENED DURING THE ORIGINAL EXECUTION OF THE    03700002
*                        CURRENT STEP                                   03750002
JFCBUFOF DS    FL1 -     TAPE DATA SET - THIS FIELD CONTAINS THE BUFFER 03800002
*                        OFFSET (DCB SUBPARAMETER VALUE)                03810002
JFCBFOFL EQU   X'80' -   IF 1, THE OFFSET EQUALS FOUR AND THE BUFFER    03850002
*                        OFFSET FIELD OF EACH BLOCK (D-FORMAT RECORDS)  03860002
*                        CONTAINS THE BLOCK LENGTH (SPECIFIED BY        03870002
*                        BUFOFF=L).                                     03872002
*                        IF 0, THE OFFSET IS AS SPECIFIED IN THE        03874002
*                        REMAINING SEVEN BITS AND THE BUFFER OFFSET     03876002
*                        FIELD OF EACH BLOCK DOES NOT CONTAIN THE       03878002
*                        BLOCK LENGTH.                                  03878402
JFCFUNC  DS    0B -      FUNCTION INDICATORS FOR THE 3525 CARD PUNCH    03880002
*                        (SPECIFIED BY THE FUNC PARAMETER)       ICB392 03882002
JFCFNCBI EQU   X'80' -   I - INTERPRET (PUNCH AND PRINT TWO LINES)      03890002
*                                                                ICB392 03890402
JFCFNCBR EQU   X'40' -   R - READ                                ICB392 03892002
JFCFNCBP EQU   X'20' -   P - PUNCH                               ICB392 03894002
JFCFNCBW EQU   X'10' -   W - PRINT                               ICB392 03896002
JFCFNCBD EQU   X'08' -   D - DATA PROTECTION                     ICB392 03898002
JFCFNCBX EQU   X'04' -   X - THIS DATA SET IS TO BE PRINTED.  THIS MAY  03898402
*                        BE CODED WITH PW OR RPW TO DISTINGUISH THE     03898502
*                        DATA SET TO BE PRINTED FROM THE DATA SET TO    03898602
*                        BE PUNCHED.                             ICB392 03898702
JFCFNCBT EQU   X'02' -   T - TWO-LINE PRINT SUPPORT REQUEST.  THE       03898802
*                        SECOND PRINT LINE IS LOCATED ON CARD LINE      03898902
*                        THREE.                                  ICB392 03899002
JFCRSV31 EQU   X'01',,C'X' RESERVED                                     03899201
JFCBFLSQ DS    H -       FOR MAGNETIC TAPE DEVICES, FILE SEQUENCE       03900002
*                        NUMBER                                         04000002
JFCBVLSQ DS    H -       VOLUME SEQUENCE NUMBER                         04100000
JFCBMASK DS    0CL8 -    DATA MANAGEMENT MASK                           04200000
JFCBOPS1 DS    BL5 -     OPEN ROUTINE INTERNAL SWITCHES                 04300000
JFCBFLG1 DS    B -       FLAG BYTE                                      04400000
JFCSTAND EQU   X'80' -   VOLUME LABEL PROCESSING STANDARD               04500000
JFCSLCRE EQU   X'40' -   CREATION OF A STANDARD LABEL IS NECESSARY      04600002
JFCSLDES EQU   X'20' -   DESTRUCTION OF A STANDARD LABEL IS NECESSARY   04800002
JFCDUAL  EQU   X'10' -   DUAL-DENSITY CHECK DETECTED                    05000002
JFCOPEN  EQU   X'0F' -   OPEN ROUTINE INTERNAL SWITCHES                 05100000
JFCBPWBP EQU   X'01' -   PASSWORD BYPASS INDICATOR               MDC010 05150002
JFCBFLG2 DS    B -       FLAG BYTE OF OPEN SWITCHES                     05200000
JFCINOP  EQU   X'80' -   TREAT THE INOUT OPTION OF OPEN AS INPUT        05300000
JFCOUTOP EQU   X'40' -   TREAT THE OUTIN OPTION OF OPEN AS OUTPUT       05400000
JFCDEFER EQU   X'20' -   SET ONLY IN A JFCB RECORDED IN A DATA SET      05500002
*                        DESCRIPTOR RECORD (DSDR) BY THE CHECKPOINT     05510002
*                        ROUTINE.  INDICATES THAT THE DATA SET RELATED  05520002
*                        TO THE JFCB IS BEING PROCESSED SEQUENTIALLY,   05550002
*                        AT THE CHECKPOINT, ON A VOLUME OTHER THAN THE  05600002
*                        VOLUME ON WHICH PROCESSING BEGAN IN THE        05700002
*                        CURRENT STEP.  WHEN RESTART OCCURS, THIS BIT   05800002
*                        CAUSES DEFERRED VOLUME MOUNTING.               05900002
JFCNRPS  EQU   X'20' -   USE BY OPEN ROUTINES - SET TO INDICATE THAT    05950002
*                        THIS DATA SET RESIDES ON A NON-RPS DEVICE.     05960002
*                        RESET TO ZERO WHEN OPEN PROCESSING IS          05970002
*                        COMPLETED.                              ICB495 05980002
JFCMODNW EQU   X'10' -   DISPOSITION OF THIS DATA SET HAS BEEN CHANGED  06000002
*                        FROM MOD TO NEW.  DISPOSITION (IN JFCBIND2)    06100002
*                        WILL BE RESTORED TO MOD AFTER OPEN.            06200002
JFCSDRPS EQU   X'08' -   USE SEARCH DIRECT FOR ROTATIONAL POSITION      06202002
*                        SENSING (RPS) DEVICES                   ICB398 06204002
JFCTRACE EQU   X'04' -   GTF TRACE IS TO OCCUR DURING OPEN/CLOSE/EOV    06210001
*                        AND DYNAMIC ALLOCATION PROCESSING OF DCB       06220001
*                                                                ICB392 06230001
JFCBBUFF EQU   X'02' -   INDICATOR TO OPEN THAT A NON-ZERO VALUE IN     06250001
*                        JFCBOTTR IS NOT TO PREVENT THE NORMAL STORING  06260001
*                        BY OPEN OF A TTR IN JFCBOTTR.  BEFORE OPEN -   06270002
*                        JFCBUFOF (OFFSET 67) CONTAINS A BUFFER OFFSET  06272002
*                        OR INVALID INFORMATION RESULTING FROM A        06274002
*                        JFCB-TO-JFCB MERGE.  AFTER OPEN - OPEN MAY     06276002
*                        HAVE STORED A TTR IN JFCBOTTR (OFFSET 67), IN  06278002
*                        WHICH CASE OPEN WILL HAVE SET THIS BIT TO      06278402
*                        ZERO.                                          06278802
JFCRCTLG EQU   X'01' -   OPEN HAS UPDATED THE TTR.  SCHEDULER STEP      06280002
*                        TERMINATION ROUTINE IS TO RECATALOG THIS DATA  06282002
*                        SET AND PLACE IN THE CATALOG ENTRY THE DSCB    06290002
*                        TTR CONTAINED IN JFCBDSCB IF THIS DATA SET IS  06292002
*                        CATALOGED.                              ICB398 06294002
JFCBOPS2 DS    B -       OPEN ROUTINE INTERNAL SWITCHES                 06300000
JFCBCRDT DS    CL3 -     DATA SET CREATION DATE (YDD, Y=YEAR AND        06400002
*                        DD=DAY)                                        06450002
JFCBXPDT DS    CL3 -     DATA SET EXPIRATION DATE (YDD)                 06500000
JFCBIND1 DS    B -       INDICATOR BYTE 1                               06700000
JFCRLSE  EQU   X'C0' -   RELEASE EXTERNAL STORAGE                       07000000
JFCLOC   EQU   X'30' -   DATA SET HAS BEEN LOCATED                      07100000
JFCADDED EQU   X'0C' -   NEW VOLUME HAS BEEN ADDED TO THE DATA SET      07200002
JFCGDG   EQU   X'02' -   DATA SET IS A MEMBER OF A GENERATION DATA      07300002
*                        GROUP                                          07400000
JFCPDS   EQU   X'01' -   DATA SET IS A MEMBER OF A PARTITIONED DATA SET 07500002
         SPACE 1                                                        07600002
********************************************************************    07700000
*                                                                       07800000
*    THE FOLLOWING FOUR BIT SETTINGS ARE FROM AN OLD MAPPING MACRO      07900000
*      THESE  FOUR WILL BE REMOVED IN A FUTURE RELEASE. USE THE         08100000
*      FOREGOING SYMBOLS FOR JFCBIND1                                   08300000
*                                                                       08400000
********************************************************************    08500000
JFCBRLSE EQU   X'40' -   BITS 0 & 1 - EXTERNAL STORAGE RELEASE          08600000
*                        INDICATOR                                      08700000
JFCBLOCT EQU   X'10' -   BITS 2 & 3 - DATA SET HAS BEEN LOCATED         08800000
JFCBNEWV EQU   X'04' -   BITS 4 & 5 - NEW VOLUME ADDED TO DATA SET      08900000
JFCBPMEM EQU   X'01' -   BITS 6 & 7 - DATA SET IS A MEMBER OF A         09000000
*                        PDS OR GDG                                     09100000
********************************************************************    09150000
         SPACE 1                                                        09200002
JFCBIND2 DS    B -       INDICATOR BYTE 2                               09300000
JFCDISP  EQU   X'C0' -   BIT PATTERN FOR NEW, MOD, OLD                  09600000
JFCNEW   EQU   X'C0' -   NEW DATA SET                                   09700000
JFCMOD   EQU   X'80' -   MOD DATA SET                                   09800000
JFCOLD   EQU   X'40' -   OLD DATA SET                                   09900000
JFCBRWPW EQU   X'30' -   PASSWORD IS REQUIRED TO WRITE BUT NOT TO READ  10000002
*                        (DATA SET SECURITY)                            10100002
JFCSECUR EQU   X'10' -   PASSWORD IS REQUIRED TO READ OR TO WRITE       10200002
*                        (DATA SET SECURITY)                            10250002
JFCSHARE EQU   X'08' -   SHARED DATA SET                                10300000
JFCENT   EQU   X'04' -   DELETE THIS JFCB BEFORE ALLOCATION FOR A       10400002
*                        RESTARTED GENERATION DATA GROUP                10450002
JFCREQ   EQU   X'02' -   STORAGE VOLUME REQUESTED                       10800000
JFCTEMP  EQU   X'01' -   TEMPORARY DATA SET                             10900000
         SPACE 1                                                        10950002
********************************************************************    11000000
*                                                                       11100000
*   THE FOLLOWING THREE BIT SETTINGS ARE FROM AN OLD MAPPING MACRO      11200000
*      THESE THREE WILL BE REMOVED IN A FUTURE RELEASE. USE THE         11400000
*      FOREGOING SYMBOLS FOR JFCBIND2                                   11600000
*                                                                       11700000
********************************************************************    11800000
JFCBSTAT EQU   X'40' -   BITS 0 & 1 - DATA SET STATUS (NEW,             11900000
*                        OLD OR MOD)                                    12000000
JFCBSCTY EQU   X'10' -   BIT 3 DATA SET SECURITY INDICATOR              12100001
JFCBGDGA EQU   X'04' -   BITS 4 & 5 - THIS JFCB IS A MEMBER OF A        12200000
*                        GDG-ALL REQUEST                                12300000
********************************************************************    12350000
         SPACE 1                                                        12352002
JFCAMPTR DS    0A -      POINTER TO AMPBLK FOR ADDITIONAL VSAM          12360002
*                        PARAMETERS                              ICB438 12370002
JFCBUFNO DS    0XL1 -    NUMBER OF BUFFERS REQUIRED FOR THIS DATA SET   12400002
*                        (ACCESS METHODS OTHER THAN TCAM AND QTAM)      12500002
JFCBUFIN DS    0XL1 -    BITS 0-3 CONTAIN THE NUMBER OF BUFFERS         12700002
*                        ASSIGNED INITIALLY FOR RECEIVING OPERATIONS    12702002
*                        FOR EACH LINE IN A LINE GROUP  (TCAM)          12704002
JFCBFOUT DS    0XL1 -    BITS 4-7 CONTAIN THE NUMBER OF BUFFERS         12710002
*                        ASSIGNED INITIALLY FOR SENDING OPERATIONS FOR  12760002
*                        EACH LINE IN A LINE GROUP  (TCAM)              12770002
JFCBUFRQ DS    XL1 -     NUMBER OF BUFFERS REQUIRED FOR EACH LINE       12800002
*                        (QTAM)                                         12900002
JFCBGNCP DS    0FL1 -    FOR GAM, THIS FIELD IS USED FOR THE NUMBER OF  12950002
*                        IOB'S CONSTRUCTED BY THE OPEN ROUTINE.         12960002
*                        MAXIMUM NUMBER IS 99.                   MDC025 12970002
JFCBHIAR DS    0BL1 -    BUFFER POOL LOCATION IN MAIN STORAGE           13000000
*                        (HIERARCHY)                                    13100000
JFCBFALN DS    0BL1 -    BUFFER ALIGNMENT                               13200000
JFCBFTEK DS    B -       BUFFERING TECHNIQUE                            13300002
JFCHIER  EQU   X'84' -   BITS 0 AND 5 DESCRIBE MAIN STORAGE HIERARCHY.  13600002
*                        BOTH BITS OFF, HIERARCHY 0.                    13700002
*                        BIT 0 OFF AND BIT 5 ON, HIERARCHY 1.           13800002
JFCSIM   EQU   X'40' -   S - SIMPLE BUFFERING                           13900002
JFCBBFTA EQU   X'60' -   A - FOR QSAM LOCATE MODE PROCESSING OF SPANNED 13950002
*                        RECORDS, AUTOMATIC RECORD AREA CONSTRUCTION    13960002
*                        DURING LOGICAL RECORD INTERFACE PROCESSING.    13970002
*                        OPEN IS TO CONSTRUCT A RECORD AREA IF IT       13980002
*                        AUTOMATICALLY CONSTRUCTS BUFFERS.              13990002
JFCBBFTR EQU   X'20' -   R - FOR BSAM CREATE BDAM PROCESSING OR BDAM    13992002
*                        PROCESSING OF UNBLOCKED SPANNED RECORDS,       13994002
*                        SOFTWARE TRACK OVERFLOW.  OPEN FORMS A SEGMENT 13996002
*                        WORK AREA POOL AND STORES THE ADDRESS OF THE   13998002
*                        SEGMENT WORK AREA CONTROL BLOCK IN THE DCBEOBW 13998402
*                        FIELD OF THE DATA CONTROL BLOCK.  WRITE USES   13998802
*                        A SEGMENT WORK AREA TO WRITE A RECORD AS ONE   13999202
*                        OR MORE SEGMENTS.                              13999602
*                        FOR BSAM INPUT PROCESSING OF UNBLOCKED SPANNED 13999702
*                        RECORDS WITH KEYS, RECORD OFFSET PROCESSING.   13999802
*                        READ READS ONE RECORD SEGMENT INTO THE RECORD  13999902
*                        AREA.  THE FIRST SEGMENT OF A RECORD IS        14033202
*                        PRECEDED IN THE RECORD AREA BY THE KEY.        14043202
*                        SUBSEQUENT SEGMENTS ARE AT AN OFFSET EQUAL TO  14053202
*                        THE KEY LENGTH.                                14063202
JFCEXC   EQU   X'10' -   E - EXCHANGE BUFFERING                         14066702
JFCDYN   EQU   X'08' -   DYNAMIC BUFFERING                              14100000
JFCHIER1 EQU   X'04' -   HIERARCHY 1 MAIN STORAGE                       14200000
JFCDWORD EQU   X'02' -   D - DOUBLE WORD BOUNDARY                       14300002
JFCFWORD EQU   X'01' -   F - FULL WORD NOT A DOUBLE WORD BOUNDARY       14400002
JFCBUFL  DS    H -       BUFFER LENGTH                                  14500000
JFCEROPT DS    B -       ERROR OPTION.  DISPOSITION OF PERMANENT ERRORS 14600002
*                        IF USER RETURNS FROM A SYNCHRONOUS ERROR       14650002
*                        EXIT.  (QSAM)                                  14660002
JFCACC   EQU   X'80' -   ACCEPT                                         14700000
JFCSKP   EQU   X'40' -   SKIP                                           14800000
JFCABN   EQU   X'20' -   ABNORMAL END OF TASK                           14900000
JFCTOPT  EQU   X'10' -   ON-LINE TERMINAL TEST (BTAM)            ICB349 14950001
JFCRSV02 EQU   X'08',,C'X' RESERVED                                     14960001
JFCRSV03 EQU   X'04',,C'X' RESERVED                                     14970001
JFCRSV04 EQU   X'02',,C'X' RESERVED                                     14980001
JFCRSV05 EQU   X'01',,C'X' RESERVED                                     14990001
JFCTRTCH DS    0CL1 -    TAPE RECORDING TECHNIQUE FOR 7-TRACK TAPE      15000002
JFCEVEN  EQU   X'23' -   E - EVEN PARITY                                15200002
JFCTRAN  EQU   X'3B' -   T - EOD/EBCDIC TRANSLATION                     15300002
JFCCONV  EQU   X'13' -   C - DATA CONVERSION                            15400002
JFCTREV  EQU   X'2B' -   ET - EVEN PARITY AND TRANSLATION               15500002
JFCKEYLE DS    0XL1 -    DIRECT ACCESS KEY LENGTH                       15600000
JFCCODE  DS    0BL1 -    CONVERSION CODE (PAPER TAPE)                   15800002
JFCNOCON EQU   X'80' -   N - NO CONVERSION                              15900002
JFCBCD   EQU   X'40' -   I - IBM BCD                                    16000002
JFCFRI   EQU   X'20' -   F - FRIDEN                                     16100002
JFCBUR   EQU   X'10' -   B - BURROUGHS                                  16200002
JFCNCR   EQU   X'08' -   C - NATIONAL CASH REGISTER                     16300002
JFCASCII EQU   X'04' -   A - ASCII (8-TRACK)                            16400002
JFCTTY   EQU   X'02' -   T - TELETYPE                                   16500002
JFCRSV32 EQU   X'01',,C'X' RESERVED                                     16510001
JFCMODE  DS    0BL1 -    MODE OF OPERATION (CARD READER, CARD PUNCH)    16550002
*                                                                ICB394 16560002
JFCSTACK DS    0BL1 -    STACKER SELECTION (CARD READER, CARD PUNCH)    16600002
JFCBIN   EQU   X'80' -   C - COLUMN BINARY MODE                         16700002
JFCEBCD  EQU   X'40' -   E - EBCDIC MODE                                16800002
JFCMODEO EQU   X'20' -   0 - OPTICAL MARK READ MODE (3505 ONLY)  ICB394 16850002
JFCMODER EQU   X'10' -   R - READ COLUMN ELIMINATE MODE (3505 AND 3525  16860002
*                        WITH READ FEATURE)                      ICB394 16862002
JFCRSV06 EQU   X'08',,C'X' RESERVED                                     16870001
JFCRSV07 EQU   X'04',,C'X' RESERVED                                     16880001
JFCTWO   EQU   X'02' -   2 - STACKER TWO                                16900002
JFCONE   EQU   X'01' -   1 - STACKER ONE                                17000002
JFCPRTSP DS    B -       NORMAL PRINTER SPACING                         17100000
JFCSPTHR EQU   X'19' -   3 - SPACE THREE LINES                          17200002
JFCSPTWO EQU   X'11' -   2 - SPACE TWO LINES                            17300002
JFCSPONE EQU   X'09' -   1 - SPACE ONE LINE                             17400002
JFCSPNO  EQU   X'01' -   0 - NO SPACING                                 17500002
JFCDEN   DS    B -       TAPE DENSITY - 2400/3400 SERIES MAGNETIC TAPE  17600002
*                        UNITS                                          17650002
JFC200   EQU   X'03' -   7-TRACK 200 BPI                                17700000
JFC556   EQU   X'43' -   7-TRACK 556 BPI                                17800000
JFC800   EQU   X'83' -   7-TRACK AND 9-TRACK 800 BPI                    17900002
JFC1600  EQU   X'C3' -   9-TRACK 1600 BPI                               18000000
JFC6250  EQU   X'D3' -   9-TRACK 6250 BPI                        ICB474 18010002
JFCBABFS DS    0FL3 -    TOTAL BUFFER SIZE FOR ALL VSAM BUFFERS  ICB438 18050002
JFCLIMCT DS    0CL3 -    SEARCH LIMIT (BDAM)                            18100000
         DS    CL1 -     RESERVED                                       18200002
JFCTRKBL DS    CL2 -     DATA SET OPENED FOR MOD - IF AUTOMATIC STEP    18300002
*                        RESTART WAS REQUESTED, TRACK BALANCE EXISTING  18500002
*                        WHEN THE DATA SET WAS FIRST OPENED DURING THE  18600002
*                        ORIGINAL EXECUTION OF THE CURRENT STEP         18700002
JFCDSORG DS    0BL2 -    DATA SET ORGANIZATION BEING USED               18900000
JFCDSRG1 DS    B -       BYTE 1 OF JFCDSORG                             19000000
JFCORGIS EQU   X'80' -   INDEXED SEQUENTIAL                             19100000
JFCORGPS EQU   X'40' -   PHYSICAL SEQUENTIAL                            19200000
JFCORGDA EQU   X'20' -   DIRECT                                         19300000
JFCORGCX EQU   X'10' -   BTAM OR QTAM LINE GROUP                 MDC011 19310002
JFCORGCQ EQU   X'08' -   QTAM DIRECT ACCESS MESSAGE QUEUE        MDC012 19320002
JFCORGMQ EQU   X'04' -   QTAM PROBLEM PROGRAM MESSAGE QUEUE      MDC013 19330002
JFCORGPO EQU   X'02' -   PARTITIONED                                    19400000
JFCORGU  EQU   X'01' -   UNMOVABLE - THE DATA CONTAINS LOCATION         19500000
*                        DEPENDENT INFORMATION                          19600000
JFCDSRG2 DS    B -       BYTE 2 OF JFCDSORG                             19700000
JFCORGGS EQU   X'80' -   GRAPHICS                                       19800000
JFCORGTX EQU   X'40' -   TCAM LINE GROUP                         MDC014 19810002
JFCORGTQ EQU   X'20' -   TCAM MESSAGE QUEUE                      MDC015 19820002
JFCRSV13 EQU   X'10',,C'X' RESERVED, BINARY ZERO                        19830002
JFCORGAM EQU   X'08' -   VSAM                                    ICB438 19850002
JFCORGTR EQU   X'04' -   TCAM 3705                               MDC016 19860002
JFCRSV15 EQU   X'02',,C'X' RESERVED, BINARY ZERO                        19870002
JFCRSV16 EQU   X'01',,C'X' RESERVED, BINARY ZERO                        19880002
JFCRECFM DS    B -       RECORD FORMAT                                  19900000
JFCFMREC EQU   X'C0' -   HIGH-ORDER TWO BITS OF JFCRECFM TO BE TESTED   20000002
*                        FOR RECORD FORMAT                              20100002
JFCUND   EQU   X'C0' -   U - UNDEFINED                                  20900002
JFCFIX   EQU   X'80' -   F - FIXED                                      21000002
JFCVAR   EQU   X'40' -   V - VARIABLE                                   21100002
JFCRCFM  EQU   X'E0' -   RECORD FORMAT (USASI/USASCII)                  21250001
JFCVARD  EQU   X'20' -   D - VARIABLE (FORMAT D FOR USASI/USASCII)      21260002
JFCRFO   EQU   X'20' -   T - TRACK OVERFLOW                             21300002
JFCRFB   EQU   X'10' -   B - BLOCKED - MAY NOT OCCUR WITH UNDEFINED     21400002
JFCRFS   EQU   X'08' -   S - FOR FIXED LENGTH RECORD FORMAT, STANDARD   21500002
*                        BLOCKS.  NO TRUNCATED BLOCKS OR UNFILLED       21550002
*                        TRACKS ARE EMBEDDED IN THE DATA SET.           21600002
*                        FOR VARIABLE LENGTH RECORD FORMAT, SPANNED     21650002
*                        RECORDS.                                       21700002
JFCCHAR  EQU   X'06' -   CONTROL CHARACTER                              21800002
JFCASA   EQU   X'04' -   A - AMERICAN NATIONAL STANDARD (ASA) CONTROL   22600002
*                        CHARACTER                                      22650002
JFCMAC   EQU   X'02' -   M - MACHINE CODE CONTROL CHARACTER             22700002
JFCNOCC  EQU   X'00' -   NO CONTROL CHARACTER                           22800000
JFCOPTCD DS    B -       OPTION CODES                                   22900000
         SPACE 1                                                        22950002
*              QSAM - BSAM - BPAM                                       23000000
JFCWVCSP EQU   X'80' -   W - WRITE VALIDITY CHECK                       23100002
JFCALLOW EQU   X'40' -   U - ALLOW A DATA CHECK CAUSED BY AN INVALID    23200002
*                        CHARACTER (1403 PRINTER WITH UCS FEATURE)      23300002
JFCPCIBT EQU   X'20' -   C - CHAINED SCHEDULING USING THE PROGRAM       23400002
*                        CONTROLLED INTERRUPTION                        23500000
JFCBCKPT EQU   X'10' -   BYPASS EMBEDDED DOS CHECKPOINT RECORDS ON TAPE 23550001
*                                                                ICB398 23560001
JFCRSV18 EQU   X'08',,C'X' RESERVED                                     23570001
JFCREDUC EQU   X'04' -   Z - USE REDUCED ERROR RECOVERY PROCEDURE       23600002
*                        (MAGNETIC TAPE)   (EXCP ALSO)                  23700002
JFCSRCHD EQU   X'04' -   USE SEARCH DIRECT (SD), INSTEAD OF SEARCH      23750002
*                        PREVIOUS, ON ROTATIONAL POSITION SENSING (RPS) 23760002
*                        DEVICE.  (DIRECT ACCESS)                       23770002
JFCRSV21 EQU   X'02',,C'X' RESERVED                                     23780001
JFCOPTJ  EQU   X'01' -   J - 3800 CONTROL CHARACTER  (MDC301)  @Z40MP9A 23790004
         SPACE 1                                                        23792002
*              BISAM - QISAM                                            23800000
JFCWVCIS EQU   X'80' -   W - WRITE VALIDITY CHECK                       23900002
JFCRSV17 EQU   X'40',,C'X' RESERVED                                     23950001
JFCMAST  EQU   X'20' -   M - MASTER INDEXES                             24000002
JFCIND   EQU   X'10' -   I - INDEPENDENT OVERFLOW AREA                  24100002
JFCCYL   EQU   X'08' -   Y - CYLINDER OVERFLOW AREA                     24200002
JFCRSV19 EQU   X'04',,C'X' RESERVED                                     24250001
JFCDEL   EQU   X'02' -   L - DELETE OPTION                              24300002
JFCREORG EQU   X'01' -   R - REORGANIZATION CRITERIA                    24400002
         SPACE 1                                                        24450002
*              BDAM                                                     24500000
JFCWVCBD EQU   X'80' -   W - WRITE VALIDITY CHECK                       24600002
JFCOVER  EQU   X'40' -   TRACK OVERFLOW                                 24700000
JFCEXT   EQU   X'20' -   E - EXTENDED SEARCH                            24800002
JFCFEED  EQU   X'10' -   F - FEEDBACK                                   24900002
JFCACT   EQU   X'08' -   A - ACTUAL ADDRESSING                          25000002
JFCRSV20 EQU   X'04',,C'X' RESERVED                                     25050001
JFCRSV22 EQU   X'02',,C'X' RESERVED                                     25060001
JFCREL   EQU   X'01' -   R - RELATIVE BLOCK ADDRESSING                  25100002
         SPACE 1                                                        25110002
*              USASI/USASCII                                            25150001
JFCOPTQ  EQU   X'08' -   EBCDIC TO ASCII OR ASCII TO EBCDIC             25160002
*                        TRANSLATION REQUIRED                           25170002
         SPACE 1                                                        25172002
*              TCAM                                                     25180001
JFCSDNAM EQU   X'80' -   SOURCE OR DESTINATION NAME PRECEDES MESSAGE    25190001
*                        (AFTER CONTROL BYTE)                           25192001
JFCWUMSG EQU   X'40' -   WORK UNIT IS A MESSAGE (DEFAULT WORK UNIT IS   25194002
*                        A RECORD)                                      25196002
JFCCBWU  EQU   X'20' -   CONTROL BYTE PRECEDES WORK UNIT                25198001
JFCBLKSI DS    0H -      MAXIMUM BLOCK SIZE                             25200001
JFCBUFSI DS    0H -      MAXIMUM BUFFER SIZE                            25300002
JFCBAXBF DS    H -       NUMBER OF INDEX BUFFERS (VSAM)          ICB438 25350002
JFCAMSYN DS    0CL8 -    MODULE NAME FOR SYNAD ROUTINE FOR VSAM  ICB438 25360002
JFCLRECL DS    H -       LOGICAL RECORD LENGTH                          25400000
JFCNCP   DS    0FL1 -    NUMBER OF CHANNEL PROGRAMS.  NUMBER OF READ OR 25500002
*                        WRITE REQUESTS WHICH MAY BE ISSUED PRIOR TO A  25600002
*                        CHECK.  NUMBER OF IOB'S GENERATED.             25700002
*                        (MAXIMUM NUMBER IS 99.)                        25800002
*                        NOTE - GAM USES JFCBFTEK FOR THIS INFORMATION  25900002
*                        AND DOES NOT USE THIS FIELD AT ALL.            26000002
JFCBUFMX DS    FL1 -     THE MAXIMUM NUMBER OF BUFFERS TO BE USED FOR   26100002
*                        DATA TRANSFER FOR EACH LINE IN THIS LINE       26150002
*                        GROUP  (TCAM)                                  26160002
JFCBFSEQ DS    0FL1 -    TAPE POSITIONING INFORMATION FOR CHECKPOINT    26170002
*                        RESTART.  THIS FIELD IS USED TO PASS A         26180002
*                        PHYSICAL FILE SEQUENCE COUNT FROM CHECKPOINT   26190002
*                        TO RESTART.  THE COUNT TELLS THE PHYSICAL      26192002
*                        POSITION OF THE TAPE VOLUME THAT WAS BEING     26194002
*                        PROCESSED WHEN THE CHECKPOINT WAS TAKEN.       26196002
*                                                               SA60703 26198002
JFCNTM   DS    0FL1 -    THE NUMBER OF TRACKS THAT DETERMINE THE        26200002
*                        DEVELOPMENT OF A MASTER INDEX.  MAXIMUM        26300002
*                        NUMBER IS 99.  (ISAM)                          26400002
JFCPCI   DS    B -       PROGRAM-CONTROLLED INTERRUPTION (PCI) FLAG     26410002
*                        BYTE  (TCAM)                                   26412002
JFCPCIX1 EQU   X'80' -   PCI=(X,) RECEIVE OPERATIONS             ICB473 26420001
JFCPCIX2 EQU   X'40' -   PCI=(,X) SEND OPERATIONS                       26430001
*                        X INDICATES THAT AFTER THE FIRST BUFFER IS     26440001
*                        FILLED (ON RECEIVE OPERATIONS) OR EMPTIED (ON  26450001
*                        SEND OPERATIONS), A PCI OCCURS DURING THE      26460001
*                        FILLING OR EMPTYING OF THE NEXT BUFFER.  THE   26470001
*                        FIRST BUFFER REMAINS ALLOCATED AND ANOTHER     26480001
*                        IS ALLOCATED.                           ICB473 26490001
JFCPCIA1 EQU   X'20' -   PCI=(A,) RECEIVE OPERATIONS                    26500001
JFCPCIA2 EQU   X'10' -   PCI=(,A) SEND OPERATIONS                       26510001
*                        A INDICATES THAT AFTER THE FIRST BUFFER IS     26520001
*                        FILLED (ON RECEIVE OPERATIONS) OR EMPTIED (ON  26530001
*                        SEND OPERATIONS), A PCI OCCURS DURING THE      26540001
*                        FILLING OR EMPTYING OF THE NEXT BUFFER.  THE   26550001
*                        FIRST BUFFER IS DEALLOCATED.  A BUFFER IS      26560001
*                        ALLOCATED IN PLACE OF THE DEALLOCATED BUFFER.  26570001
JFCPCIN1 EQU   X'08' -   PCI=(N,) RECEIVE OPERATIONS                    26580001
JFCPCIN2 EQU   X'04' -   PCI=(,N) SEND OPERATIONS                       26590001
*                        N INDICATES THAT NO PCI'S ARE TAKEN DURING     26600001
*                        FILLING (ON RECEIVE OPERATIONS) OR EMPTYING    26610001
*                        (ON SEND OPERATIONS) OF BUFFERS.  BUFFERS      26620001
*                        ARE DEALLOCATED AT THE END OF TRANSMISSION.    26630001
JFCPCIR1 EQU   X'02' -   PCI=(R,) RECEIVE OPERATIONS                    26640001
JFCPCIR2 EQU   X'01' -   PCI=(,R) SEND OPERATIONS                       26650001
*                        R INDICATES THAT AFTER THE FIRST BUFFER IS     26660001
*                        FILLED (ON RECEIVE OPERATIONS) OR EMPTIED (ON  26670001
*                        SEND OPERATIONS), A PCI OCCURS DURING THE      26680001
*                        FILLING OR EMPTYING OF EACH SUCCEEDING BUFFER. 26690001
*                        THE COMPLETED BUFFER IS DEALLOCATED, BUT NO    26700001
*                        NEW BUFFER IS ALLOCATED TO TAKE ITS PLACE.     26710001
         SPACE 2                                                        26760002
*******************************************************************     26800000
*                                                                       26900003
*              NORMAL 108 SEGMENT                                       26980003
*                                                                       27060003
JFCRESRV DS    0BL4 -    FIRST BYTE CONTAINS NUMBER OF BYTES FOR TIME   27150002
*                        OF DAY.  SECOND BYTE CONTAINS NUMBER OF BYTES  27160002
*                        FOR DATE.  THIRD BYTE CONTAINS NUMBER OF       27170002
*                        BYTES FOR OUT SEQ.  FOURTH BYTE CONTAINS       27180002
*                        NUMBER OF BYTES IN.  (TCAM)                    27190002
JFCRKP   DS    H -       THE RELATIVE POSITION OF THE FIRST BYTE OF THE 27200002
*                        KEY WITHIN EACH LOGICAL RECORD.  MAXIMUM VALUE 27300002
*                        IS LOGICAL RECORD LENGTH MINUS KEY LENGTH.     27400002
JFCCYLOF DS    XL1 -     THE NUMBER OF TRACKS TO BE RESERVED ON EACH    28000002
*                        CYLINDER TO HOLD RECORDS THAT OVERFLOW FROM    28100002
*                        OTHER TRACKS ON THAT CYLINDER.  MAXIMUM VALUE  28200002
*                        IS 99.                                         28300002
JFCDBUFN DS    CL1 -     RESERVED                                       28400000
JFCINTVL DS    XL1 -     INTENTIONAL DELAY, IN SECONDS, BETWEEN         28500000
*                        PASSES THROUGH A POLLING LIST (QTAM)           28600000
*              END OF NORMAL 108 SEGMENT                                28700003
*******************************************************************     28800000
         SPACE 2                                                        28900002
*******************************************************************     29000000
*                                                                       29100003
*              108 PRINTER SEGMENT                                      29150003
*                                                                       29200003
*        NOTE  THIS SEGMENT REPLACES THE NORMAL 108 SEGMENT IF          29250003
*              THE DD STATEMENT USES THE UCS PARAMETER.                 29300003
*                                                                       29350003
         ORG   JFCRESRV                                                 29400002
JFCUCSID DS    CL4 -     NAME OF THE UCS IMAGE TO BE LOADED             29500000
JFCUCSOP DS    B -       OPERATION OF THE UCS IMAGE TO BE LOADED        29600000
JFCBEXTP EQU   X'80' -   JFCB EXTENSION PRESENT FOR 3800 DEVICE         29650004
*                        (MDC302)                              @Z40MP9A 29670004
JFCFOLD  EQU   X'40' -   UCS IMAGE IS TO BE LOADED IN THE FOLD MODE     29700002
JFCRSV25 EQU   X'20',,C'X' RESERVED                                     29750001
JFCVER   EQU   X'10' -   UCS IMAGE IS TO BE VERIFIED                    29800002
JFCFCBAL EQU   X'08' -   FORMS ARE TO BE ALIGNED                        29850002
JFCFCBVR EQU   X'04' -   FORMS CONTROL BUFFER (FCB) IMAGE IS TO BE      29860002
*                        VERIFIED                                       29862002
JFCRSV26 EQU   X'02',,C'X' RESERVED                                     29870001
JFCRSV27 EQU   X'01',,C'X' RESERVED                                     29880001
*              END OF 108 PRINTER SEGMENT                               29900003
*******************************************************************     30000000
         SPACE 2                                                        30010002
JFCOUTLI DS    0FL3 -    SMF - SYSOUT LIMIT.  BINARY REPRESENTATION OF  30050002
*                        THE OUTLIM= PARAMETER ON THE SYSOUT DD         30060002
*                        STATEMENT.  THE MAXIMUM NUMBER OF LOGICAL      30070002
*                        RECORDS SPECIFIED FOR THIS OUTPUT DATA SET.    30080002
*                                                                MDC017 30090002
JFCTHRSH DS    0FL1 -    RECORDS TO BE USED                             30092002
JFCCPRI  DS    B -       PRIORITY BETWEEN SEND AND RECEIVE OPERATIONS   30100002
*                        (TCAM)                                         30200002
JFCRSV53 EQU   X'80',,C'X' RESERVED                              MDC020 30450002
JFCRSV54 EQU   X'40',,C'X' RESERVED                              MDC019 30500002
JFCRSV55 EQU   X'20',,C'X' RESERVED                              MDC018 30550002
JFCRSV33 EQU   X'10',,C'X' RESERVED                                     30750001
JFCRSV34 EQU   X'08',,C'X' RESERVED                                     30760001
JFCRECV  EQU   X'04' -   RECEIVE PRIORITY                        MDC018 30770002
JFCEQUAL EQU   X'02' -   EQUAL PRIORITY                          MDC019 30780002
JFCSEND  EQU   X'01' -   SEND PRIORITY                           MDC020 30790002
JFCSOWA  DS    H -       LENGTH, IN BYTES, OF THE USER-PROVIDED WORK    30800002
*                        AREA (QTAM)                                    30900002
JFCBNTCS DS    XL1 -     NUMBER OF OVERFLOW TRACKS                      31000000
JFCBNVOL DS    XL1 -     NUMBER OF VOLUME SERIAL NUMBERS                31100000
JFCBVOLS DS    0CL30 -   THE FIRST FIVE VOLUME SERIAL NUMBERS  @Z30LP9A 31200004
         DS    CL22 -    FIRST 22 BYTES OF JFCBVOLS            @Z30LP9A 31220004
JFCMSVGP DS    CL8 -     MASS STORAGE VOLUME GROUP FROM WHICH TO        31240003
*                        SELECT A VOLUME  (MDC306)             @Z30LP9A 31270004
JFCBEXTL DS    XL1 -     LENGTH OF BLOCK OF EXTRA VOLUME SERIAL NUMBERS 31300002
*                        (BEYOND FIVE)                                  31400002
JFCBEXAD DS    CL3 -     RELATIVE TRACK ADDRESS (TTR) OF FIRST JFCB     31500000
*                        EXTENSION BLOCK FOR VOLUME SERIAL NUMBERS OR   31600004
*                        TTR OF JFCB EXTENSION BLOCK FOR 3800           31630004
*                        (MDC303)                              @Z40MP9A 31660004
JFCBPQTY DS    0CL3 -    PRIMARY QUANTITY OF DIRECT ACCESS STORAGE      31700002
*                        REQUIRED                                       31800002
JFCRUNIT DS    CL3 -     UNIT TYPE (EBCDIC) OF A DEVICE AT A REMOTE     31810002
*                        TERMINAL.  THE FIRST TWO CHARACTERS ARE RD     31820002
*                        (READER), PR (PRINTER) OR PU (PUNCH).  THE     31830002
*                        THIRD CHARACTER IS A NUMBER FROM 1 TO 9 ICB387 31840002
JFCBCTRI DS    B -       SPACE PARAMETERS                               31900000
JFCBSPAC EQU   X'C0' -   BIT PATTERN FOR SPACE REQUESTS                 32000000
JFCBABS  EQU   X'00' -   ABSTR REQUEST                                  32900002
JFCBAVR  EQU   X'40' -   AVERAGE BLOCK LENGTH REQUEST                   33000000
JFCBTRK  EQU   X'80' -   TRK REQUEST                                    33100002
JFCBCYL  EQU   X'C0' -   CYL REQUEST                                    33200002
JFCBMSGP EQU   X'20' -   REQUEST IS FOR A MASS STORAGE VOLUME GROUP     33250003
*                        (MSVGP) VOLUME  (MDC307)              @Z30LP9A 33300004
JFCRSV29 EQU   X'10',,C'X' RESERVED                                     33350001
JFCONTIG EQU   X'08' -   CONTIG REQUEST                                 33400002
JFCMIXG  EQU   X'04' -   MXIG REQUEST                                   33500002
JFCALX   EQU   X'02' -   ALX REQUEST                                    33600002
JFCROUND EQU   X'01' -   ROUND REQUEST                                  33700002
JFCBSQTY DS    0CL3 -    SECONDARY QUANTITY OF DIRECT ACCESS STORAGE    33800002
*                        REQUIRED                                       33900002
JFCRQID  DS    H -       QUEUE IDENTIFICATION (QID) USED BY ACCESS      33950002
*                        METHOD TO DETERMINE THE REMOTE TERMINAL        33952002
*                        LOCATION FOR THIS JOB.                  ICB387 33960002
         DS    X -       LAST BYTE OF JFCBSQTY  (MDC304)       @XM05457 33970003
JFCFLGS1 DS    B -       FLAG BYTE (ICB488)                     SA53458 34000001
JFCBDLET EQU   X'80' -   IF ONE, DELETE THE DATA SET USED WHEN          34001003
*                        EXTENDING THE JOB QUEUE OR SPOOL DATA SETS     34001603
*                        (OS/VS1)  (MDC305)                    @XM05457 34002203
JFCTOPEN EQU   X'40' -   TAPE DATA SET HAS BEEN OPENED           MDC026 34003002
JFCBADSP EQU   X'20' -   AUTOMATIC DATA SET PROTECTION INDICATOR        34005004
*                        (MDC310)                              @Z40RP9A 34005104
JFCRSV42 EQU   X'10',,C'X' - RESERVED  (MDC311)                         34005404
JFCBCEOV EQU   X'08' -   IF ONE, CHKPT=EOV SPECIFIED FOR THIS DATA SET  34005803
*                        (MDC312)                              @Z30JP9A 34006303
JFCVRDS  EQU   X'04' -   VIO DATA SET                            MDC006 34006802
JFCBSSDS EQU   X'02' -   (SUBSYSTEM DATA SET) JFCB EXTENSION FOR        34006960
*                        SUBSYSTEM DATA SET IS PRESENT (OS/VS1)         34007060
*                        (MDC313)                              @M06SP9A 34007160
JFCBUAFF EQU   X'01' -   UNIT AFFINITY SPECIFIED FOR THIS DATA SET      34008001
*                        (ICB488)                               SA53458 34058001
JFCBDQTY DS    CL3 -     QUANTITY OF DIRECT ACCESS STORAGE REQUIRED FOR 34500002
*                        A DIRECTORY OR AN EMBEDDED INDEX AREA          34600002
JFCBSPNM DS    AL3 -     MAIN STORAGE ADDRESS OF THE JFCB WITH WHICH    34700002
*                        CYLINDERS ARE SPLIT                            34800002
JFCBABST DS    H -       RELATIVE ADDRESS OF FIRST TRACK TO BE          34900000
*                        ALLOCATED                                      35000000
JFCBSBNM DS    AL3 -     MAIN STORAGE ADDRESS OF THE JFCB FROM WHICH    35100002
*                        SPACE IS TO BE SUBALLOCATED                    35200002
JFCBDRLH DS    CL3 -     AVERAGE DATA BLOCK LENGTH                      35300000
JFCBVLCT DS    XL1 -     VOLUME COUNT                                   35400000
JFCBSPTN DS    XL1 -     NUMBER OF TRACKS PER CYLINDER TO BE USED BY    35500002
*                        THIS DATA SET WHEN SPLIT CYLINDER IS INDICATED 35600002
JFCBLGTH EQU   176 -     LENGTH OF JFCB                                 35800000
JFCBEND  EQU   *                                                        35900000
         POP   PRINT                                                    35950002
         MEND  ,  */                                                    36000001
//
*% JFCBL2:;                                                             36100001
*%IF IKEPLS=''  %THEN                                                   36110002
*    %GOTO JFCBL3;                                                      36120002
*%IHALPUSH='@LISTPUSH';                                                 36130002
*%IHALPOP='@LISTPOP';                                                   36140002
*%IHALOFF='@LISTOFF';                                                   36142002
*IHALPUSH;                                                              36144002
*%IF IHALIST='YES'  %THEN                                               36146002
*    %GOTO JFCBL3;                                                      36148002
*IHALOFF;                                                               36148402
*%JFCBL3 : ;                                                            36148802
*                                                                       36150001
*DECLARE                                                                36200002
*  1 INFMJFCB BASED(JFCBPTR) BDY(WORD),                                 36300002
*   2 JFCBDSNM CHAR(44) BDY(WORD), /* DATA SET NAME                  */ 36400002
*    3 JFCBQNAM CHAR(8) BDY(WORD), /* PROCESS QUEUE NAME SPECIFIED BY   36410002
*                                     THE QNAME KEYWORD  (TCAM)      */ 36430002
*   2 JFCBELNM CHAR(8) BDY(WORD),  /* ELEMENT NAME OR RELATIVE          36500002
*                                     GENERATION NUMBER.  TYPE OF       36550002
*                                     AREA (INDEX, PRIME OR OVERFLOW)   36600002
*                                     FOR AN INDEXED SEQUENTIAL DATA    36700002
*                                     SET ONLY.                      */ 36800002
*    3 JFCIPLTX CHAR(7) BDY(WORD), /* MODULE NAME OF NETWORK CONTROL    36850002
*                                     PROGRAM  (TCAM)          ICB391*/ 36860002
*   2 JFCBTSDM BIT(8),             /* JOB MANAGEMENT/DATA MANAGEMENT    36900002
*                                     INTERFACE                      */ 37000002
*    3 JFCCAT   BIT(1),            /* DATA SET IS CATALOGED          */ 37100002
*    3 JFCVSL   BIT(1),            /* VOLUME SERIAL LIST HAS BEEN       37200002
*                                     CHANGED                        */ 37250002
*    3 JFCSDS   BIT(1),            /* DATA SET IS A SYSIN OR SYSOUT     37300002
*                                     DATA SET                       */ 37350002
*    3 JFCTTR   BIT(1),            /* A JOB STEP IS TO BE RESTARTED.    37400002
*                                     USE JFCBOTTR INSTEAD OF           37450002
*                                     DS1LSTAR FIELD TO REPOSITION      37500002
*                                     DATA SET IF AUTOMATIC STEP        37600002
*                                     RESTART OCCURS.  (THIS JOB HAD    37700002
*                                     ABEND PROCESSING FOR A DATA SET   37750002
*                                     OPENED FOR MOD.)               */ 37760002
*    3 JFCNWRIT BIT(1),            /* DO NOT WRITE BACK THE JFCB        37800002
*                                     DURING OPEN PROCESSING         */ 37900002
*    3 JFCNDSCB BIT(1),            /* DO NOT MERGE DSCB OR LABEL        38000002
*                                     FIELDS INTO THIS JFCB          */ 38100002
*    3 JFCNDCB  BIT(1),            /* DO NOT MERGE DCB FIELDS INTO      38200002
*                                     THIS JFCB                      */ 38300002
*    3 JFCPAT   BIT(1),            /* THE PATTERNING DSCB IS COMPLETE*/ 38400002
*   2 JFCBDSCB CHAR(3) BDY(WORD,2),/* TTR ADDRESS OF THE FORMAT 1       38550002
*                                     DSCB FOR DATA SET PART ON THE     38552102
*                                     FIRST VOLUME OF THE DATA SET      38554102
*                                                              ICB398*/ 38556102
*   2 JFCFCBID CHAR(4) BDY(WORD),  /* FORMS CONTROL BUFFER IMAGE        38560002
*                                     IDENTIFICATION FOR THE 3211       38560401
*                                     PRINTER OR DATA PROTECTION        38560802
*                                     IMAGE IDENTIFICATION FOR THE      38561202
*                                     3525 CARD PUNCH WITH THE READ     38561302
*                                     AND PRINT FEATURES OR FORMAT      38561402
*                                     RECORD ID                MDC007*/ 38561602
*    3 JFCBFRID CHAR(4) BDY(WORD), /* LAST 4 CHARACTERS OF A PDS        38564202
*                                     MEMBER TO BE USED IN THE          38566202
*                                     INTERPRETATION OF DOCUMENTS       38566602
*                                     READ BY 3886 DEVICE FOR THIS      38566702
*                                     STEP                     MDC024*/ 38570002
*     4 JFCAMCRO CHAR(2) BDY(WORD), /* VSAM CHECKPOINT/RESTART OPTION   38573402
*                                     INDICATORS               ICB438*/ 38576702
*     4 JFCAMSTR FIXED(15) BDY(WORD,3), /* NUMBER OF STRINGS   ICB438*/ 38583302
*   2 JFCBADBF FIXED(15) BDY(WORD), /* NUMBER OF DATA BUFFERS  ICB438*/ 38586602
*   2 JFCNLREC FIXED(15) BDY(WORD,3), /* LOGICAL RECORD LENGTH FOR      38587102
*                                     VSAM                     ICB438*/ 38587202
*   2 JFCVINDX FIXED(15) BDY(WORD), /* MASS STORAGE SYSTEM              38595803
*                                     COMMUNICATOR (MSSC) VOLUME        38596803
*                                     SELECTION INDEX                   38597803
*                                     (MDC308)               @Z30LP9A*/ 38598804
*   2 JFCBLTYP BIT(8) BDY(WORD,3), /* LABEL TYPE                     */ 38600004
*    3 JFCRSV38 BIT(1),            /* RESERVED                       */ 38650004
*    3 JFCBAL   BIT(1),            /* AMERICAN NATIONAL STANDARD TAPE   38700004
*                                     LABELS (AL OR IF BIT 4 IS ALSO    38752002
*                                     ON, AUL)                       */ 38754002
*    3 JFCBLTM  BIT(1),            /* UNLABELLED TAPE CREATED BY DOS    38760004
*                                     MAY HAVE LEADING TAPE MARK.       38770002
*                                     OPEN/CLOSE/EOV AND RESTART MUST   38780002
*                                     SPACE OVER A TAPE MARK IF ONE     38790002
*                                     EXISTS.                  ICB398*/ 38792001
*    3 JFCBLP   BIT(1),            /* BYPASS LABEL PROCESSING        */ 38800004
*    3 JFCSUL   BIT(1),            /* USER LABEL                     */ 38900004
*    3 JFCNSL   BIT(1),            /* NONSTANDARD LABEL              */ 39000004
*    3 JFCSL    BIT(1),            /* STANDARD LABEL                 */ 39100004
*    3 JFCNL    BIT(1),            /* NO LABEL                       */ 39200004
*   2 JFCBOTTR CHAR(3) BDY(WORD,4),/* DASD MOD DATA SET - IF AUTOMATIC  39300002
*                                     STEP RESTART WAS REQUESTED, TTR   39400002
*                                     OF THE END-OF-DATA INDICATOR      39450002
*                                     EXISTING WHEN THE DATA SET WAS    39500002
*                                     FIRST OPENED DURING THE           39600002
*                                     ORIGINAL EXECUTION OF THE         39700002
*                                     CURRENT STEP                   */ 39750002
*    3 JFCBUFOF PTR(8),            /* TAPE DATA SET - THIS FIELD        39800002
*                                     CONTAINS THE BUFFER OFFSET (DCB   39810002
*                                     SUBPARAMETER VALUE)            */ 39820002
*     4 JFCBFOFL BIT(1),           /* IF 1, THE OFFSET EQUALS FOUR      39850002
*                                     AND THE BUFFER OFFSET FIELD OF    39860002
*                                     EACH BLOCK (D-FORMAT RECORDS)     39870002
*                                     CONTAINS THE BLOCK LENGTH         39880002
*                                     (SPECIFIED BY BUFOFF=L).          39890002
*                                     IF 0, THE OFFSET IS AS            39892002
*                                     SPECIFIED IN THE REMAINING        39894002
*                                     SEVEN BITS AND THE BUFFER         39896002
*                                     OFFSET FIELD OF EACH BLOCK DOES   39898002
*                                     NOT CONTAIN THE BLOCK LENGTH.  */ 39898402
*    3 JFCBFLSQ FIXED(15),         /* FOR MAGNETIC TAPE DEVICES,        39900002
*                                     FILE SEQUENCE NUMBER           */ 40100002
*     4 JFCFUNC  BIT(8),           /* FUNCTION INDICATORS FOR THE       40150002
*                                     3525 CARD PUNCH (SPECIFIED BY     40150402
*                                     THE FUNC PARAMETER)      ICB392*/ 40150802
*      5 JFCFNCBI BIT(1),          /* I - INTERPRET (PUNCH AND PRINT    40160002
*                                     TWO LINES)               ICB392*/ 40170002
*      5 JFCFNCBR BIT(1),          /* R - READ                 ICB392*/ 40180002
*      5 JFCFNCBP BIT(1),          /* P - PUNCH                ICB392*/ 40190002
*      5 JFCFNCBW BIT(1),          /* W - PRINT                ICB392*/ 40192002
*      5 JFCFNCBD BIT(1),          /* D - DATA PROTECTION      ICB392*/ 40194002
*      5 JFCFNCBX BIT(1),          /* X - THIS DATA SET IS TO BE        40196002
*                                     PRINTED.  THIS MAY BE CODED       40196102
*                                     WITH PW OR RPW TO DISTINGUISH     40196202
*                                     THE DATA SET TO BE PRINTED FROM   40196302
*                                     THE DATA SET TO BE PUNCHED.       40211102
*                                                              ICB392*/ 40226002
*      5 JFCFNCBT BIT(1),          /* T - TWO-LINE PRINT SUPPORT        40240802
*                                     REQUEST.  THE SECOND PRINT LINE   40250802
*                                     IS LOCATED ON CARD LINE THREE.    40252802
*                                                              ICB392*/ 40255602
*      5 JFCRSV31 BIT(1),          /* RESERVED                 ICB392*/ 40270402
*   2 JFCBVLSQ FIXED(15),          /* VOLUME SEQUENCE NUMBER         */ 40285202
*   2 JFCBMASK CHAR(8) BDY(WORD),  /* DATA MANAGEMENT TASK           */ 40300002
*    3 JFCBOPS1 CHAR(5),           /* OPEN ROUTINE INTERNAL SWITCHES */ 40400002
*    3 JFCBFLG1 BIT(8),            /* FLAG BYTE                      */ 40500002
*     4 JFCSTAND BIT(1),           /* VOLUME LABEL PROCESSING           40600002
*                                     STANDARD                       */ 40650002
*     4 JFCSLCRE BIT(1),           /* CREATION OF A STANDARD LABEL      40700002
*                                     IS NECESSARY                   */ 40800002
*     4 JFCSLDES BIT(1),           /* DESTRUCTION OF A STANDARD LABEL   40900002
*                                     IS NECESSARY                   */ 41000002
*     4 JFCDUAL  BIT(1),           /* DUAL-DENSITY CHECK DETECTED    */ 41100002
*     4 JFCOPEN  BIT(4),           /* OPEN ROUTINE INTERNAL SWITCHES */ 41200002
*      5 *        BIT(3),          /* OPEN ROUTINE INTERNAL SWITCHES */ 41250002
*      5 JFCBPWBP BIT(1),          /* PASSWORD BYPASS INDICATOR         41260002
*                                                              MDC010*/ 41270002
*    3 JFCBFLG2 BIT(8),            /* FLAG BYTE OF OPEN SWITCHES     */ 41300002
*     4 JFCINOP  BIT(1),           /* TREAT THE INOUT OPTION OF OPEN    41400002
*                                     AS INPUT                       */ 41500002
*     4 JFCOUTOP BIT(1),           /* TREAT THE OUTIN OPTION OF OPEN    41600002
*                                     AS OUTPUT                      */ 41700002
*     4 JFCDEFER BIT(1),           /* SET ONLY IN A JFCB RECORDED IN    41800002
*                                     A DATA SET DESCRIPTOR RECORD      41810002
*                                     (DSDR) BY THE CHECKPOINT          41820002
*                                     ROUTINE.  INDICATES THAT THE      41830002
*                                     DATA SET RELATED TO THE JFCB IS   41850002
*                                     BEING PROCESSED SEQUENTIALLY,     41900002
*                                     AT THE CHECKPOINT, ON A VOLUME    42000002
*                                     OTHER THAN THE VOLUME ON WHICH    42100002
*                                     PROCESSING BEGAN IN THE CURRENT   42200002
*                                     STEP.  WHEN RESTART OCCURS,       42300002
*                                     THIS BIT CAUSES DEFERRED VOLUME   42350002
*                                     MOUNTING.                      */ 42400002
*      5 JFCNRPS  BIT(1),          /* USE BY OPEN ROUTINES - SET TO     42450002
*                                     INDICATE THAT THIS DATA SET       42460002
*                                     RESIDES ON A NON-RPS DEVICE.      42470002
*                                     RESET TO ZERO WHEN OPEN           42480002
*                                     PROCESSING IS COMPLETED. ICB495*/ 42490002
*     4 JFCMODNW BIT(1),           /* DISPOSITION OF THIS DATA SET      42500002
*                                     HAS BEEN CHANGED FROM MOD TO      42550002
*                                     NEW.  DISPOSITION (IN JFCBIND2)   42600002
*                                     WILL BE RESTORED TO MOD AFTER     42700002
*                                     OPEN.                          */ 42800002
*     4 JFCSDRPS BIT(1),           /* USE SEARCH DIRECT FOR             42850002
*                                     ROTATIONAL POSITION SENSING       42860002
*                                     (RPS) DEVICES            ICB398*/ 42870002
*     4 JFCTRACE BIT(1),           /* GTF TRACE IS TO OCCUR DURING      42910002
*                                     OPEN/CLOSE/EOV AND DYNAMIC        42920002
*                                     ALLOCATION PROCESSING OF DCB      42930002
*                                                              ICB392*/ 42940001
*     4 JFCBBUFF BIT(1),           /* INDICATOR TO OPEN THAT A          42950002
*                                     NON-ZERO VALUE IN JFCBOTTR IS     42960001
*                                     NOT TO PREVENT THE NORMAL         42970001
*                                     STORING BY OPEN OF A TTR IN       42980001
*                                     JFCBOTTR.  BEFORE OPEN -          42990002
*                                     JFCBUFOF (OFFSET 67) CONTAINS     42990402
*                                     A BUFFER OFFSET OR INVALID        42990802
*                                     INFORMATION RESULTING FROM A      42991202
*                                     JFCB-TO-JFCB MERGE.  AFTER        42991602
*                                     OPEN - OPEN MAY HAVE STORED A     42991702
*                                     TTR IN JFCBOTTR (OFFSET 67), IN   42991802
*                                     WHICH CASE OPEN WILL HAVE SET     42991902
*                                     THIS BIT TO ZERO.              */ 43005402
*     4 JFCRCTLG BIT(1),           /* OPEN HAS UPDATED THE TTR.         43019002
*                                     SCHEDULER STEP TERMINATION        43029002
*                                     ROUTINE IS TO RECATALOG THIS      43032502
*                                     DATA SET AND PLACE IN THE         43046002
*                                     CATALOG ENTRY THE DSCB TTR        43059502
*                                     CONTAINED IN JFCBDSCB IF THIS     43073002
*                                     DATA SET IS CATALOGED.   ICB398*/ 43083002
*    3 JFCBOPS2 BIT(8),            /* OPEN ROUTINE INTERNAL SWITCHES */ 43086502
*   2 JFCBCRDT CHAR(3) BDY(WORD),  /* DATA SET CREATION DATE (YDD,      43100002
*                                     Y=YEAR AND DD=DAY)             */ 43150002
*   2 JFCBXPDT CHAR(3) BDY(WORD,4),/* DATA SET EXPIRATION DATE (YDD) */ 43200002
*   2 JFCBIND1 BIT(8),             /* INDICATOR BYTE 1               */ 43300002
*    3 JFCRLSE  BIT(2),            /* RELEASE EXTERNAL STORAGE       */ 43600002
*    3 JFCLOC   BIT(2),            /* DATA SET HAS BEEN LOCATED      */ 43700002
*    3 JFCADDED BIT(2),            /* NEW VOLUME HAS BEEN ADDED TO      43800002
*                                     THE DATA SET                   */ 43900002
*    3 JFCGDG   BIT(1),            /* DATA SET IS A MEMBER OF A         44000002
*                                     GENERATION DATA GROUP          */ 44100002
*    3 JFCPDS   BIT(1),            /* DATA SET IS A MEMBER OF A         44200002
*                                     PARTITIONED DATA SET           */ 44300002
*   2 JFCBIND2 BIT(8),             /* INDICATOR BYTE 2               */ 44400002
*    3 JFCDISP  BIT(2),            /* BIT PATTERN FOR NEW, MOD, OLD  */ 44600002
*% DCL JFCNEW CHAR;                                                     44700002
*% JFCNEW = '''11''B';             /* NEW DATA SET                   */ 44800002
*% DCL JFCMOD CHAR;                                                     44900002
*% JFCMOD = '''10''B';             /* MOD DATA SET                   */ 45000002
*% DCL JFCOLD CHAR;                                                     45100002
*% JFCOLD = '''01''B';             /* OLD DATA SET                   */ 45200002
*    3 JFCSECUR BIT(2),            /* DATA SET SECURITY              */ 45400002
*% DCL JFCBSCTY CHAR;                                                   45500002
*% JFCBSCTY = '''01''B';           /* PASSWORD IS REQUIRED TO READ OR   45600002
*                                     TO WRITE (DATA SET SECURITY)   */ 45650002
*% DCL JFCBRWPW CHAR;                                                   45800002
*% JFCBRWPW = '''11''B';           /* PASSWORD IS REQUIRED TO WRITE     45900002
*                                     BUT NOT TO READ (DATA SET         46000002
*                                     SECURITY)                      */ 46050002
*    3 JFCSHARE BIT(1),            /* SHARED DATA SET                */ 46100002
*    3 JFCENT   BIT(1),            /* DELETE THIS JFCB BEFORE           46200002
*                                     ALLOCATION FOR A RESTARTED        46250002
*                                     GENERATION DATA GROUP          */ 46300002
*    3 JFCREQ   BIT(1),            /* STORAGE VOLUME REQUESTED       */ 46700002
*    3 JFCTEMP  BIT(1),            /* TEMPORARY DATA SET             */ 46800002
*   2 JFCAMPTR PTR(31),            /* POINTER TO AMPBLK FOR             46850002
*                                     ADDITIONAL VSAM PARAMETERS        46860002
*                                                              ICB438*/ 46870002
*    3 JFCBUFRQ CHAR(1),           /* NUMBER OF BUFFERS REQUIRED FOR    46880002
*                                     EACH LINE (QTAM)               */ 46890002
*     4 JFCBUFNO CHAR(1),          /* NUMBER OF BUFFERS REQUIRED FOR    46900002
*                                     THIS DATA SET (ACCESS METHODS     47000002
*                                     OTHER THAN TCAM AND QTAM)      */ 47050002
*      5 JFCBUFIN BIT(4),          /* THE NUMBER OF BUFFERS ASSIGNED    47100002
*                                     INITIALLY FOR RECEIVING           47150002
*                                     OPERATIONS FOR EACH LINE IN A     47160002
*                                     LINE GROUP  (TCAM)       MDC021*/ 47170002
*      5 JFCBFOUT BIT(4),          /* THE NUMBER OF BUFFERS ASSIGNED    47200002
*                                     INITIALLY FOR SENDING             47210002
*                                     OPERATIONS FOR EACH LINE IN A     47220002
*                                     LINE GROUP  (TCAM)       MDC022*/ 47230002
*    3 JFCBGNCP PTR(8),            /* FOR GAM, THIS FIELD IS USED FOR   47250002
*                                     THE NUMBER OF IOB'S CONSTRUCTED   47300002
*                                     BY THE OPEN ROUTINE.  MAXIMUM     47350002
*                                     NUMBER IS 99.            MDC025*/ 47400002
*     4 JFCBHIAR CHAR(1),          /* BUFFER POOL LOCATION IN MAIN      47500002
*                                     STORAGE (HIERARCHY)            */ 47600002
*      5 JFCBFALN CHAR(1),         /* BUFFER ALIGNMENT               */ 47700002
*       6 JFCBFTEK BIT(8),         /* BUFFERING TECHNIQUE            */ 47800002
*        7 JFCHIER  BIT(1),        /* BITS 0 AND 5 DESCRIBE MAIN        48250002
*                                     STORAGE HIERARCHY.  BOTH BITS     48260002
*                                     OFF, HIERARCHY 0.  BIT 0 OFF      48270002
*                                     AND BIT 5 ON, HIERARCHY 1.     */ 48280002
*        7 JFCBBFTA BIT(2),        /* A - FOR QSAM LOCATE MODE          48290002
*                                     PROCESSING OF SPANNED RECORDS,    48292002
*                                     AUTOMATIC RECORD AREA             48294002
*                                     CONSTRUCTION DURING LOGICAL       48296002
*                                     RECORD INTERFACE PROCESSING.      48298002
*                                     OPEN IS TO CONSTRUCT A RECORD     48298402
*                                     AREA IF IT AUTOMATICALLY          48298802
*                                     CONSTRUCTS BUFFERS.            */ 48299202
*         8 JFCSIM   BIT(1),       /* S - SIMPLE BUFFERING           */ 48300002
*         8 JFCBBFTR BIT(1),       /* R - FOR BSAM CREATE BDAM          48350002
*                                     PROCESSING OR BDAM PROCESSING     48360002
*                                     OF UNBLOCKED SPANNED RECORDS,     48370002
*                                     SOFTWARE TRACK OVERFLOW.  OPEN    48380002
*                                     FORMS A SEGMENT WORK AREA POOL    48390002
*                                     AND STORES THE ADDRESS OF THE     48392002
*                                     SEGMENT WORK AREA CONTROL BLOCK   48394002
*                                     IN THE DCBEOBW FIELD OF THE       48396002
*                                     DATA CONTROL BLOCK.  WRITE USES   48398002
*                                     A SEGMENT WORK AREA TO WRITE A    48398402
*                                     RECORD AS ONE OR MORE SEGMENTS.   48398802
*                                     FOR BSAM INPUT PROCESSING OF      48399202
*                                     UNBLOCKED SPANNED RECORDS WITH    48399602
*                                     KEYS, RECORD OFFSET PROCESSING.   48399702
*                                     READ READS ONE RECORD SEGMENT     48399802
*                                     INTO THE RECORD AREA.  THE        48399902
*                                     FIRST SEGMENT OF A RECORD IS      48433202
*                                     PRECEDED IN THE RECORD AREA BY    48443202
*                                     THE KEY.  SUBSEQUENT SEGMENTS     48453202
*                                     ARE AT AN OFFSET EQUAL TO THE     48463202
*                                     KEY LENGTH.                    */ 48465202
*        7 JFCEXC   BIT(1),        /* E - EXCHANGE BUFFERING         */ 48466702
*        7 JFCDYN   BIT(1),        /* DYNAMIC BUFFERING              */ 48500002
*        7 JFCHIER1 BIT(1),        /* HIERARCHY 1 MAIN STORAGE       */ 48600002
*        7 JFCDWORD BIT(1),        /* D - DOUBLE WORD BOUNDARY       */ 48700002
*        7 JFCFWORD BIT(1),        /* F - FULL WORD NOT A DOUBLE        48800002
*                                     WORD BOUNDARY                  */ 48900002
*    3 JFCBUFL  FIXED(15) BDY(WORD,3), /* BUFFER LENGTH              */ 49000002
*   2 JFCEROPT BIT(8),             /* ERROR OPTION.  DISPOSITION OF     49100002
*                                     PERMANENT ERRORS IF USER          49150002
*                                     RETURNS FROM A SYNCHRONOUS        49160002
*                                     ERROR EXIT  (QSAM)             */ 49170002
*    3 JFCACC   BIT(1),            /* ACCEPT                         */ 49200002
*    3 JFCSKP   BIT(1),            /* SKIP                           */ 49300002
*    3 JFCABN   BIT(1),            /* ABNORMAL END OF TASK           */ 49400002
*    3 JFCTOPT  BIT(1),            /* ON-LINE TERMINAL TEST             49450002
*                                     (BTAM)                   ICB349*/ 49460002
*    3 JFCRSV02 BIT(1),            /* RESERVED                       */ 49500002
*    3 JFCRSV03 BIT(1),            /* RESERVED                       */ 49550002
*    3 JFCRSV04 BIT(1),            /* RESERVED                       */ 49560002
*    3 JFCRSV05 BIT(1),            /* RESERVED                       */ 49570002
*   2 JFCTRTCH CHAR(1) BDY(WORD,2);/* TAPE RECORDING TECHNIQUE          49600002
*                                     FOR 7-TRACK TAPE               */ 49700002
*% DCL JFCEVEN CHAR;                                                    49800002
*% JFCEVEN ='''23''X';             /* E - EVEN PARITY                */ 49900002
*% DCL JFCTRAN CHAR;                                                    50000002
*% JFCTRAN = '''3B''X';            /* T - EOD/EBCDIC TRANSLATION     */ 50100002
*% DCL JFCCONV CHAR;                                                    50200002
*% JFCCONV = '''13''X';            /* C - DATA CONVERSION            */ 50300002
*% DCL JFCTREV CHAR;                                                    50400002
*% JFCTREV = '''2B''X';            /* ET - EVEN PARITY AND              50500002
*                                     TRANSLATION                    */ 50510002
*                                                                       50550001
*DECLARE                                                                50600002
*%IF IKEPLS='2'  %THEN                                                  50650001
*    %GOTO JFCA1;                                                       50660001
*  1 JFCKEYLE CHAR(1) BASED(ADDR(JFCTRTCH)) BDY(WORD,2),                50700002
*%GOTO JFCA2;                                                           50710001
*%JFCA1 : ;                                                             50720001
*  1 JFCKEYLE CHAR(1) DEF(JFCTRTCH) BDY(WORD,2),                        50730002
*%JFCA2 : ;                                                             50740001
*                                  /* DIRECT ACCESS KEY LENGTH       */ 50750002
*   2 JFCCODE  BIT(8) BDY(BYTE),   /* CONVERSION CODE (PAPER TAPE)   */ 51000002
*    3 JFCNOCON BIT(1),            /* N - NO CONVERSION              */ 51100002
*    3 JFCBCD   BIT(1),            /* I - IBM BCD                    */ 51200002
*    3 JFCFRI   BIT(1),            /* F - FRIDEN                     */ 51300002
*    3 JFCBUR   BIT(1),            /* B - BURROUGHS                  */ 51400002
*    3 JFCNCR   BIT(1),            /* C - NATIONAL CASH REGISTER     */ 51500002
*    3 JFCASCII BIT(1),            /* A - ASCII (8-TRACK)            */ 51600002
*    3 JFCTTY   BIT(1),            /* T - TELETYPE                   */ 51700002
*    3 JFCRSV32 BIT(1);            /* RESERVED                       */ 51800002
*                                                                       51850001
*DECLARE                                                                51900002
*%IF IKEPLS='2'  %THEN                                                  51950001
*    %GOTO JFCA3;                                                       51960001
*  1 JFCSTACK BIT(8) BASED(ADDR(JFCTRTCH)) BDY(WORD,2),                 52000002
*%GOTO JFCA4;                                                           52002001
*%JFCA3 : ;                                                             52004001
*  1 JFCSTACK BIT(8) DEF(JFCTRTCH) BDY(WORD,2),                         52006002
*%JFCA4 : ;                                                             52008001
*                                  /* STACKER SELECTION (CARD READER,   52010002
*                                     (CARD PUNCH)                   */ 52020002
*   2 JFCMODE  BIT(8) BDY(WORD,2), /* MODE OF OPERATION (CARD READER,   52050002
*                                     (CARD PUNCH)             ICB394*/ 52060002
*    3 JFCBIN   BIT(1),            /* C - COLUMN BINARY MODE         */ 52100002
*    3 JFCEBCD  BIT(1),            /* E - EBCDIC MODE                */ 52200002
*    3 JFCMODEO BIT(1),            /* O - OPTICAL MARK READ MODE        52250002
*                                     (3505 ONLY)              ICB394*/ 52260002
*    3 JFCMODER BIT(1),            /* R - READ COLUMN ELIMINATE MODE    52270002
*                                     (3505 AND 3525 WITH READ          52272002
*                                     FEATURE)                 ICB394*/ 52280002
*    3 JFCRSV06 BIT(1),            /* RESERVED                       */ 52300002
*    3 JFCRSV07 BIT(1),            /* RESERVED                       */ 52350002
*    3 JFCTWO   BIT(1),            /* 2 - STACKER TWO                */ 52400002
*    3 JFCONE   BIT(1);            /* 1 - STACKER ONE                */ 52500002
*                                                                       52600000
*DECLARE                                                                52700002
*%IF IKEPLS='2'  %THEN                                                  52750001
*    %GOTO JFCA5;                                                       52760001
*  1 JFCSPPRT BASED(ADDR(JFCTRTCH)) BDY(WORD,2),                        52800002
*%GOTO JFCA6;                                                           52850001
*%JFCA5 : ;                                                             52860001
*  1 JFCSPPRT DEF(JFCTRTCH) BDY(WORD,2),                                52870002
*%JFCA6 : ;                                                             52880001
*   2 JFCPRTSP BIT(8) BDY(WORD,2), /* NORMAL PRINTER SPACING         */ 52900002
*% DCL JFCSPTHR CHAR;                                                   53100002
*% JFCSPTHR='''19''X';             /* 3 - SPACE 3 LINES              */ 53200002
*% DCL JFCSPTWO CHAR;                                                   53300002
*% JFCSPTWO='''11''X';             /* 2 - SPACE 2 LINES              */ 53400002
*% DCL JFCSPONE CHAR;                                                   53500002
*% JFCSPONE='''09''X';             /* 1 - SPACE 1 LINE               */ 53600002
*% DCL JFCSPNO CHAR;                                                    53700002
*% JFCSPNO='''01''X';              /* 0 - NO SPACING                 */ 53800002
*   2 JFCDEN   BIT(8),             /* TAPE DENSITY - 2400/3400 SERIES   54200002
*                                     MAGNETIC TAPE UNITS            */ 54250002
*% DCL JFC200 CHAR;                                                     54400002
*%JFC200 ='''03''X';               /* 7-TRACK 200 BPI                */ 54500002
*% DCL JFC556 CHAR;                                                     54600002
*%JFC556 ='''43''X';               /* 7-TRACK 556 BPI                */ 54700002
*% DCL JFC800 CHAR;                                                     54800002
*%JFC800 ='''83''X';               /* 7-TRACK AND 9-TRACK 800 BPI    */ 54900002
*% DCL JFC1600 CHAR;                                                    55000002
*%JFC1600 ='''C3''X';              /* 9-TRACK 1600 BPI               */ 55100002
*% DCL JFC6250 CHAR;                                                    55150002
*%JFC6250 ='''D3''X';              /* 9-TRACK 6250 BPI         ICB474*/ 55160002
*   2 JFCBABFS PTR(24) BDY(WORD,4),/* TOTAL BUFFER SIZE FOR ALL VSAM    55250002
*                                     BUFFERS                  ICB438*/ 55260002
*    3 JFCLIMCT CHAR(3) BDY(WORD,4),/* SEARCH LIMIT (BDAM)           */ 55300002
*     4 *        CHAR(1),          /* RESERVED                       */ 55400002
*     4 JFCTRKBL CHAR(2) BDY(WORD),/* DATA SET OPENED FOR MOD - IF      55600002
*                                     AUTOMATIC STEP RESTART WAS        55800002
*                                     REQUESTED, TRACK BALANCE          55900002
*                                     EXISTING WHEN THE DATA SET WAS    56000002
*                                     FIRST OPENED DURING THE           56100002
*                                     ORIGINAL EXECUTION OF THE         56200002
*                                     CURRENT STEP                   */ 56300002
*   2 JFCDSORG BIT(16) BDY(WORD,3),/* DATA SET ORGANIZATION BEING       56400002
*                                     USED                           */ 56500002
*    3 JFCDSRG1 BIT(8),            /* BYTE 1 OF JFCDSORG             */ 56600002
*     4 JFCORGIS BIT(1),           /* INDEXED SEQUENTIAL             */ 56700002
*     4 JFCORGPS BIT(1),           /* PHYSICAL SEQUENTIAL            */ 56800002
*     4 JFCORGDA BIT(1),           /* DIRECT                         */ 56900002
*     4 JFCORGCX BIT(1),           /* BTAM OR QTAM LINE GROUP  MDC011*/ 56910002
*     4 JFCORGCQ BIT(1),           /* QTAM DIRECT ACCESS MESSAGE        56920002
*                                     QUEUE                    MDC012*/ 56930002
*     4 JFCORGMQ BIT(1),           /* QTAM PROBLEM PROGRAM MESSAGE      56940002
*                                     QUEUE                    MDC013*/ 56950002
*     4 JFCORGPO BIT(1),           /* PARTITIONED                    */ 57100002
*     4 JFCORGU  BIT(1),           /* UNMOVABLE - THE DATA CONTAINS     57200002
*                                     LOCATION DEPENDENT INFORMATION */ 57300002
*    3 JFCDSRG2 BIT(8),            /* BYTE 2 OF JFCDSORG             */ 57400002
*     4 JFCORGGS BIT(1),           /* GRAPHICS                       */ 57500002
*     4 JFCORGTX BIT(1),           /* TCAM LINE GROUP          MDC014*/ 57510002
*     4 JFCORGTQ BIT(1),           /* TCAM MESSAGE QUEUE       MDC015*/ 57520002
*     4 JFCRSV13 BIT(1),           /* RESERVED, BINARY ZERO          */ 57620002
*     4 JFCORGAM BIT(1),           /* VSAM                     ICB438*/ 57650002
*     4 JFCORGTR BIT(1),           /* TCAM 3705                MDC016*/ 57660002
*     4 JFCRSV15 BIT(1),           /* RESERVED, BINARY ZERO          */ 57670002
*     4 JFCRSV16 BIT(1),           /* RESERVED, BINARY ZERO          */ 57680002
*   2 JFCRECFM BIT(8) BDY(WORD),   /* RECORD FORMAT                  */ 57700002
*    3 JFCRCFM  BIT(3),            /* RECORD FORMAT (USASI/USASCII)     57750002
*                                                              MDC023*/ 57752002
*%DCL JFCVARD CHAR;                                                     57760002
*%JFCVARD='''001''B';              /* D - VARIABLE (FORMAT D FOR        57770002
*                                     USASI/USASCII)                 */ 57780002
*     4 JFCFMREC BIT(2),           /* BITS INDICATING RECORD FORMAT  */ 57800002
*% DCL JFCUND CHAR;                                                     58000002
*% JFCUND = '''11''B';             /* U - UNDEFINED                  */ 58100002
*% DCL JFCFIX CHAR;                                                     58200002
*% JFCFIX = '''10''B';             /* F - FIXED                      */ 58300002
*% DCL JFCVAR CHAR;                                                     58400002
*% JFCVAR = '''01''B';             /* V - VARIABLE                   */ 58500002
*     4 JFCRFO   BIT(1),           /* T - TRACK OVERFLOW             */ 58800002
*    3 JFCRFB   BIT(1),            /* B - BLOCKED - MAY NOT OCCUR       58900002
*                                     WITH UNDEFINED                 */ 59000002
*    3 JFCRFS   BIT(1),            /* S - FOR FIXED LENGTH RECORD       59100002
*                                     FORMAT, STANDARD BLOCKS.  NO      59150002
*                                     TRUNCATED BLOCKS OR UNFILLED      59200002
*                                     TRACKS ARE EMBEDDED IN THE DATA   59250002
*                                     SET.                              59300002
*                                     FOR VARIABLE LENGTH RECORD        59350002
*                                     FORMAT, SPANNED RECORDS.       */ 59400002
*    3 JFCCHAR  BIT(2),            /* CONTROL CHARACTER              */ 59800002
*% DCL JFCASA CHAR;                                                     59900002
*% JFCASA = '''10''B';             /* A - AMERICAN NATIONAL STANDARD    60000002
*                                     (ASA) CONTROL CHARACTER        */ 60050002
*% DCL JFCMAC CHAR;                                                     60100002
*% JFCMAC = '''01''B';             /* M - MACHINE CODE CONTROL          60200002
*                                     CHARACTER                      */ 60250002
*% DCL JFCNOCC CHAR;                                                    60300002
*% JFCNOCC ='''00''B';             /* NO CONTROL CHARACTER           */ 60400002
*    3 *        BIT(1),            /* RESERVED                       */ 60500002
*   2 JFCOPTCD BIT(8) BDY(WORD,2), /* OPTION CODES                   */ 60600002
*    3 JFCWVCSP BIT(1),            /* QSAM-BSAM-BPAM - W - WRITE        60700002
*                                     VALIDITY CHECK                 */ 60800002
*     4 JFCWVCIS BIT(1),           /* BISAM-QISAM - W - WRITE           60900002
*                                     VALIDITY CHECK                 */ 61000002
*      5 JFCWVCBD BIT(1),          /* BDAM - W - WRITE VALIDITY         61100002
*                                     CHECK                          */ 61150002
*       6 JFCSDNAM BIT(1),         /* TCAM - SOURCE OR DESTINATION      61250002
*                                     NAME PRECEDES MESSAGE (AFTER      61260001
*                                     CONTROL BYTE)                  */ 61270001
*    3 JFCALLOW BIT(1),            /* QSAM-BSAM-BPAM - U - ALLOW A      61300002
*                                     DATA CHECK CAUSED BY AN           61400002
*                                     INVALID CHARACTER (1403           61500002
*                                     PRINTER WITH UCS FEATURE)      */ 61600002
*     4 JFCRSV17 BIT(1),           /* RESERVED                       */ 61700002
*      5 JFCOVER  BIT(1),          /* BDAM - TRACK OVERFLOW          */ 61800002
*       6 JFCWUMSG BIT(1),         /* TCAM - WORK UNIT IS A MESSAGE     61850002
*                                     (DEFAULT WORK UNIT IS A RECORD)*/ 61860002
*    3 JFCPCIBT BIT(1),            /* QSAM-BSAM-BPAM - C - CHAINED      62000002
*                                     SCHEDULING USING THE PROGRAM      62100002
*                                     CONTROLLED INTERRUPTION        */ 62200002
*     4 JFCMAST  BIT(1),           /* BISAM-QISAM - M - MASTER          62300002
*                                     INDEXES                        */ 62350002
*      5 JFCEXT   BIT(1),          /* BDAM - E - EXTENDED SEARCH     */ 62400002
*       6 JFCCBWU  BIT(1),         /* TCAM - CONTROL BYTE PRECEDES      62450002
*                                     WORK UNIT                      */ 62460001
*    3 JFCBCKPT BIT(1),            /* QSAM-BSAM-BPAM - BYPASS           62550002
*                                     EMBEDDED DOS CHECKPOINT           62600002
*                                     RECORDS ON TAPE         ICB398*/  62650002
*     4 JFCIND   BIT(1),           /* BISAM-QISAM - I - INDEPENDENT     62700002
*                                     OVERFLOW AREA                  */ 62800002
*      5 JFCFEED  BIT(1),          /* BDAM - F - FEEDBACK            */ 62900002
*    3 JFCRSV18 BIT(1),            /* RESERVED                       */ 63200002
*     4 JFCCYL   BIT(1),           /* BISAM-QISAM - Y - CYLINDER        63300002
*                                     OVERFLOW AREA                  */ 63400002
*      5 JFCACT   BIT(1),          /* BDAM - A - ACTUAL ADRESSING    */ 63500002
*       6 JFCOPTQ  BIT(1),         /* USASI/USASCII - EBCDIC TO ASCII   63550002
*                                     OR ASCII TO EBCDIC TRANSLATION    63600002
*                                     REQUIRED                       */ 63650002
*    3 JFCREDUC BIT(1),            /* QSAM-BSAM-BPAM-EXCP - Z -         63800002
*                                     USE REDUCED ERROR RECOVERY        63900002
*                                     PROCEDURE (MAGNETIC TAPE)      */ 64000002
*     4 JFCRSV19 BIT(1),           /* RESERVED                       */ 64100002
*      5 JFCRSV20 BIT(1),          /* RESERVED                       */ 64200002
*       6 JFCSRCHD BIT(1),         /* QSAM-BSAM-BPAM - USE SEARCH       64250002
*                                     DIRECT (SD) INSTEAD OF SEARCH     64300002
*                                     PREVIOUS ON ROTATIONAL POSITION   64350002
*                                     SENSING (RPS) DEVICE.  (DIRECT    64360002
*                                     ACCESS)                        */ 64370002
*    3 JFCRSV21 BIT(1),            /* RESERVED                       */ 64400002
*     4 JFCDEL   BIT(1),           /* BISAM-QISAM - L - DELETE          64500002
*                                     OPTION                         */ 64550002
*      5 JFCRSV22 BIT(1),          /* RESERVED                       */ 64600002
*    3 JFCOPTJ  BIT(1),            /* QSAM-BSAM-BPAM - J - 3800         64650004
*                                     CONTROL CHARACTER                 64700004
*                                     (MDC301)               @Z40MP9A*/ 64800004
*     4 JFCREORG BIT(1),           /* BISAM-QISAM - R -                 65000002
*                                     REORGANIZATION CRITERIA        */ 65100002
*      5 JFCREL   BIT(1),          /* BDAM - R - RELATIVE BLOCK         65200002
*                                     ADDRESSING                     */ 65300002
*   2 JFCBLKSI FIXED(15) BDY(WORD,3), /* MAXIMUM BLOCK SIZE          */ 65400002
*    3 JFCBUFSI FIXED(15) BDY(WORD,3), /* MAXIMUM BUFFER SIZE        */ 65500002
*     4 JFCBAXBF FIXED(15) BDY(WORD,3), /* NUMBER OF INDEX BUFFERS      65650002
*                                     (VSAM)                   ICB438*/ 65660002
*   2 JFCAMSYN CHAR(8) BDY(WORD),  /* MODULE NAME FOR SYNAD ROUTINE     65670002
*                                     FOR VSAM                 ICB438*/ 65680002
*    3 JFCLRECL FIXED(15) BDY(WORD), /* LOGICAL RECORD LENGTH        */ 65700002
*    3 JFCNCP   CHAR(1) BDY(WORD,3), /* NUMBER OF CHANNEL PROGRAMS.     65800002
*                                     NUMBER OF READ OR WRITE           65900002
*                                     REQUESTS WHICH MAY BE ISSUED      66000002
*                                     PRIOR TO A CHECK.  NUMBER OF      66100002
*                                     IOB'S GENERATED.  (MAXIMUM        66200002
*                                     NUMBER IS 99.)                    66300002
*                                     NOTE - GAM USES JFCBFTEK FOR      66400002
*                                     THIS INFORMATION AND DOES         66500002
*                                     NOT USE THIS FIELD AT ALL.     */ 66600002
*     4 JFCBUFMX CHAR(1),          /* THE MAXIMUM NUMBER OF BUFFERS     66800002
*                                     TO BE USED FOR DATA TRANSFER      66850002
*                                     FOR EACH LINE IN THIS LINE        66860002
*                                     GROUP  (TCAM)                  */ 66870002
*    3 JFCNTM   CHAR(1) BDY(WORD,4), /* THE NUMBER OF TRACKS THAT       66900002
*                                     DETERMINE THE DEVELOPMENT OF A    66950002
*                                     MASTER INDEX.  MAXIMUM NUMBER     67000002
*                                     IS 99.  (ISAM)                 */ 67050002
*     4 JFCBFSEQ PTR(8),           /* TAPE POSITIONING INFORMATION      67100002
*                                     FOR CHECKPOINT RESTART.  THIS     67150002
*                                     FIELD IS USED TO PASS A           67160002
*                                     PHYSICAL FILE SEQUENCE COUNT      67170002
*                                     FROM CHECKPOINT TO RESTART.       67180002
*                                     THE COUNT TELLS THE PHYSICAL      67190002
*                                     POSITION OF THE TAPE VOLUME       67192002
*                                     THAT WAS BEING PROCESSED WHEN     67194002
*                                     THE CHECKPOINT WAS TAKEN.         67196002
*                                                             SA60703*/ 67198002
*      5 JFCPCI   BIT(8),          /* PROGRAM-CONTROLLED INTERRUPTION   67200002
*                                     (PCI) FLAG BYTE (TCAM)         */ 67200402
*       6 JFCPCIX1 BIT(1),         /* PCI=(X,) RECEIVE OPERATIONS       67201002
*                                                              ICB473*/ 67202001
*       6 JFCPCIX2 BIT(1),         /* PCI=(,X) SEND OPERATIONS          67203002
*                                     X INDICATES THAT AFTER THE        67204002
*                                     FIRST BUFFER IS FILLED (ON        67205002
*                                     RECEIVE OPERATIONS) OR EMPTIED    67206002
*                                     (ON SEND OPERATIONS), A PCI       67207002
*                                     OCCURS DURING THE FILLING OR      67208002
*                                     EMPTYING OF THE NEXT BUFFER.      67209002
*                                     THE FIRST BUFFER REMAINS          67210002
*                                     ALLOCATED AND ANOTHER IS          67211002
*                                     ALLOCATED.               ICB473*/ 67212002
*       6 JFCPCIA1 BIT(1),         /* PCI=(A,) RECEIVE OPERATIONS    */ 67213002
*       6 JFCPCIA2 BIT(1),         /* PCI=(,A) SEND OPERATIONS          67214002
*                                     A INDICATES THAT AFTER THE        67215002
*                                     FIRST BUFFER IS FILLED (ON        67216002
*                                     RECEIVE OPERATIONS) OR EMPTIED    67217002
*                                     (ON SEND OPERATIONS), A PCI       67218002
*                                     OCCURS DURING THE FILLING OR      67219002
*                                     EMPTYING OF THE NEXT BUFFER.      67220002
*                                     THE FIRST BUFFER IS DEALLOCATED.  67221002
*                                     A BUFFER IS ALLOCATED IN PLACE    67222002
*                                     OF THE DEALLOCATED BUFFER.     */ 67223002
*       6 JFCPCIN1 BIT(1),         /* PCI=(N,) RECEIVE OPERATIONS    */ 67224002
*       6 JFCPCIN2 BIT(1),         /* PCI=(,N) SEND OPERATIONS          67225002
*                                     N INDICATES THAT NO PCI'S ARE     67226002
*                                     TAKEN DURING FILLING (ON          67227002
*                                     RECEIVE OPERATIONS) OR EMPTYING   67228002
*                                     (ON SEND OPERATIONS) OF BUFFERS.  67229002
*                                     BUFFERS ARE DEALLOCATED AT THE    67230002
*                                     END OF TRANSMISSION.           */ 67231002
*       6 JFCPCIR1 BIT(1),         /* PCI=(R,) RECEIVE OPERATIONS    */ 67232002
*       6 JFCPCIR2 BIT(1),         /* PCI=(,R) SEND OPERATIONS          67233002
*                                     R INDICATES THAT AFTER THE        67234002
*                                     FIRST BUFFER IS FILLED (ON        67235002
*                                     RECEIVE OPERATIONS) OR EMPTIED    67236002
*                                     (ON SEND OPERATIONS), A PCI       67237002
*                                     OCCURS DURING THE FILLING OR      67238002
*                                     EMPTYING OF EACH SUCCEEDING       67239002
*                                     BUFFER.  THE COMPLETED BUFFER     67240002
*                                     IS DEALLOCATED, BUT NO NEW        67241002
*                                     BUFFER IS ALLOCATED TO TAKE       67242002
*                                     ITS PLACE.                     */ 67243002
*                                                                       67300000
* /*******************************************************************/ 67400001
* /*                                                                 */ 67500001
* /*                     NORMAL 108 SEGMENT                          */ 67600001
* /*                                                                 */ 67700001
* /*******************************************************************/ 67800001
*                                                                       67900000
*    3 JFCRESRV CHAR(4) BDY(WORD), /* FIRST BYTE CONTAINS NUMBER OF     67950002
*                                     BYTES FOR TIME OF DAY.  SECOND    67960002
*                                     BYTE CONTAINS NUMBER OF BYTES     67970002
*                                     FOR DATE.  THIRD BYTE CONTAINS    67980002
*                                     NUMBER OF BYTES FOR OUTSEQ.       67990002
*                                     FOURTH BYTE CONTAINS NUMBER OF    67992002
*                                     BYTES IN.  (TCAM)              */ 67994002
*     4 JFCRKP   FIXED(15) BDY(WORD), /* THE RELATIVE POSITION OF THE   68000002
*                                     FIRST BYTE OF THE KEY WITHIN      68100002
*                                     EACH LOGICAL RECORD.  MAXIMUM     68200002
*                                     VALUE IS LOGICAL RECORD LENGTH    68300002
*                                     MINUS KEY LENGTH.              */ 68400002
*     4 JFCCYLOF CHAR(1),          /* THE NUMBER OF TRACKS TO BE        68600002
*                                     RESERVED ON EACH CYLINDER TO      68700002
*                                     HOLD RECORDS THAT OVERFLOW        68800002
*                                     FROM OTHER TRACKS ON THAT         68900002
*                                     CYLINDER.  MAXIMUM VALUE IS       69000002
*                                     99.                            */ 69050002
*     4 JFCDBUFN CHAR(1),          /* RESERVED                       */ 69200002
*   2 JFCINTVL CHAR(1) BDY(WORD);  /* INTENTIONAL DELAY, IN SECONDS,    69300002
*                                     BETWEEN PASSES THROUGH A          69400002
*                                     POLLING LIST (QTAM)            */ 69500002
*                                                                       69600000
* /*******************************************************************/ 69700001
* /*                                                                 */ 69800001
* /*                     END OF NORMAL 108 SEGMENT                   */ 69900001
* /*                                                                 */ 70000001
* /*******************************************************************/ 70100001
*                                                                       70200000
* /*******************************************************************/ 70300001
* /*                                                                 */ 70400001
* /*                     108 PRINTER SEGMENT                         */ 70500001
* /*                                                                 */ 70510002
* /*     NOTE  THIS SEGMENT REPLACES THE NORMAL 108 SEGMENT IF       */ 70550002
* /*           THE DD STATEMENT USES THE UCS PARAMETER.              */ 70560002
* /*                                                                 */ 70600001
* /*******************************************************************/ 70700001
*                                                                       70750002
*DECLARE                                                                70800002
*%IF IKEPLS='2'  %THEN                                                  70850001
*    %GOTO JFCA7;                                                       70860001
*  1 JFCUCSEG BASED (ADDR(JFCRESRV)) BDY(WORD),                         70900002
*%GOTO JFCA8;                                                           70950001
*%JFCA7 : ;                                                             70960001
*  1 JFCUCSEG DEF(JFCRESRV) BDY(WORD),                                  70970002
*%JFCA8 : ;                                                             70980001
*   2 JFCUCSID CHAR(4) BDY(WORD),  /* NAME OF THE UCS IMAGE TO BE       71100002
*                                     LOADED                         */ 71200002
*   2 JFCUCSOP BIT(8),             /* OPERATION OF THE UCS IMAGE TO     71300002
*                                     BE LOADED                      */ 71400002
*    3 JFCBEXTP BIT(1),            /* JFCB EXTENSION PRESENT FOR 3800   71450004
*                                     DEVICE  (MDC302)       @Z40MP9A*/ 71520004
*    3 JFCFOLD  BIT(1),            /* UCS IMAGE IS TO BE LOADED IN      71600002
*                                     THE FOLD MODE                  */ 71700002
*    3 JFCRSV25 BIT(1),            /* RESERVED                       */ 71800002
*    3 JFCVER   BIT(1),            /* UCS IMAGE IS TO BE VERIFIED    */ 71900002
*    3 JFCFCBAL BIT(1),            /* FORMS ARE TO BE ALIGNED        */ 71950002
*    3 JFCFCBVR BIT(1),            /* FORMS CONTROL BUFFER (FCB)        71960002
*                                     IMAGE IS TO BE VERIFIED        */ 71970002
*    3 JFCRSV26 BIT(1),            /* RESERVED                       */ 72010002
*    3 JFCRSV27 BIT(1),            /* RESERVED                       */ 72060002
*                                                                       72100000
* /*******************************************************************/ 72200001
* /*                                                                 */ 72300001
* /*                     END OF 108 PRINTER SEGMENT                  */ 72400001
* /*                                                                 */ 72500001
* /*******************************************************************/ 72600001
*                                                                       72700000
*   2 JFCOUTLI PTR(24) BDY(WORD,2),/* SMF - SYSOUT LIMIT.  BINARY       72800002
*                                     REPRESENTATION OF THE OUTLIM=     72850002
*                                     PARAMETER ON THE SYSOUT DD        72860002
*                                     STATEMENT.  THE MAXIMUM NUMBER    72870002
*                                     OF LOGICAL RECORDS SPECIFIED      72880002
*                                     FOR THIS OUTPUT DATA SET.      */ 72890002
*    3 JFCTHRSH CHAR(1),           /* RECORDS TO BE USED             */ 72900002
*     4 JFCCPRI  BIT(8),           /* PRIORITY BETWEEN SEND AND         73000002
*                                     RECEIVE OPERATIONS (TCAM)      */ 73100002
*      5 JFCRSV53 BIT(1),          /* RESERVED                 MDC020*/ 73150002
*      5 JFCRSV54 BIT(1),          /* RESERVED                 MDC019*/ 73200002
*      5 JFCRSV55 BIT(1),          /* RESERVED                 MDC018*/ 73250002
*      5 JFCRSV33 BIT(1),          /* RESERVED                       */ 73500002
*      5 JFCRSV34 BIT(1),          /* RESERVED                       */ 73550002
*      5 JFCRECV  BIT(1),          /* RECEIVE PRIORITY         MDC018*/ 73560002
*      5 JFCEQUAL BIT(1),          /* EQUAL PRIORITY           MDC019*/ 73570002
*      5 JFCSEND  BIT(1),          /* SEND PRIORITY            MDC020*/ 73580002
*    3 JFCSOWA  FIXED(15),         /* LENGTH, IN BYTES, OF THE USER-    73600002
*                                     PROVIDED WORK AREA (QTAM)      */ 73700002
*   2 JFCBNTCS CHAR(1),            /* NUMBER OF OVERFLOW TRACKS      */ 73800002
*   2 JFCBNVOL CHAR(1),            /* NUMBER OF VOLUME SERIAL NUMBERS*/ 73900002
*   2 JFCBVOLS CHAR(30) BDY(WORD,3),/* THE FIRST FIVE VOLUME SERIAL     74000002
*                                     NUMBERS                        */ 74050002
*    3 JFCAVOLS (5) CHAR(6);       /* THE FIRST FIVE VOLUME SERIAL      74060003
*                                     NUMBERS                @Z30LP9A*/ 74062004
*                                                                       74064003
*DECLARE                                                                74066003
*%IF IKEPLS='2'  %THEN                                                  74068003
*    %GOTO JFCA9;                                                       74070003
*  1 JFCBS001 BASED(ADDR(JFCBVOLS)) BDY(WORD,3), /*          @Z30LP9A*/ 74072004
*%GOTO JFCA10;                                                          74074003
*%JFCA9 : ;                                                             74076003
*  1 JFCBS001 DEF(JFCBVOLS) BDY(WORD,3), /*                  @Z30LP9A*/ 74078004
*%JFCA10 : ;                                                            74080003
*   2 *        CHAR(22),           /* FIRST 22 BYTES OF                 74082003
*                                     JFCBVOLS               @Z30LP9A*/ 74086004
*   2 JFCMSVGP CHAR(8) BDY(WORD),  /* MASS STORAGE VOLUME GROUP FROM    74090003
*                                     WHICH TO SELECT A VOLUME          74094003
*                                     (MDC306)               @Z30LP9A*/ 74100004
*   2 JFCBEXTL CHAR(1),            /* LENGTH OF BLOCK OF EXTRA VOLUME   74150003
*                                     SERIAL NUMBERS (BEYOND FIVE)   */ 74200002
*   2 JFCBEXAD CHAR(3),            /* RELATIVE TRACK ADDRESS (TTR)      74300002
*                                     OF FIRST JFCB EXTENSION BLOCK     74400003
*                                     FOR VOLUME SERIAL NUMBERS OR      74420004
*                                     TTR OF JFCB EXTENSION BLOCK       74440004
*                                     FOR 3800  (MDC303)     @Z40MP9A*/ 74460004
*   2 JFCBPQTY CHAR(3) BDY(WORD),  /* PRIMARY QUANTITY OF DIRECT        74500002
*                                     ACCESS STORAGE REQUIRED        */ 74600002
*    3 JFCRUNIT CHAR(3),           /* UNIT TYPE (EBCDIC) OF A DEVICE    74650002
*                                     AT A REMOTE TERMINAL.  THE        74660002
*                                     FIRST TWO CHARACTERS ARE RD       74670002
*                                     (READER), PR (PRINTER) OR PU      74680001
*                                     (PUNCH).  THE THIRD CHARACTER     74690001
*                                     IS A NUMBER FROM 1 TO 9. ICB387*/ 74692001
*   2 JFCBCTRI BIT(8),             /* SPACE PARAMETERS               */ 74700002
*    3 JFCBSPAC BIT(2),            /* SPACE MASK BITS                */ 75400002
*%DCL JFCBABS CHAR;                                                     75500002
*% JFCBABS = '''00''B';            /* ABSTR REQUEST                  */ 75600002
*%DCL JFCBAVR CHAR;                                                     75700002
*% JFCBAVR = '''01''B';            /* AVERAGE BLOCK LENGTH REQUEST   */ 75800002
*% DCL JFCBTRK  CHAR;                                                   75900002
*% JFCBTRK = '''10''B';            /* TRK REQUEST                    */ 76000002
*% DCL JFCBCYL CHAR;                                                    76100002
*% JFCBCYL = '''11''B';            /* CYL REQUEST                    */ 76200002
*    3 JFCBMSGP BIT(1),            /* REQUEST IS FOR A MASS STORAGE     76250003
*                                     VOLUME GROUP (MSVGP) VOLUME       76300003
*                                     (MDC307)               @Z30LP9A*/ 76350004
*    3 JFCRSV29 BIT(1),            /* RESERVED                       */ 76500002
*    3 JFCONTIG BIT(1),            /* CONTIG REQUEST                 */ 76700002
*    3 JFCMIXG  BIT(1),            /* MXIG REQUEST                   */ 76800002
*    3 JFCALX   BIT(1),            /* ALX REQUEST                    */ 76900002
*    3 JFCROUND BIT(1),            /* ROUND REQUEST                  */ 77000002
*   2 JFCBSQTY CHAR(3) BDY(WORD),  /* SECONDARY QUANTITY OF DIRECT      77200002
*                                     ACCESS STORAGE REQUIRED        */ 77300002
*    3 JFCRQID  FIXED(15),         /* QUEUE IDENTIFICATION (QID) USED   77350002
*                                     BY ACCESS METHOD TO DETERMINE     77352002
*                                     THE REMOTE TERMINAL LOCATION      77360002
*                                     FOR THIS JOB.            ICB387*/ 77370002
*   2 JFCFLGS1 BIT(8),             /* FLAG BYTE (ICB488)      SA53458*/ 77400002
*    3 JFCBDLET BIT(1),            /* IF ONE, DELETE THE DATA SET       77401003
*                                     USED WHEN EXTENDING THE JOB       77403003
*                                     QUEUE OR SPOOL DATA SETS          77405003
*                                     (OS/VS1)  (MDC305)     @XM05457*/ 77407003
*    3 JFCTOPEN BIT(1),            /* TAPE DATA SET HAS BEEN OPENED     77411002
*                                                              MDC026*/ 77411402
*    3 JFCBADSP BIT(1),            /* AUTOMATIC DATA SET PROTECTION     77413004
*                                     INDICATOR  (MDC310)    @Z40RP9A*/ 77413804
*    3 JFCRSV42 BIT(1),            /* RESERVED  (MDC311)             */ 77415504
*    3 JFCBCEOV BIT(1),            /* IF ONE, CHKPT=EOV SPECIFIED FOR   77417003
*                                     THIS DATA SET (MDC312) @Z30JP9A*/ 77418003
*    3 JFCVRDS  BIT(1),            /* VIO DATA SET             MDC006*/ 77419602
*    3 JFCBSSDS BIT(1),            /* (SUBSYSTEM DATA SET) JFCB         77425660
*                                     EXTENSION FOR SUBSYSTEM DATA      77432660
*                                     SET IS PRESENT (OS/VS1)           77435660
*                                     (MDC313)               @M06SP9A*/ 77436660
*    3 JFCBUAFF BIT(1),            /* UNIT AFFINITY SPECIFIED FOR       77445302
*                                     THIS DATA SET (ICB488)  SA53458*/ 77458001
*   2 JFCBDQTY CHAR(3) BDY(WORD),  /* QUANTITY OF DIRECT ACCESS         77500002
*                                     STORAGE REQUIRED FOR A            77600002
*                                     DIRECTORY OR AN EMBEDDED INDEX    77700002
*                                     AREA                           */ 77750002
*   2 JFCBSPNM PTR(24) BDY(WORD,4),/* MAIN STORAGE ADDRESS OF THE       77800002
*                                     JFCB WITH WHICH CYLINDERS ARE     77900002
*                                     SPLIT                          */ 78000002
*   2 JFCBABST FIXED(15),          /* RELATIVE ADDRESS OF FIRST TRACK   78100002
*                                     TO BE ALLOCATED                */ 78200002
*   2 JFCBSBNM PTR(24) BDY(WORD),  /* MAIN STORAGE ADDRESS OF THE       78300002
*                                     JFCB FROM WHICH SPACE IS TO       78400002
*                                     BE SUBALLOCATED                */ 78500002
*   2 JFCBDRLH CHAR(3) BDY(WORD,4),/* AVERAGE DATA BLOCK LENGTH      */ 78600002
*   2 JFCBVLCT CHAR(1),            /* VOLUME COUNT                   */ 78700002
*   2 JFCBSPTN CHAR(1),            /* NUMBER OF TRACKS PER CYLINDER     78800002
*                                     TO BE USED BY THIS DATA SET       78900002
*                                     WHEN SPLIT CYLINDER IS            79000002
*                                     INDICATED                      */ 79050002
*   2 JFCBEND  CHAR(0) BDY(WORD);                                       79150002
*% DCL JFCBLGTH CHAR;                                                   79200002
*% JFCBLGTH ='176';                /* LENGTH OF JFCB                 */ 79300002
*%IF IKEPLS=''  %THEN                                                   79350002
*    %GOTO JFCBL4;                                                      79400002
*IHALPOP;                                                               79450002
*%JFCBL4 : ;                                                            79500002
*/*      %INCLUDE SYSLIB(IECSDSL1)                                   */ 00050000
* %      GOTO PLSDSCB;                  /*  GO TO THE PL/S VERSION   */ 00100000
*/* **************************************************************** */ 00200000
*/*                                                                  */ 00400000
*/*                IECSDSL1 --- DSCB MAPPING MACRO                   */ 00600000
*/*                                                                  */ 00800000
*/* **************************************************************** */ 01000000
*/*                                                                  */ 01200000
*/*              ASSEMBLY LANGUAGE VERSION OF IECSDSL1               */ 01250000
*/*                                                                  */ 01600000
*/*      ******************************************************      */ 01800000
*/*                                                                  */ 02000000
*/*      THE FORMAT OF EACH OF THE DATA SET CONTROL                  */ 02200000
*/*      BLOCKS (DSCB'S) CAN BE GENERATED BY CODING                  */ 02400000
*/*                    IECSDSL1 (N)                                  */ 02600000
*/*      WHERE N IS A NUMBER 1 - 6 CORRESPONDING TO THE              */ 02800000
*/*      FORMAT NUMBER OF THE DSCB TO BE MAPPED.  MORE               */ 03000000
*/*      THAN ONE DSCB CAN BE MAPPED PER MACRO CALL BY               */ 03200000
*/*      SEPARATING THE FORMAT NUMBERS BY COMMAS.  THE               */ 03400000
*/*      DSCB'S THUS GENERATED WILL BE MAPPED IN THE                 */ 03600000
*/*      ORDER IN WHICH THE FORMAT NUMBERS ARE CODED.                */ 03800000
*/*                                                                  */ 04000000
*/*      ******************************************************      */ 04200000
*/*                                                                  */ 04400000
         MACRO                                                          04600000
         IECSDSL1 &PARA                                                 04800000
         LCLA  &CTR                                                     05000000
&CTR     SETA  1                                                        05200000
.* LABEL DS2LPDT INSERTED IN RELEASE 21.6 FOR APAR 49466.               05400000
.LOOP    AIF   (&CTR GT N'&PARA).ENDOFIT                                05600000
         AIF   ('&PARA(&CTR)' EQ '1').FIRSTON                           05800000
         AIF   ('&PARA(&CTR)' EQ '2').SECNDON                           06000000
         AIF   ('&PARA(&CTR)' EQ '3').THIRDON                           06200000
         AIF   ('&PARA(&CTR)' EQ '4').FORTHON                           06400000
         AIF   ('&PARA(&CTR)' EQ '5').FIFTHON                           06600000
         AIF   ('&PARA(&CTR)' EQ '6').SIXTHON                           06800000
         AGO   .ERROR                                                   07000000
.FIRSTON ANOP                                                           07200000
IECSDSL1 EQU   *                   FORMAT 1 DSCB                        07400000
IECSDSF1 EQU   IECSDSL1                                                 07600000
DS1DSNAM DS    CL44                DATA SET NAME                        07800000
DS1FMTID DS    CL1                 FORMAT IDENTIFIER                    08000000
DS1DSSN  DS    CL6                 DATA SET SERIAL NUMBER               08200000
DS1VOLSQ DS    XL2                 VOLUME SEQUENCE NUMBER               08400000
DS1CREDT DS    XL3                 CREATION DATE                        08600000
DS1EXPDT DS    XL3                 EXPIRATION DATE                      08800000
DS1NOEPV DS    XL1                 NUMBER OF EXTENTS ON VOLUME          09000000
DS1NOBDB DS    XL1                 NUMBER OF BYTES USED IN LAST         09200000
*                                     DIRECTORY BLOCK                   09400000
         DS    XL1                 RESERVED                             09600000
DS1SYSCD DS    CL13                SYSTEM CODE                          09800000
         DS    XL7                 RESERVED                             10000000
DS1DSORG DS    XL2                 DATA SET ORGANIZATION                10200000
DS1RECFM DS    XL1                 RECORD FORMAT                        10400000
DS1OPTCD DS    XL1                 OPTION CODE                          10600000
DS1BLKL  DS    XL2                 BLOCK LENGTH                         10800000
DS1LRECL DS    XL2                 RECORD LENGTH                        11000000
DS1KEYL  DS    XL1                 KEY LENGTH                           11200000
DS1RKP   DS    XL2                 RELATIVE KEY POSITION                11400000
DS1DSIND DS    XL1                 DATA SET INDICATORS                  11600000
DS1SCALO DS    XL4                 SECONDARY ALLOCATION                 11800000
DS1LSTAR DS    XL3                 LAST USED TRACK AND BLOCK ON TRACK   12000000
DS1TRBAL DS    XL2                 BYTES REMAINING ON LAST TRACK USED   12200000
         DS    XL2                 RESERVED                             12400000
DS1EXT1  DS    XL10                FIRST EXTENT DESCRIPTION             12600000
*        FIRST BYTE                EXTENT TYPE INDICATOR                12800000
*        SECOND BYTE               EXTENT SEQUENCE NUMBER               13000000
*        THIRD - SIXTH BYTES       LOWER LIMIT                          13200000
*        SEVENTH - TENTH BYTES     UPPER LIMIT                          13400000
DS1EXT2  DS    XL10                SECOND EXTENT DESCRIPTION            13600000
DS1EXT3  DS    XL10                THIRD EXTENT DESCRIPTION             13800000
DS1PTRDS DS    XL5                 POSSIBLE PTR TO A FORMAT 2 OR 3 DSCB 14000000
DS1END   EQU   *                                                        14200000
&CTR     SETA  &CTR+1                                                   14400000
         AGO   .LOOP                                                    14600000
.SECNDON ANOP                                                           14800000
IECSDSL2 EQU   *                   FORMAT 2 DSCB                        15000000
IECSDSF2 EQU   IECSDSL2                                                 15200000
         DS    XL1                 KEY IDENTIFIER                       15400000
DS22MIND DS    XL7                 ADDRESS OF 2ND LEVEL MASTER INDEX    15600000
DS2L2MEN DS    XL5                 LAST 2ND LEVEL MASTER INDEX ENTRY    15800000
DS23MIND DS    XL7                 ADDRESS OF 3RD LEVEL MASTER INDEX    16000000
DS2L3MIN DS    XL5                 LAST 3RD LEVEL MASTER INDEX ENTRY    16200000
         DS    XL11                RESERVED                             16400000
DS2LPDT  DS    XL8                 LAST PRIME TRACK ON LAST PRIME CYL   16600000
DS2FMTID DS    CL1                 FORMAT IDENTIFIER                    16800000
DS2NOLEV DS    XL1                 NUMBER OF INDEX LEVELS               17000000
DS2DVIND DS    XL1                 HIGH LEVEL INDEX DEVELOPMENT         17200000
*                                     INDICATOR                         17400000
DS21RCYL DS    XL3                 FIRST DATA RECORD IN CYLINDER        17600000
DS2LTCYL DS    XL2                 LAST DATA TRACK IN CYLINDER          17800000
DS2CYLOV DS    XL1                 NUMBER OF TRACKS FOR CYLINDER        18000000
*                                     OVERFLOW                          18200000
DS2HIRIN DS    XL1                 HIGHEST 'R' ON HIGH-LEVEL INDEX TRK  18400000
DS2HIRPR DS    XL1                 HIGHEST 'R' ON PRIME DATA TRACK      18600000
DS2HIROV DS    XL1                 HIGHEST 'R' ON OVERFLOW DATA TRACK   18800000
DS2RSHTR DS    XL1                 'R' OF LAST DATA RECORD ON SHARED    19000000
*                                     TRACK                             19200000
DS2HIRTI DS    XL1                 HIGHEST 'R' ON UNSHARED TRACK OF     19400000
*                                     TRACK INDEX                       19600000
DS2HIIOV DS    XL1                 HIGHEST 'R' FOR INDEPENDENT OVERFLOW 19800000
*                                     DATA TRACKS                       20000000
DS2TAGDT DS    XL2                 TAG DELETION COUNT                   20200000
DS2RORG3 DS    XL3                 NON-FIRST OVERFLOW REFERENCE COUNT   20400000
DS2NOBYT DS    XL2                 NUMBER OF BYTES FOR HIGHEST-LEVEL    20600000
*                                     INDEX                             20800000
DS2NOTRK DS    XL1                 NUMBER OF TRACKS FOR HIGHEST-LEVEL   21000000
*                                     INDEX                             21200000
DS2PRCTR DS    XL4                 PRIME RECORD COUNT                   21400000
DS2STIND DS    XL1                 STATUS INDICATORS                    21600000
DS2CYLAD DS    XL7                 ADDRESS OF CYLINDER INDEX            21800000
DS2ADLIN DS    XL7                 ADDRESS OF LOWEST LEVEL MASTER INDEX 22000000
DS2ADHIN DS    XL7                 ADDRESS OF HIGHEST LEVEL MASTER      22200000
*                                     INDEX                             22400000
DS2LPRAD DS    XL8                 LAST PRIME DATA RECORD ADDRESS       22600000
DS2LTRAD DS    XL5                 LAST TRACK INDEX ENTRY ADDRESS       22800000
DS2LCYAD DS    XL5                 LAST CYLINDER INDEX ENTRY ADDRESS    23000000
DS2LMSAD DS    XL5                 LAST MASTER INDEX ENTRY ADDRESS      23200000
DS2LOVAD DS    XL8                 LAST INDEPENDENT OVERFLOW RECORD     23400000
*                                     ADDRESS                           23600000
DS2BYOVL DS    XL2                 BYTES REMAINING ON OVERFLOW TRACK    23800000
DS2RORG2 DS    XL2                 TRACKS REMAINING IN INDEPENDENT      24000000
*                                     OVERFLOW AREA                     24200000
DS2OVRCT DS    XL2                 OVERFLOW RECORD COUNT                24400000
DS2RORG1 DS    XL2                 CYLINDER OVERFLOW AREA COUNT         24600000
DS2NIRT  DS    XL3                 DUMMY TRACK INDEX ENTRY ADDRESS      24800000
DS2PTRDS DS    XL5                 POSSIBLE POINTER TO A FORMAT 3 DSCB  25000000
DS2END   EQU   *                                                        25200000
&CTR     SETA  &CTR+1                                                   25400000
         AGO   .LOOP                                                    25600000
.THIRDON ANOP                                                           25800000
IECSDSL3 EQU   *                   FORMAT 3 DSCB                        26000000
IECSDSF3 EQU   IECSDSL3                                                 26200000
         DS    XL4                 KEY IDENTIFIER                       26400000
DS3EXTNT DS    XL40                FOUR EXTENT DESCRIPTIONS             26600000
*        FIRST BYTE                EXTENT TYPE INDICATOR                26800000
*        SECOND BYTE               EXTENT SEQUENCE NUMBER               27000000
*        THIRD - SIXTH BYTES       LOWER LIMIT                          27200000
*        SEVENTH - TENTH BYTES     UPPER LIMIT                          27400000
DS3FMTID DS    CL1                 FORMAT IDENTIFIER                    27600000
DS3ADEXT DS    XL90                NINE ADDITIONAL EXTENT DESCRIPTIONS  27800000
DS3PTRDS DS    XL5                 RESERVED                             28000000
DS3END   EQU   *                                                        28200000
&CTR     SETA  &CTR+1                                                   28400000
         AGO   .LOOP                                                    28600000
.FORTHON ANOP                                                           28800000
IECSDSL4 EQU   *                   FORMAT 4 DSCB                        29000000
IECSDSF4 EQU   IECSDSL4                                                 29200000
DS4IDFMT DS    CL1                 FORMAT IDENTIFIER                    29400000
DS4HPCHR DS    XL5                 HIGHEST ADDRESS OF A FORMAT 1 DSCB   29600000
DS4DSREC DS    XL2                 NUMBER OF AVAILABLE DSCB'S           29800000
DS4HCCHH DS    XL4                 CCHH OF NEXT AVAILABLE ALTERNATE TRK 30000000
DS4NOATK DS    XL2                 NUMBER OF REMAINING ALTERNATE TRACKS 30200000
DS4VTOCI DS    XL1                 VTOC INDICATORS                      30400000
DS4NOEXT DS    XL1                 NUMBER OF EXTENTS IN THE VTOC        30600000
         DS    XL2                 RESERVED                             30800000
DS4DEVCT DS    0XL14               DEVICE CONSTANTS                     31000000
DS4DEVSZ DS    XL4                 DEVICE SIZE                          31200000
DS4DEVTK DS    XL2                 DEVICE TRACK LENGTH                  31400000
DS4DEVOV DS    0XL2                KEYED RECORD OVERHEAD                31600000
DS4DEVI  DS    XL1                    NON-LAST KEYED RECORD OVERHEAD    31800000
DS4DEVL  DS    XL1                    LAST KEYED RECORD OVERHEAD        32000000
DS4DEVK  DS    XL1                 NON-KEYED RECORD OVERHEAD            32200000
*                                     DIFFERENTIAL                      32400000
DS4DEVFG DS    XL1                 FLAG BYTE                            32600000
DS4DEVTL DS    XL2                 DEVICE TOLERANCE                     32800000
DS4DEVDT DS    XL1                 NUMBER OF DSCB'S PER TRACK           33000000
DS4DEVDB DS    XL1                 NUMBER OF DIRECTORY BLOCKS PER TRACK 33200000
DS4AMTIM DS    XL8                 VSAM TIME STAMP                      33250002
DS4AMCAT DS    0XL3                VSAM CATALOG INDICATOR               33300004
DS4VSIND DS    XL1                 VSAM INDICATORS                      33310004
DS4VSCRA DS    XL2                 RELATIVE TRACK LOCATION OF THE CRA   33320004
DS4R2TIM DS    XL8                 VSAM VOLUME/CATALOG MATCH            33330004
*                                  TIME STAMP                           33340004
         DS    XL5                 RESERVED                             33400004
DS4F6PTR DS    XL5                 POINTER TO FIRST FORMAT 6 DSCB       33600000
DS4VTOCE DS    XL10                VTOC EXTENT DESCRIPTION              33800000
         DS    XL25                RESERVED                             34000000
DS4END   EQU   *                                                        34200000
&CTR     SETA  &CTR+1                                                   34400000
         AGO   .LOOP                                                    34600000
.FIFTHON ANOP                                                           34800000
IECSDSL5 EQU   *                   FORMAT 5 DSCB                        35000000
IECSDSF5 EQU   IECSDSL5                                                 35200000
DS5KEYID DS    XL4                 KEY IDENTIFIER                       35400000
DS5AVEXT DS    XL5                 AVAILABLE EXTENT                     35600000
*        BYTES 1 - 2     RELATIVE TRACK ADDRESS OF THE FIRST TRACK      35800000
*                        IN THE EXTENT                                  36000000
*        BYTES 3 - 4     NUMBER OF UNUSED CYLINDERS IN THE EXTENT       36200000
*        BYTE  5         NUMBER OF ADDITIONAL UNUSED TRACKS             36400000
DS5EXTAV DS    XL35                SEVEN AVAILABLE EXTENTS              36600000
DS5FMTID DS    CL1                 FORMAT IDENTIFIER                    36800000
DS5MAVET DS    XL90                EIGHTEEN AVAILABLE EXTENTS           37000000
DS5PTRDS DS    XL5                 POINTER TO NEXT FORMAT 5 DSCB        37200000
DS5END   EQU   *                                                        37400000
&CTR     SETA  &CTR+1                                                   37600000
         AGO   .LOOP                                                    37800000
.SIXTHON ANOP                                                           38000000
IECSDSL6 EQU   *                   FORMAT 6 DSCB                        38200000
IECSDSF6 EQU   IECSDSL6                                                 38400000
DS6KEYID DS    XL4                 KEY IDENTIFIER                       38600000
DS6AVEXT DS    XL5                 SHARED EXTENT DESCRIPTION            38800000
*        BYTES 1 - 2     RELATIVE TRACK ADDRESS OF THE FIRST CYLINDER   39000000
*        BYTES 3 - 4     NUMBER OF FULL CYLINDERS BEING SHARED          39200000
*        BYTE  5         NUMBER OF DATA SETS SHARING THE EXTENT         39400000
DS6EXTAV DS    XL35                SEVEN SHARED EXTENTS                 39600000
DS6FMTID DS    CL1                 FORMAT IDENTIFIER                    39800000
DS6MAVET DS    XL90                EIGHTEEN SHARED EXTENTS              40000000
DS6PTRDS DS    XL5                 POINTER TO NEXT FORMAT 6 DSCB        40200000
DS6END   EQU   *                                                        40400000
&CTR     SETA  &CTR+1                                                   40600000
         AGO   .LOOP                                                    40800000
.ERROR   MNOTE 7,'***INCORRECT FORMAT NUMBER'                           41000000
.ENDOFIT MEND                                                           41200000
//
         MACRO                                                          GET00010
&NAME    GETMAIN &MODE,&LV=,&LA=,&A=,&SP=,&MF=I,&HIARCHY=,&BNDRY=       GET00020
         LCLA  &NO                                                      GET00030
         LCLB  &B,&C,&D,&E,&F                                           GET00040
         LCLC  &GNAME,&AA                                               GET00050
.*0000000400,012200,013000-013200,016800-017600,026600-026800      LC0A GET00060
.*    047000                                                       LC0A GET00070
&GNAME   SETC  'IHB'.'&SYSNDX'                                          GET00080
         AIF   (T'&SP NE 'N').SPOK                                      GET00090
         AIF   ('&SP'(1,1) EQ '(').SPOK                          XM1129 GET00100
         AIF   (&SP GT 255).ERROR11                                     GET00110
.SPOK    ANOP                                                           GET00120
         AIF   ('&MODE' EQ '' AND '&MF' EQ 'I').ERROR1                  GET00130
         AIF   ('&LV' NE '' AND '&LA' NE '').ERROR5                     GET00140
         AIF   ('&MODE' EQ '').CONT1                                    GET00150
         AIF   ('&MODE'(1,1) EQ 'E' AND '&LA' NE '').ERROR6             GET00160
         AIF   ('&MODE' EQ 'R' AND '&LA' NE '').ERROR6                  GET00170
         AIF   ('&BNDRY' NE '' AND '&BNDRY' NE 'DBLWD' AND '&BNDRY'    XGET00180
               NE 'PAGE').ERROR10                                       GET00190
         AIF   ('&BNDRY' EQ 'PAGE' AND '&MODE' EQ 'R').ERROR10          GET00200
         AIF   ('&MODE'(1,1) EQ 'L' AND '&LV' NE '').ERROR4             GET00210
         AIF   ('&MODE'(1,1) EQ 'V' AND '&LV' NE '').ERROR4             GET00220
         AIF   ('&HIARCHY' EQ '' OR '&HIARCHY' EQ '0' OR '&HIARCHY' EQ XGET00230
               '1').CONT1                                               GET00240
         IHBERMAC 195                                                   GET00250
         MEXIT                                                          GET00260
.CONT1   ANOP                                                           GET00270
         AIF   ('&MF' EQ 'L').LROUT                                     GET00280
         AIF   ('&MF' EQ 'I').IROUT                                     GET00290
         AIF   (N'&MF LE 1).ERROR2                                      GET00300
         AIF   ('&MF(1)' NE 'E').ERROR2                                 GET00310
&NAME    IHBINNRA &MF(2)                                                GET00320
.CONTA   AIF   ('&LV' EQ '').CONTB                                      GET00330
         AIF   ('&LV'(1,1) EQ '(').ISAREG                               GET00340
         AIF   (T'&LV EQ 'N').CONTAA                                    GET00350
.CONTBB  ANOP                                                           GET00360
         CNOP  0,4                                                      GET00370
         B     *+8                               BRANCH AROUND LENGTH   GET00380
         DC    A(&LV)                            LENGTH                 GET00390
         MVC   0(4,1),*-4                        MOVE LENGTH INTO LIST  GET00400
         AGO   .CONTB                                                   GET00410
.CONTAA  AIF   (&LV GT 4095).CONTBB                                     GET00420
         LA    14,&LV.(0,0)                      PICK UP LENGTH         GET00430
         ST    14,0(1,0)                         STORE INTO LIST        GET00440
         AGO   .CONTB                                                   GET00450
.ISAREG  ANOP                                                           GET00460
         ST    &LV(1),0(1,0)                     STORE LENGTH INTO LIST GET00470
.CONTB   AIF   ('&MODE' EQ '').CONTC                                    GET00480
         AIF   ('&MODE'(1,1) NE 'E' AND '&LV' NE '').ERROR4             GET00490
         AIF   ('&MODE' NE 'EC').ISAU                                   GET00500
         AIF   ('&BNDRY' NE 'PAGE').NOPGE1                              GET00510
         MVI   8(1),X'30' *            SET MODE TO EC ON PAGE BNDRY     GET00520
         AGO   .CONTC                                                   GET00530
.NOPGE1  ANOP                                                           GET00540
         MVI   8(1),X'20'                        SET MODE TO EC         GET00550
         AGO   .CONTC                                                   GET00560
.ISAU    AIF   ('&MODE' NE 'EU').CONTC                                  GET00570
         AIF   ('&BNDRY' NE 'PAGE').NOPGE2                              GET00580
         MVI   8(1),X'10' *            SET MODE TO EU ON PAGE BNDRY     GET00590
         AGO   .CONTC                                                   GET00600
.NOPGE2   ANOP                                                          GET00610
         MVI   8(1),X'00'                        SET MODE TO EU         GET00620
.CONTC   AIF   ('&LA' EQ '').CONTD                                      GET00630
         AIF   ('&LA'(1,1) EQ '(').ISAREGA                              GET00640
         LA    14,&LA                            PICK UP LIST ADDRESS   GET00650
         ST    14,0(1,0)                         STORE INTO PARAM LIST  GET00660
         AGO   .CONTD                                                   GET00670
.ISAREGA ST    &LA(1),0(1,0)                     STORE LA IN PARAM LIST GET00680
.CONTD   AIF   ('&MODE' EQ '').CONTE                                    GET00690
         AIF   ('&MODE' EQ 'EU' OR '&MODE' EQ 'EC').CONTE               GET00700
         AIF   ('&MODE' NE 'LC').CONTF                                  GET00710
         AIF   ('&BNDRY' NE 'PAGE').NOPGE3                              GET00720
         MVI   8(1),X'B0' *            SET MODE TO LC ON PAGE BNDRY     GET00730
         AGO   .CONTE                                                   GET00740
.NOPGE3  ANOP                                                           GET00750
         MVI   8(1),X'A0'                        SET MODE TO LC         GET00760
         AGO   .CONTE                                                   GET00770
.CONTF   AIF   ('&MODE' NE 'LU').CONTG                                  GET00780
         AIF   ('&BNDRY' NE 'PAGE').NOPGE4                              GET00790
         MVI   8(1),X'90' *            SET MODE TO LU ON PAGE BNDRY     GET00800
         AGO   .CONTE                                                   GET00810
.NOPGE4  ANOP                                                           GET00820
         MVI   8(1),X'80'                        SET MODE TO LU         GET00830
         AGO   .CONTE                                                   GET00840
.CONTG   AIF   ('&MODE' NE 'VC').CONTH                                  GET00850
         AIF   ('&BNDRY' NE 'PAGE').NOPGE5                              GET00860
         MVI   8(1),X'F0' *             SET MODE TO VC ON PAGE BNDRY    GET00870
         AGO   .CONTE                                                   GET00880
.NOPGE5  ANOP                                                           GET00890
         MVI  8(1),X'E0'                         SET MODE TO VC         GET00900
         AGO   .CONTE                                                   GET00910
.CONTH   AIF   ('&MODE' NE 'VU').ERROR7                                 GET00920
         AIF   ('&BNDRY' NE 'PAGE').NOPGE6                              GET00930
         MVI   8(1),X'D0' *            SET MODE TO VU ON PAGE BNDRY     GET00940
         AGO   .CONTE                                                   GET00950
.NOPGE6  ANOP                                                           GET00960
         MVI   8(1),X'C0'                        SET MODE TO VU         GET00970
.CONTE   AIF   ('&A' EQ '').HID                                         GET00980
         AIF   ('&A'(1,1) EQ '(').ISAREGB                               GET00990
         LA    14,&A                             LOAD AREA LIST ADDRESS GET01000
         ST    14,4(1,0)                         STORE INTO PARAM LIST  GET01010
         AGO   .HID                                                     GET01020
.ISAREGB ST    &A(1),4(1,0)                      STORE INTO PARAM LIST  GET01030
.HID     AIF   ('&HIARCHY' EQ '').CONTI                                 GET01040
         MVI   4(1),&HIARCHY                     MOVE IN HIAR BYTE      GET01050
.CONTI   AIF   ('&SP' EQ '').FINI                                       GET01060
         AIF   ('&SP'(1,1) EQ '(').ISAREGC                              GET01070
         MVI   9(1),&SP                          MOVE IN SUBPOOL VALUE  GET01080
         AGO   .FINI                                                    GET01090
.ISAREGC STC   &SP(1),9(1,0)                     STORE SUBPOOL VALUE    GET01100
.FINI    SVC   4                                 ISSUE GETMAIN SVC      GET01110
         MEXIT                                                          GET01120
.LROUT   AIF   ('&LV' EQ  '').CONTJ                                     GET01130
         AIF   ('&LV'(1,1) EQ '(').ERROR3                               GET01140
&NAME    DC    A(&LV)                            LENGTH                 GET01150
         AGO   .CONTL                                                   GET01160
.CONTJ   AIF   ('&LA' EQ '').CONTK                                      GET01170
         AIF   ('&LA'(1,1) EQ '(').ERROR3                               GET01180
&NAME    DC    A(&LA)                            ADDR. OF LENGTH LIST   GET01190
         AGO   .CONTL                                                   GET01200
.CONTK   ANOP                                                           GET01210
&NAME    DC   A(0)                               LA OR LU               GET01220
.CONTL   AIF   ('&HIARCHY' EQ '').NOHID                                 GET01230
         DC    AL1(&HIARCHY)                                            GET01240
         AGO   .CONTLL                                                  GET01250
.NOHID   DC    AL1(0)                            HIARCHY FILL           GET01260
.CONTLL  AIF   ('&A' EQ '').CONTM                                       GET01270
         AIF   ('&A'(1,1) EQ '(').ERROR3                                GET01280
         DC    AL3(&A)                           ADDR. OF ADDR. LIST    GET01290
         AGO   .CONTN                                                   GET01300
.CONTM   DC    AL3(0)                            ADDR. OF ADDR. LIST    GET01310
.CONTN   AIF   ('&MODE' EQ '').CONTO                                    GET01320
         AIF   ('&MODE' NE 'EC').CONTQ                                  GET01330
         AIF   ('&BNDRY' NE 'PAGE').NOPG1                               GET01340
         DC    X'30' *                 EC ON PAGE BOUNDARY              GET01350
         AGO   .CONTSP                                                  GET01360
.NOPG1   ANOP                                                           GET01370
         DC    X'20'                             EC MODE                GET01380
         AGO   .CONTSP                                                  GET01390
.CONTQ   AIF   ('&MODE' NE 'EU').CONTP                                  GET01400
         AIF   ('&BNDRY' NE 'PAGE').NOPG2                               GET01410
         DC    X'10' *                 EU ON PAGE BOUNDARY              GET01420
         AGO   .CONTSP                                                  GET01430
.NOPG2   ANOP                                                           GET01440
         DC    X'00'                             EU MODE                GET01450
         AGO   .CONTSP                                                  GET01460
.CONTP   AIF   ('&MODE' NE 'LC').CONTS                                  GET01470
         AIF   ('&BNDRY' NE 'PAGE').NOPG3                               GET01480
         DC    X'B0' *                 LC ON PAFE BOUNDARY              GET01490
         AGO   .CONTSP                                                  GET01500
.NOPG3   ANOP                                                           GET01510
         DC    X'A0'                             LC MODE                GET01520
         AGO   .CONTSP                                                  GET01530
.CONTS   AIF   ('&MODE' NE 'LU').CONTR                                  GET01540
         AIF   ('&BNDRY' NE 'PAGE').NOPG4                               GET01550
         DC    X'90' *                 LU ON PAGE BOUNDARY              GET01560
         AGO   .CONTSP                                                  GET01570
.NOPG4   ANOP                                                           GET01580
         DC    X'80'                             LU MODE                GET01590
         AGO   .CONTSP                                                  GET01600
.CONTR   AIF   ('&MODE' NE 'VC').CONTT                                  GET01610
         AIF   ('&BNDRY' NE 'PAGE').NOPG5                               GET01620
         DC    X'F0' *                 VC ON PAGE BOUNDARY              GET01630
         AGO   .CONTSP                                                  GET01640
.NOPG5   ANOP                                                           GET01650
         DC    X'E0'                             VC MODE                GET01660
         AGO   .CONTSP                                                  GET01670
.CONTT   AIF   ('&MODE' NE 'VU').ERROR7                                 GET01680
         AIF   ('&BNDRY' NE 'PAGE').NOPG6                               GET01690
         DC    X'D0' *                 VU ON PAGE BOUNDARY              GET01700
         AGO   .CONTSP                                                  GET01710
.NOPG6   ANOP                                                           GET01720
         DC    X'C0'                             VU MODE                GET01730
         AGO   .CONTSP                                                  GET01740
.CONTO   AIF   ('&BNDRY' NE 'PAGE').CONTPG                              GET01750
         DC    X'10' *                 SET MODE ON PAGE BNDRY           GET01760
         AGO   .CONTSP                                                  GET01770
.CONTPG  DC    X'00' *                 MODE                             GET01780
.CONTSP  AIF   ('&SP' EQ '').CONTU                                      GET01790
         AIF   ('&SP'(1,1) EQ '(').ERROR3                               GET01800
         DC    AL1(&SP)                          SUBPOOL VALUE          GET01810
         AGO   .FINISH                                                  GET01820
.CONTU   DC    AL1(0)                            SUBPOOL VALUE          GET01830
.FINISH  MEXIT                                                          GET01840
.IROUT   AIF   ('&MODE' EQ 'R').RROUT                                   GET01850
         AIF   ('&LV' EQ '' AND '&LA' EQ '').ERROR8                     GET01860
         CNOP  0,4                                                      GET01870
&NAME    BAL   1,*+14                            BRANCH AROUND LIST     GET01880
         AIF   ('&LV' EQ '').CNTA                                       GET01890
         AIF   ('&LV'(1,1) EQ '(').CNTB                                 GET01900
         DC    A(&LV)                            LENGTH                 GET01910
         AGO   .CNTC                                                    GET01920
.CNTB    DC    A(0)                              LENGTH                 GET01930
&B       SETB  1                                                        GET01940
         AGO   .CNTC                                                    GET01950
.CNTA    AIF   ('&LA'(1,1) EQ '(').CNTD                                 GET01960
         DC    A(&LA)                            ADDR. OF LENGTH LIST   GET01970
         AGO   .CNTC                                                    GET01980
.CNTD    DC    A(0)                              ADDR. OF LENGTH LIST   GET01990
&C       SETB  1                                                        GET02000
.CNTC    AIF   ('&A' EQ '').ERROR8                                      GET02010
         AIF   ('&A'(1,1) EQ '(').CNTE                                  GET02020
         AIF   ('&HIARCHY' EQ '' OR '&HIARCHY' EQ '0').CONTCCC          GET02030
.CNTCC   DC    AL1(&HIARCHY)                     HIAR BYTE              GET02040
         DC    AL3(&A)                           ADDR. OF ADDR. LIST    GET02050
         AGO   .CNTF                                                    GET02060
.CONTCCC DC    A(&A)                  ADDR. OF ADDR. LIST               GET02070
         AGO   .CNTF                                                    GET02080
.CNTE    DC    A(0)                              ADDR. OF ADDR. LIST    GET02090
&D       SETB  1                                                        GET02100
.CNTF    AIF   ('&MODE' NE 'EU').CNTG                                   GET02110
         AIF   ('&BNDRY' NE 'PAGE').NOPG10                              GET02120
         DC    X'10' *                 EU ON PAGE BOUNDARY              GET02130
         AGO   .CNTSP                                                   GET02140
.NOPG10  ANOP                                                           GET02150
         DC    X'00'                             EU MODE                GET02160
         AGO   .CNTSP                                                   GET02170
.CNTG    AIF   ('&MODE' NE 'EC').CNTH                                   GET02180
         AIF   ('&BNDRY' NE 'PAGE').NOPG11                              GET02190
         DC    X'30' *                 EC ON PAGE BOUNDARY              GET02200
         AGO   .CNTSP                                                   GET02210
.NOPG11  ANOP                                                           GET02220
         DC    X'20'                             EC MODE                GET02230
         AGO   .CNTSP                                                   GET02240
.CNTH    AIF   ('&MODE' NE 'LU').CNTI                                   GET02250
         AIF   ('&BNDRY' NE 'PAGE').NOPG12                              GET02260
         DC    X'90' *                 LU ON PAGE BOUNDARY              GET02270
         AGO   .CNTSP                                                   GET02280
.NOPG12  ANOP                                                           GET02290
         DC    X'80'                             LU MODE                GET02300
         AGO   .CNTSP                                                   GET02310
.CNTI    AIF   ('&MODE' NE 'LC').CNTJ                                   GET02320
         AIF   ('&BNDRY' NE 'PAGE').NOPG13                              GET02330
         DC    X'B0' *                 LC ON PAGE BOUNDARY              GET02340
         AGO   .CNTSP                                                   GET02350
.NOPG13  ANOP                                                           GET02360
         DC    X'A0'                             LC MODE                GET02370
         AGO   .CNTSP                                                   GET02380
.CNTJ    AIF   ('&MODE' NE 'VU').CNTK                                   GET02390
         AIF   ('&BNDRY' NE 'PAGE').NOPG14                              GET02400
         DC    X'D0' *                 VU ON PAGE BOUNDARY              GET02410
         AGO   .CNTSP                                                   GET02420
.NOPG14  ANOP                                                           GET02430
         DC   X'C0'                              VU MODE                GET02440
         AGO   .CNTSP                                                   GET02450
.CNTK    AIF   ('&MODE' NE 'VC').ERROR7                                 GET02460
         AIF   ('&BNDRY' NE 'PAGE').NOPG15                              GET02470
         DC    X'F0' *                 VC ON PAGE BOUNDARY              GET02480
         AGO   .CNTSP                                                   GET02490
.NOPG15  ANOP                                                           GET02500
         DC   X'E0'                              VC MODE                GET02510
.CNTSP   AIF   ('&SP' EQ '').CNTL                                       GET02520
         AIF   ('&SP'(1,1) EQ '(').ISAREGQ                              GET02530
         DC    AL1(&SP)                          SUBPOOL VALUE          GET02540
         AGO   .CNTM                                                    GET02550
.ISAREGQ DC    AL1(0)                            SUBPOOL VALUE          GET02560
         STC   &SP(1),9(1,0)                     STORE SP INTO LIST     GET02570
         AGO   .CNTM                                                    GET02580
.CNTL    DC    AL1(0)                            SUBPOOL VALUE          GET02590
.CNTM    AIF   (NOT &B).CNTN                                            GET02600
         ST    &LV(1),0(1,0)                     STORE LENGTH INTO LIST GET02610
         AGO   .CNTO                                                    GET02620
.CNTN    AIF   (NOT &C).CNTO                                            GET02630
         ST    &LA(1),0(1,0)                     STORE LA INTO LIST     GET02640
.CNTO    AIF   (NOT &D).CNTP                                            GET02650
         ST    &A(1),4(1,0)                      STORE INTO PARAM LIST  GET02660
         AIF   ('&HIARCHY' EQ '' OR '&HIARCHY' EQ '0').CNTP             GET02670
         MVI   4(1),&HIARCHY                     MOVE IN HIAR BYTE      GET02680
.CNTP    SVC   4                                 ISSUE GETMAIN SVC      GET02690
         MEXIT                                                          GET02700
.RROUT   AIF   ('&A' NE '').ERROR9                                      GET02710
         AIF   ('&LV'(1,1) EQ '(').ISARGA                               GET02720
         AIF   ('&SP' EQ '').CTUA                                       GET02730
         AIF   ('&SP'(1,1) EQ '(').ISARGB                               GET02740
         CNOP  0,4                                                      GET02750
&NAME    BAL   1,*+8                             BRANCH AROUND SP+LV    GET02760
         DC    AL1(&SP)                          SUBPOOL VALUE          GET02770
         DC    AL3(&LV)                          LENGTH                 GET02780
         L     0,0(1,0)                          LOAD SP AND LV         GET02790
         AIF   ('&HIARCHY' EQ '1').CONTHH                               GET02800
         SVC   10                                ISSUE GETMAIN SVC      GET02810
         MEXIT                                                          GET02820
.CTUA    AIF   (T'&LV EQ 'N').CONTCC                                    GET02830
.CTUAA   CNOP  0,4                                                      GET02840
&NAME    BAL   1,*+8                             BRANCH AROUND LENGTH   GET02850
         DC    A(&LV)                            LENGTH                 GET02860
         L     0,0(1,0)                          LOAD LENGTH            GET02870
         AIF   ('&HIARCHY' EQ '1').CONTHH                               GET02880
         SVC   10                                ISSUE GETMAIN SVC      GET02890
         MEXIT                                                          GET02900
.CONTCC  AIF   (&LV GT 4095).CTUAA                                      GET02910
&NAME    LA    0,&LV.(0,0)                       LOAD LENGTH            GET02920
         AIF   ('&HIARCHY' EQ '1').CONTHH                               GET02930
         BAL   1,*+4                             INDICATE GETMAIN       GET02940
         SVC   10                                ISSUE GETMAIN SVC      GET02950
         MEXIT                                                          GET02960
.ISARGB  AIF   (T'&LV EQ 'N').CONTEE                                    GET02970
.CONTFF  CNOP  0,4                                                      GET02980
&NAME    BAL   1,*+8                             BRANCH AROUND LENGTH   GET02990
         DC    A(&LV)                            LENGTH                 GET03000
         LR    0,&SP(1)                          PICK UP SUBPOOL        GET03010
         SLL   0,24(0)                           SHIFT TO HI-ORDER BYTE GET03020
         O     0,0(1,0)                          PACK SP AND LV         GET03030
         AIF   ('&HIARCHY' EQ '1').CONTHH                               GET03040
         SVC   10                                ISSUE GETMAIN SVC      GET03050
         MEXIT                                                          GET03060
.CONTEE  AIF   (&LV GT 4095).CONTFF                                     GET03070
&NAME    LR    0,&SP(1)                          PICK UP SUBPOOL        GET03080
         SLL   0,24(0)                           SHIFT TO HI-ORDER BYTE GET03090
         LA    1,&LV.(0,0)                       LOAD LENGTH            GET03100
         OR    0,1                               PACK SP AND LV         GET03110
         AIF   ('&HIARCHY' EQ '1').CONTHH                               GET03120
         BAL   1,*+4                             INDICATE GETMAIN       GET03130
         SVC   10                                ISSUE GETMAIN SVC      GET03140
         MEXIT                                                          GET03150
.ISARGA  AIF   ('&LV(1)' EQ '0').ZEROUT                                 GET03160
         AIF   ('&SP' EQ '').CTUB                                       GET03170
         AIF   ('&SP'(1,1) EQ '(').ISARGC                               GET03180
&NAME    LA    0,&SP.(0,0)                       PICK UP SUBPOOL        GET03190
         SLL   0,24(0)                           SHIFT TO HI-ORDER BYTE GET03200
         OR    0,&LV(1)                          PACK SP AND LV         GET03210
         AIF   ('&HIARCHY' EQ '1').CONTHH                               GET03220
         BAL   1,*+4                             INDICATE GETMAIN       GET03230
         SVC   10                                ISSUE GETMAIN SVC      GET03240
         MEXIT                                                          GET03250
.CTUB    ANOP                                                           GET03260
&NAME    LR    0,&LV(1)                          LOAD LENGTH            GET03270
         AIF   ('&HIARCHY' EQ '1').CONTHH                               GET03280
         BAL  1,*+4                              INDICATE GETMAIN       GET03290
         SVC   10                                ISSUE GETMAIN SVC      GET03300
         MEXIT                                                          GET03310
.CONTHH  CNOP  0,4                                                      GET03320
         L     1,*+8                             PUT NEG. LCS IN R1     GET03330
         BC    15,*+8                                                   GET03340
         DC    XL4'80D3C3E3'                                            GET03350
         SVC   10                                                       GET03360
         MEXIT                                                          GET03370
.ISARGC  ANOP                                                           GET03380
&NAME    LR    0,&SP(1)                          PICK UP SUBPOOL        GET03390
         SLL   0,24(0)                           SHIFT TO HI-ORDER BYTE GET03400
         OR    0,&LV(1)                          PACK SP AND LV         GET03410
         AIF   ('&HIARCHY' EQ '1').CONTHH                               GET03420
         BAL   1,*+4                             INDICATE GETMAIN       GET03430
         SVC   10                                ISSUE GETMAIN SVC      GET03440
         MEXIT                                                          GET03450
.ZEROUT  ANOP                                                           GET03460
         AIF   ('&HIARCHY' EQ '1').HIAREG                               GET03470
&NAME    BAL   1,*+4                             INDICATE GETMAIN       GET03480
         SVC   10                                ISSUE GETMAIN SVC      GET03490
         AGO   .CONTGG                                                  GET03500
.HIAREG  ANOP                                                           GET03510
         CNOP  0,4                                                      GET03520
&NAME    L     1,*+8                             PUT NEG. LCS IN R1     GET03530
         BC    15,*+8                                                   GET03540
         DC    X'80D3C3E3'                                              GET03550
         SVC   10                                                       GET03560
.CONTGG  AIF   ('&SP' EQ '').EXIT                                       GET03570
         IHBERMAC 92                                                    GET03580
.EXIT    MEXIT                                                          GET03590
.ERROR1  IHBERMAC 17                                                    GET03600
         MEXIT                                                          GET03610
.ERROR2  IHBERMAC 35,,&MF                                               GET03620
         MEXIT                                                          GET03630
.ERROR3  IHBERMAC 69                                                    GET03640
         MEXIT                                                          GET03650
.ERROR4  IHBERMAC 89                                                    GET03660
         MEXIT                                                          GET03670
.ERROR5  IHBERMAC 91                                                    GET03680
         MEXIT                                                          GET03690
.ERROR6  IHBERMAC 90                                                    GET03700
         MEXIT                                                          GET03710
.ERROR7  IHBERMAC 45,,&MODE                                             GET03720
         MEXIT                                                          GET03730
.ERROR8  IHBERMAC 01                                                    GET03740
         MEXIT                                                          GET03750
.ERROR9  IHBERMAC 93                                                    GET03760
         MEXIT                                                          GET03770
.ERROR10 MNOTE 12,'***  INVALID BOUNDARY PARAMETER SPECIFIED'           GET03780
         MEXIT                                                          GET03790
.ERROR11 IHBERMAC 1001,SP,&SP                                           GET03800
         MEND                                                           GET03810
//
         MACRO                                                          MOD00010
&NAME    MODESET &KEY=,&MODE=,&ENABLE=,&SYSMASK=,&REG=,&MF=             MOD00020
         LCLA  &COUNT,&SAVE1,&SAVE2                                     MOD00030
.* THE FOLLOWING ARE THE LOCAL SET SYMBOLS FOR THE 4 BYTE PARM LIST     MOD00040
         LCLB  &B0,&B1,&B2,&B3,&B4,&B5,&B6,&B7                          MOD00050
         LCLB  &B8,&B9,&B10,&B11,&B12,&B13,&B14,&B15                    MOD00060
         LCLB  &B16,&B17,&B18,&B19,&B20,&B21,&B22,&B23                  MOD00070
         LCLB  &B24,&B25,&B26,&B27,&B28,&B29,&B30,&B31                  MOD00080
         LCLC  &A,&B                                                    MOD00090
         AIF  ((T'&KEY EQ 'O') AND (T'&MODE EQ 'O') AND (T'&ENABLE EQ 'XMOD00100
               O') AND (T'&SYSMASK EQ 'O') AND (T'&MF EQ 'O') AND (T'&RXMOD00110
               EG EQ 'O')).ERROR9                                       MOD00120
         AIF   ('&REG' EQ '(1)').REG   REG PARAMETER SPECIFIED          MOD00130
         AIF   (T'&REG NE 'O').ERROR1  WRONG REG SPECIFIED              MOD00140
         AIF   ((T'&MF NE 'O') AND ('&MF' NE 'L')).MF                   MOD00150
         AIF   (T'&KEY EQ 'O').MDE     KEY NOT SPECIFIED                MOD00160
         AIF   (('&KEY' NE 'ZERO') AND ('&KEY' NE 'NZERO')).ERROR2      MOD00170
&B26     SETB  1                                                        MOD00180
&B27     SETB  ('&KEY' EQ 'ZERO')      SET 0 KEY IF ZERO SPECIFIED      MOD00190
.MDE     ANOP                                                           MOD00200
         AIF   (T'&MODE EQ 'O').ENAB   MODE NOT SPECIFIED               MOD00210
         AIF   (('&MODE' NE 'PROB') AND ('&MODE' NE 'SUP')).ERROR3      MOD00220
&B29     SETB  1                                                        MOD00230
&B28     SETB  ('&MODE' EQ 'SUP')      INDICATE SUPV STATE IF SUP SPEC  MOD00240
.ENAB    ANOP                                                           MOD00250
         AIF   (T'&ENABLE EQ 'O').SMSK ENABLE OPERAND NOT SPECIFIED     MOD00260
         AIF   (('&ENABLE' NE 'YES') AND ('&ENABLE' NE 'NO')).ERROR4    MOD00270
&B30     SETB  1                                                        MOD00280
&B31     SETB  ('&ENABLE' EQ 'NO')     INDICATE DISABLE IF REQUESTED    MOD00290
.SMSK    ANOP                                                           MOD00300
         AIF   (T'&SYSMASK EQ 'O').MF  SYSMASK NOT SPECIFIED            MOD00310
         AIF   ('&SYSMASK'(1,1) NE '(').ERROR5                          MOD00320
.AGAIN   ANOP                                                           MOD00330
&COUNT   SETA  &COUNT+1                                                 MOD00340
&B5      SETB  ('&SYSMASK(&COUNT)' EQ 'RELOC=YES')                      MOD00350
&B6      SETB  ('&SYSMASK(&COUNT)' EQ 'IO=YES')                         MOD00360
&B7      SETB  ('&SYSMASK(&COUNT)' EQ 'EXT=YES')                        MOD00370
&B13     SETB  ('&SYSMASK(&COUNT)' EQ 'RELOC=NO')                       MOD00380
&B14     SETB  ('&SYSMASK(&COUNT)' EQ 'IO=NO')                          MOD00390
&B15     SETB  ('&SYSMASK(&COUNT)' EQ 'EXT=NO')                         MOD00400
&SAVE1   SETA  &SAVE1+(&B5*4)+(&B6*2)+(&B7)                             MOD00410
&SAVE2   SETA  &SAVE2+(&B13*4)+(&B14*2)+(&B15)                          MOD00420
         AIF   (&B5+&B6+&B7+&B13+&B14+&B15 NE 1).ERROR5                 MOD00430
         AIF   (&COUNT NE N'&SYSMASK).AGAIN  WAS THAT THE LAST ONE?     MOD00440
&B24     SETB  (&SAVE1 GT 0)                                            MOD00450
&B25     SETB  (&SAVE2 GT 0)                                            MOD00460
         AIF   (&B25).INVERT           INVERT THE AND MASK              MOD00470
         AGO   .SET3                                                    MOD00480
.INVERT  ANOP                                                           MOD00490
&SAVE2   SETA  255-&SAVE2              INVERT THE AND MASK              MOD00500
.SET3    ANOP                                                           MOD00510
&B5      SETB  (&SAVE1-4 GE 0)                                          MOD00520
&SAVE1   SETA  (&SAVE1-(&B5*4))                                         MOD00530
&B6      SETB  (&SAVE1-2 GE 0)                                          MOD00540
&SAVE1   SETA  (&SAVE1-(&B6*2))                                         MOD00550
&B7      SETB  (&SAVE1-1 GE 0)                                          MOD00560
&SAVE1   SETA  (&SAVE1-&B6)                                             MOD00570
&B8      SETB  (&SAVE2-128 GE 0)                                        MOD00580
&SAVE2   SETA  (&SAVE2-(&B8*128))                                       MOD00590
&B9      SETB  (&SAVE2-64 GE 0)                                         MOD00600
&SAVE2   SETA  (&SAVE2-(&B9*64))                                        MOD00610
&B10     SETB  (&SAVE2-32 GE 0)                                         MOD00620
&SAVE2   SETA  (&SAVE2-(&B10*32))                                       MOD00630
&B11     SETB  (&SAVE2-16 GE 0)                                         MOD00640
&SAVE2   SETA  (&SAVE2-(&B11*16))                                       MOD00650
&B12     SETB  (&SAVE2-8 GE 0)                                          MOD00660
&SAVE2   SETA  (&SAVE2-(&B12*8))                                        MOD00670
&B13     SETB  (&SAVE2-4 GE 0)                                          MOD00680
&SAVE2   SETA  (&SAVE2-(&B13*4))                                        MOD00690
&B14     SETB  (&SAVE2-2 GE 0)                                          MOD00700
&SAVE2   SETA  (&SAVE2-(&B14*2))                                        MOD00710
&B15     SETB  (&SAVE2-1 GE 0)                                          MOD00720
.MF      ANOP                                                           MOD00730
         AIF   (T'&MF NE 'O').CK2      WAS MF OMITTED?                  MOD00740
         CNOP  0,4                                                      MOD00750
&NAME    BAL   1,*+8                                                    MOD00760
         AGO   .DC                                                      MOD00770
.CK2     ANOP                                                           MOD00780
         AIF   ('&MF' NE 'L').CK3      WAS MF=L SPECIFIED?              MOD00790
&NAME    DS    0F                                                       MOD00800
.DC      ANOP                                                           MOD00810
         DC    B'&B0&B1&B2&B3&B4&B5&B6&B7&B8&B9&B10&B11&B12&B13&B14&B15XMOD00820
               &B16&B17&B18&B19&B20&B21&B22&B23&B24&B25&B26&B27&B28&B29XMOD00830
               &B30&B31'                                                MOD00840
         AIF   (T'&MF EQ 'O').LD                                        MOD00850
         MEXIT                                                          MOD00860
.LD      ANOP                                                           MOD00870
         L     1,0(0,1)                                          XM4571 MOD00880
         AGO   .SVC                                                     MOD00890
.CK3     ANOP                                                           MOD00900
         AIF   ('&MF(1)' EQ 'E').CK4                                    MOD00910
         AGO   .ERROR6                                                  MOD00920
.CK4     ANOP                                                           MOD00930
         AIF  ((T'&KEY NE 'O') OR (T'&MODE NE 'O') OR (T'&ENABLE NE 'O'XMOD00940
               ) OR (T'&SYSMASK NE 'O') OR (T'&REG NE 'O')).ERROR8      MOD00950
.CK6     AIF   ('&MF(2)' NE '(1)').CK5                                  MOD00960
&NAME    L     1,0(1,0)                                          XM4571 MOD00970
         AGO   .SVC                                                     MOD00980
.CK5     ANOP                                                           MOD00990
         AIF   ('&MF(2)'(1,1) EQ '(').ERROR1                            MOD01000
         AIF   (T'&MF(2) EQ 'N').ERROR1                                 MOD01010
&NAME    L     1,&MF(2)                                                 MOD01020
         AGO   .SVC                                                     MOD01030
.REG     AIF  ((T'&KEY EQ 'O') AND (T'&MODE EQ 'O') AND (T'&ENABLE EQ 'XMOD01040
               O') AND (T'&SYSMASK EQ 'O') AND (T'&MF EQ 'O')).SVC1     MOD01050
.* IF REG (1) SPECIFIED AND ALL OTHERS OMITTED, GENERATE SVC            MOD01060
&A       SETC  'REG'                                                    MOD01070
         AGO   .M1                                                      MOD01080
.SVC1    ANOP                                                           MOD01090
&NAME    SVC   107                                                      MOD01100
         MEXIT                                                          MOD01110
.SVC     ANOP                                                           MOD01120
         SVC   107                                                      MOD01130
         MEXIT                                                          MOD01140
.ERROR1  ANOP                                                           MOD01150
&A       SETC  'REG'                                                    MOD01160
&B       SETC  '&REG'                                                   MOD01170
.M2      ANOP                                                           MOD01180
         MNOTE 12,'***  IHB002 INVALID &A SPECIFIED-&B'                 MOD01190
         MEXIT                                                          MOD01200
.ERROR2  ANOP                                                           MOD01210
&A       SETC  'KEY'                                                    MOD01220
&B       SETC  '&KEY'                                                   MOD01230
         AGO   .M2                                                      MOD01240
.ERROR3  ANOP                                                           MOD01250
&A       SETC  'MODE'                                                   MOD01260
&B       SETC  '&MODE'                                                  MOD01270
       AGO   .M2                                                        MOD01280
.ERROR4  ANOP                                                           MOD01290
&A       SETC  'ENABLE'                                                 MOD01300
&B       SETC  '&ENABLE'                                                MOD01310
         AGO   .M2                                                      MOD01320
.ERROR5  ANOP                                                           MOD01330
&A       SETC  'SYSMASK'                                                MOD01340
&B       SETC  '&SYSMASK(&COUNT)'                                       MOD01350
         AGO   .M2                                                      MOD01360
.ERROR6  ANOP                                                           MOD01370
&A       SETC  'MF'                                                     MOD01380
&B       SETC  '&MF'                                                    MOD01390
         AGO   .M2                                                      MOD01400
.ERROR8  ANOP                                                           MOD01410
&A       SETC  'MF=E'                                                   MOD01420
.M1      ANOP                                                           MOD01430
         MNOTE 12,'***  IHB237 &A SPECIFIED WITH OTHER OPERAND(S).'     MOD01440
         MEXIT                                                          MOD01450
.ERROR9  ANOP                                                           MOD01460
         MNOTE 12,'***  IHB004 REQUIRED OPERAND NOT SPECIFIED'          MOD01470
         MEND                                                           MOD01480
//
         MACRO                                                          PRO00010
&NAME    PROGRAM &BASE,&SAVE=SAVE,&EXIT=EXIT,&EXN=,&WTO=NO,&RENT=NO,   .PRO00020
               &VER=,&ROUTCDE=2,&REGEQ=YES,&WORKA=0,&SP=0,&DATE=YES     PRO00030
.*       NOTE... THIS MACRO USES GLOBALS &SYSDATE AND &SYSTIME          PRO00040
.*               WHICH ARE ONLY AVAILABLE IN ASSEMBLERS XF AND H        PRO00050
         GBLB  &REGEQS                                                  PRO00060
         LCLA  &A,&B,&C,&D,&E,&F                                        PRO00070
         LCLB  &FAIL,&B13                                               PRO00080
         LCLC  &GNAM                                                    PRO00090
&GNAM    SETC  'IHB'.'&SYSNDX'                                          PRO00100
&FAIL    SETB  0                                                        PRO00110
&D       SETA  K'&NAME                                                  PRO00120
&F       SETA  72+(8*&WORKA)                                            PRO00130
         AIF   ('&DATE' EQ 'NO').T0                                     PRO00140
&D       SETA  &D+15                                                    PRO00150
.T0      AIF   (T'&VER EQ 'O').T1                                       PRO00160
&D       SETA  &D-1+K'&VER                                              PRO00170
.T1      AIF   ('&NAME' NE '').T2                                       PRO00180
.E1      MNOTE 12,'CSECT NAME IS REQUIRED'                              PRO00190
&FAIL    SETB  1                                                        PRO00200
.T2      AIF   (N'&BASE GE 1).T3                                        PRO00210
.E2      MNOTE 12,'AT LEAST ONE BASE REG IN RANGE 2-12 MUST BE SPECIFIE.PRO00220
               D'                                                       PRO00230
&FAIL    SETB  1                                                        PRO00240
.T3      AIF   (N'&BASE LE 11).T4                                       PRO00250
.E3      MNOTE 12,'MORE THAN 11 REGISTERS SPECIFIED IN &BASE'           PRO00260
&FAIL    SETB  1                                                        PRO00270
.T4      AIF   (&BASE(1) NE 13).TEST                                    PRO00280
&B13     SETB  1                                                        PRO00290
&A       SETA  2                                                        PRO00300
         AIF   ('&RENT' EQ 'YES').E5                                    PRO00310
         AGO   .TEST2                                                   PRO00320
.TEST    ANOP                                                           PRO00330
&A       SETA  1                                                        PRO00340
.TEST1   AIF   (&BASE(&A) LT 2 OR &BASE(&A) GT 12).E4                   PRO00350
&A       SETA  &A+1                                                     PRO00360
.TEST2   ANOP                                                           PRO00370
         AIF   (&A LE N'&BASE).TEST1                                    PRO00380
         AIF   (&FAIL).END                                              PRO00390
&NAME    CSECT                                                          PRO00400
         USING &NAME,15                TEMPORARY BASE REG               PRO00410
         B     &GNAM.A                 BRANCH AROUND NAME               PRO00420
         DC    AL1(&D)                 COUNT                            PRO00430
         DC    C'&NAME'                NAME                             PRO00440
         AIF   ('&DATE' EQ 'NO').NODAT                                  PRO00450
         DC    C' &SYSDATE &SYSTIME'   DATE-TIME OF ASSEMBLY            PRO00460
.NODAT   AIF   (T'&VER EQ 'O').NOVER                                    PRO00470
         DC    C' ',C&VER              VERSION                          PRO00480
.NOVER   ANOP                                                           PRO00490
&GNAM.A  STM   14,12,12(13)            SAVE REGS                        PRO00500
         AIF   ('&RENT' EQ 'YES').RENT1                                 PRO00510
         LR    14,13                   CHAIN SAVE AREAS                 PRO00520
         ST    13,&SAVE.+4                                              PRO00530
         LA    13,&SAVE                                                 PRO00540
         ST    13,8(14)                FOR & BACK CHAINING              PRO00550
         AGO   .RENT2                                                   PRO00560
.RENT1   ANOP                                                           PRO00570
         LR    &BASE(1),13             CHAIN SAVE AREAS                 PRO00580
         MNOTE  *,'       GETMAIN  R,LV=&F,SP=&SP      GET A SAVE AREA' PRO00590
         GETMAIN  R,LV=&F,SP=&SP       GET A SAVE AREA                  PRO00600
         ST    &BASE(1),4(1)                                            PRO00610
         LR    13,1                                                     PRO00620
         LM    14,1,12(&BASE(1))       RESTORE REG 14,15,0 & 1          PRO00630
         ST    13,8(&BASE(1))          FOR & BACK CHAINING              PRO00640
.RENT2   ANOP                                                           PRO00650
         DROP  15                      RELEASE TEMP BASE                PRO00660
         AIF   (&B13).ISB13                                             PRO00670
         LR    &BASE(1),15                                              PRO00680
         USING &NAME,&BASE(1)          FIRST BASE REG                   PRO00690
         AGO   .NOTB13                                                  PRO00700
.ISB13   USING &SAVE,13                BASE REGISTER                    PRO00710
.NOTB13  ANOP                                                           PRO00720
&A       SETA  1                                                        PRO00730
.LOOP1   AIF   (N'&BASE EQ &A).OUT                                      PRO00740
&A       SETA  &A+1                                                     PRO00750
&B       SETA  (&A-2)*4                                                 PRO00760
&C       SETA  4096*(&A-1)                                              PRO00770
         L     &BASE(&A),&GNAM.+&B     LOAD NEXT BASE                   PRO00780
         USING &NAME.+&C,&BASE(&A)                                      PRO00790
         AGO   .LOOP1                                                   PRO00800
.OUT     AIF   ('&EXN' EQ '').OUT1                                      PRO00810
         B     &EXN                                                     PRO00820
         AGO   .OUT2                                                    PRO00830
.OUT1    B     &GNAM.B                                                  PRO00840
.OUT2    AIF   ('&RENT' EQ 'YES').OUT3                                  PRO00850
&SAVE    DC    18F'0'                  SAVE AREA                        PRO00860
.OUT3    ANOP                                                           PRO00870
         AIF   (N'&BASE EQ 1).PASS                                      PRO00880
&A       SETA  1                                                        PRO00890
&GNAM    DC    A(&NAME.+4096)          ADCONS FOR BASE REGS             PRO00900
.LOOP2   ANOP                                                           PRO00910
&A       SETA  &A+1                                                     PRO00920
         AIF   (N'&BASE EQ &A).PASS                                     PRO00930
&B       SETA  4096*&A                                                  PRO00940
         DC    A(&NAME.+&B)                                             PRO00950
         AGO   .LOOP2                                                   PRO00960
.PASS    ANOP                                                           PRO00970
&EXIT    DS    0H                                                       PRO00980
         AIF   ('&WTO' NE 'YES').EXIT1                                  PRO00990
         STM   15,1,16(13)             SAVE 15 - 1                      PRO01000
         WTO   '&NAME ENDED',ROUTCDE=&ROUTCDE                           PRO01010
         LM    15,1,16(13)             RESTORE 15 - 1                   PRO01020
.EXIT1   L     13,4(13)                                                 PRO01030
         AIF   ('&RENT' NE 'YES').EXIT2                                 PRO01040
         STM   15,1,16(13)             SAVE 15, 0 & 1 AROUND FREEMAIN   PRO01050
         L     1,8(13)                 AREA TO BE RELEASED              PRO01060
         MNOTE  *,'       FREEMAIN  R,LV=&F,A=(1),SP=&SP       FREE SAV.PRO01070
               E AREA'                                                  PRO01080
         FREEMAIN  R,LV=&F,A=(1),SP=&SP    FREE SAVE AREA               PRO01090
         LM    15,1,16(13)             RESTORE 15, 0 & 1                PRO01100
.EXIT2   MVI   12(13),X'FF'            MARK SAVE AREA USED              PRO01110
         L     14,12(13)               RESTORE 14                       PRO01120
         LM    2,12,28(13)             RESTORE 2-12                     PRO01130
         BR    14                      RETURN                           PRO01140
&GNAM.B  DS    0H                                                       PRO01150
.REGEQ   AIF   ('&REGEQ' NE 'YES' OR &REGEQS).END                       PRO01160
*                                                                       PRO01170
*              REGISTER EQUATES                                         PRO01180
*                                                                       PRO01190
R0       EQU   0                                                        PRO01200
R1       EQU   1                                                        PRO01210
R2       EQU   2                                                        PRO01220
R3       EQU   3                                                        PRO01230
R4       EQU   4                                                        PRO01240
R5       EQU   5                                                        PRO01250
R6       EQU   6                                                        PRO01260
R7       EQU   7                                                        PRO01270
R8       EQU   8                                                        PRO01280
R9       EQU   9                                                        PRO01290
R10      EQU   10                                                       PRO01300
R11      EQU   11                                                       PRO01310
R12      EQU   12                                                       PRO01320
R13      EQU   13                                                       PRO01330
R14      EQU   14                                                       PRO01340
R15      EQU   15                                                       PRO01350
&REGEQS  SETB  1                                                        PRO01360
         AGO   .END                                                     PRO01370
.E4      MNOTE 12,'ONE OR MORE OF BASE REGISTERS &BASE NOT IN RANGE 2-1.PRO01380
               2 (13 CAN ONLY BE FIRST BASE REG.)'                      PRO01390
         AGO   .END                                                     PRO01400
.E5      MNOTE 12,'BASE REGISTER 13 CANT BE USED IN RE-ENTRANT PROGRAM' PRO01410
.END     EJECT                                                          PRO01420
         MEND                                                           PRO01430
//
VWTL      HEXCON    VLINE     VWTOLST  |  VWTOR    @  VWTO     X          
XPRSPACE  REGISTERë  BLANK   Ç  XPRCLOSEÈ  XPRDCB  @  XPREJECTt          
XPRINNRAO  XPRLDEF W  XPRLIST   XPRMOD  ¢  XPRNTLINê  XPROPEN ¿          
XPRHEAD V  IEFTIOT1Ö  IEFJFCBNb  IECSDSL1K  GETMAIN F  MODESET à          
PROGRAM R  PROGRAM Ñ          9                                              
:READ IEBCOPY ASSEMBLE
IEBCOPY  TITLE 'I E B C O P Y  -  LOAD A PDS DUMPED USING IEBCOPY'      00000010
* THIS UTILITY LOADS AND LISTS ANY MEMBER(S) OF DATA SET UNLOADED       00000020
* USING THE IEBCOPY UTILITY. YOU CAN:                                   00000030
* SELECT ANY MEMBER(S) TO BE LOADED                                     00000040
* LIST THE DIRECTORY OF THE FILE, WITH THE EXTRA INFORMATION IN HEX     00000050
         SPACE ,                                                        00000060
* THE COMMAND IS IEBCOPY. THE FIRST OPTION MUST BE EITHER               00000070
*        LIST            LIST THE DIRECTORY OF THIS DATA SET            00000080
*        LOAD            LOAD THE FILE, EITHER USING THE SELECTED LIST  00000090
*                        OF MEMBERS, OR THE ENTIRE DATA SET.            00000100
         SPACE ,                                                        00000110
* WITH EITHER OF THESE OPTIONS, THE FOLLOWING OPTIONS CAN ALSO BE       00000120
* SPECIFIED:                                                            00000130
*        FTYPE/FILETYPE  WHEN LOADING A FILE, THE FILE TYPE.            00000140
*                        THE DEFAULT IS 'IEBCOPY'.                      00000150
*        FMODE/FILEMODE  WHEN LOADING A FILE, THE FILE MODE.            00000160
*                        THE DEFAULT IS 'A2'.                           00000170
*        FROM            FROM WHAT MEMBER THE LOAD/LIST IS TO START     00000180
*        TO/THRU/THROUGH TO WHAT MEMBER THE LOAD/LIST IS TO END         00000190
*        MEMBER          WHICH MEMBER IS TO BE LOADED/LISTED            00000200
         SPACE ,                                                        00000210
* N.B.             (1)   BY DEFAULT, ALL MEMBERS ARE LOADED/LISTED.     00000220
*                  (2)   EOF ON TAPE IS NEVER REACHED, THIS WILL ABEND  00000230
*                        BECAUSE EODAD IS NOT CODED IN THE DCB.         00000240
*                  (3)   NOTE LISTS ARE DISCARDED AND NO MESSAGES ARE   00000250
*                        ISSUED. LOAD MODULES ARE RELOADED CORRECTLY;   00000260
*                        ONLY THE DATA PORTION IS RELOADED.             00000270
         SPACE ,                                                        00000280
* SEE OS/VS UTILITIES LOGIC MANUAL FOR FURTHER INFORMATION:             00000290
* SY35-0005                                                             00000300
         TITLE 'LOCAL MACROS'                                           00000310
         MACRO ,                                                        00000320
&LABEL   OPT   &NAME,&ADDR                                              00000330
&LABEL   DC    CL8'&NAME',A(&ADDR)                                      00000340
         MEND  ,                                                        00000350
         TITLE 'DSECTS AND EQUATES'                                     00000360
* THE UNLOADED FILE IS IN VB FORMAT, REGARDLESS OF THE INDICATORS       00000370
* ON THE TAPE. USE VB/32756/32760 TO OPEN THE TAPE.                     00000380
* THE USER MUST SUPPLY THE CONTROL STATEMENTS.                          00000390
         SPACE 3                                                        00000400
COPYR1   DSECT ,             RECORD 1 LAYOUT                            00000410
R1LEN    DS    H             LENGTH                                     00000420
         DS    H             RESERVED                                   00000430
R1INDC   DS    X             INDICATOR, X'00'=OK, X'80'=ERROR           00000440
R1ID     DS    XL3           IEBCOPY IDENTIFIER = X'CA6D0F'             00000450
R1DSORG  DS    XL2           DSORG                                      00000460
R1BLKSI  DS    XL2           BLKSIZE                                    00000470
R1LRECL  DS    XL2           LRECL                                      00000480
R1RECFM  DS    X             RECFM                                      00000490
R1KEYLEN DS    X             KEYLEN                                     00000500
R1OPTCD  DS    X             OPTCD                                      00000510
         DS    X             *** RESERVED ***                           00000520
R1TBLKSI DS    XL2           BLKSIZE OF TAPE FILE                       00000530
R1DEVTYP DS    XL20          DEVICE TYPE INFORMATION                    00000540
R1TRKCYL EQU   R1DEVTYP+10,2,C'H'                                       00000550
LCOPYR1  EQU   *-COPYR1      LENGTH OF RECORD                           00000560
         SPACE ,                                                        00000570
R1IDEQ   EQU   X'CA6D0F'     IDENTIFIES IEBCOPY UNLOADED FILE           00000580
         SPACE 3                                                        00000590
COPYR2   DSECT ,             RECORD 2 LAYOUT                            00000600
R2LEN    DS    H             LENGTH OF RECORD                           00000610
         DS    H             *** RESERVED ***                           00000620
R2DEB    DS    XL16          LAST 16 BYTES OF BASIC DEB                 00000630
R2DEBX   DS    16XL16        DASD DEB EXTENSION                         00000640
         DS    XL4           *** RESERVED ***                           00000650
LCOPYR2  EQU   *-COPYR2      LENGTH OF RECORD                           00000660
         SPACE 3                                                        00000670
COPYR3   DSECT ,             RECORD 3-N LAYOUT                          00000680
R3F      DS    X             RECORD TYPE INDICATOR                      00000690
R3FSTD   EQU   B'00000000'             NORMAL RECORD                    00000700
R3FNOTE  EQU   B'11100000'             NOTE RECORD, JUST BEFORE MEMBER  00000710
R3M      DS    X             EXTENT                                     00000720
R3BB     DS    XL2           BIN                                        00000730
R3CC     DS    XL2           CYLINDER                                   00000740
R3HH     DS    XL2           TRACK                                      00000750
R3R      DS    X             RECORD                                     00000760
R3K      DS    X             KEY LENGTH                                 00000770
R3DL     DS    XL2           DATA LENGTH                                00000780
LCOPYR3  EQU   *-COPYR3                                                 00000790
         SPACE ,                                                        00000800
DEBXTENT DSECT ,             FORMAT OF DEB EXTENT                       00000810
DEBDVMOD DS    X             FILE MASK                                  00000820
DEBUCBA  DS    AL3           UCB ADDRESS                                00000830
DEBINUM  DS    H             BIN NUMBER                                 00000840
DEBSTRCC DS    H             CYLINDER ADDRESS FOR START OF EXTENT       00000850
DEBSTRHH DS    H             TRACK ADDRESS FOR START OF EXTENT          00000860
DEBENDCC DS    H             CYLINDER ADDRESS FOR END OF EXTENT         00000870
DEBENDHH DS    H             TRACK ADDRESS FOR END OF EXTENT            00000880
DEBNMTRK DS    H             NO. OF TRACKS ALLOCATED TO THIS EXTENT     00000890
LDEBXNT  EQU   *-DEBXTENT                                               00000900
         SPACE ,                                                        00000910
PDSREC   DSECT ,             FORMAT OF ENTRY IN DIRECTORY               00000920
PDSNAME  DS    CL8           MEMBER NAME                                00000930
PDSADDR  DS    XL3           TTR OF MEMBER                              00000940
PDSFLAGS DS    X             SPECIAL INDICATORS                         00000950
PDSALIAS EQU   X'80'         INDICATES AN ALIAS                         00000960
PDSNOTE  EQU   B'01100000'   NUMBER OF NOTE LISTS                       00000970
PDSUSER  EQU   B'00011111'   NUMBER OF USER HALFWORDS IN ENTRY          00000980
LPDSREC  EQU   *-PDSREC                                                 00000990
         EJECT ,                                                        00001000
         DCBD  DEVD=DA,DSORG=PS                                         00001010
         TITLE 'MAIN PROGRAM'                                           00001020
IEBCOPY  START ,                                                        00001030
         SPACE ,                                                        00001040
         PRINT NOGEN                                                    00001050
         SPACE ,                                                        00001060
R0       EQU   0             REGISTER EQUATES                           00001070
R1       EQU   1                                                        00001080
R2       EQU   2                                                        00001090
R3       EQU   3                                                        00001100
R4       EQU   4                                                        00001110
R5       EQU   5                                                        00001120
R6       EQU   6                                                        00001130
R7       EQU   7                                                        00001140
R8       EQU   8                                                        00001150
R9       EQU   9                                                        00001160
R10      EQU   10                                                       00001170
R11      EQU   11                                                       00001180
R12      EQU   12                                                       00001190
R13      EQU   13                                                       00001200
R14      EQU   14                                                       00001210
R15      EQU   15                                                       00001220
         SPACE ,                                                        00001230
         SAVE  (14,12),T,*   STOW REGS                                  00001240
         LR    R12,R15       ESTABLISH ADDRESABILITY                    00001250
         LA    R11,2048(,R12)                                           00001260
         LA    R11,2048(,R11)                                           00001270
         USING IEBCOPY,R12,R11                                          00001280
         SPACE ,                                                        00001290
         LA    R15,SAVEAREA                                             00001300
         ST    R15,8(,R13)                                              00001310
         ST    R13,4(,R15)                                              00001320
         LR    R13,R15                                                  00001330
         SPACE ,                                                        00001340
         XC    TOZERO,TOZERO MAKE SERIALLY REUSABLE                     00001350
         MVC   TO,GATE                                                  00001360
         MVC   FILETYPE(10),=CL10'IEBCOPY A2'                           00001370
         SPACE ,                                                        00001380
         LA    R2,8(,R1)     VALIDATE OPTION(S)                         00001390
         CLC   =CL8'LOAD',0(R2)                                         00001400
         BE    SETLOAD                                                  00001410
         CLC   =CL8'LIST',0(R2)                                         00001420
         BE    SETLIST                                                  00001430
         WRTERM 'INVALID OR MISSING FUNCTION, NOT ''LIST'' OR ''LOAD''' 00001440
         MVC   RETCODE,=F'8'                                            00001450
         B     ENDFILE                                                  00001460
         SPACE ,                                                        00001470
SETLOAD  MVI   FLAG,LOAD                                                00001480
         B     CHECKOPT                                                 00001490
SETLIST  MVI   FLAG,LIST                                                00001500
         B     CHECKOPT                                                 00001510
         SPACE ,                                                        00001520
CHECKOPT LA    R2,8(,R2)           SCAN NEXT OPTIONS                    00001530
         CLI   0(R2),X'FF'         END OF PARAMETERS ?                  00001540
         BE    EXECUTE             YES, FINIS                           00001550
         LM    R3,R4,=A(OPTIONS,NOPTIONS)                               00001560
TESTOPT  CLC   0(8,R3),0(R2)       SEE IF WE CAN FIND THE OPTION        00001570
         BE    EXECOPT                                                  00001580
         LA    R3,12(,R3)          PUSH TO NEXT OPTION                  00001590
         BCT   R4,TESTOPT          LOOP UNTIL DONE                      00001600
         SPACE ,                                                        00001610
         LINEDIT TEXT='INVALID OPTION - ........',SUB=(CHARA,(R2))      00001620
         MVC   RETCODE,=F'8'                                            00001630
         B     ENDFILE                                                  00001640
         SPACE ,                                                        00001650
BADPARM  WRTERM 'MISSING PARAMETER FOR LAST OPTION'                     00001660
         MVC   RETCODE,=F'8'                                            00001670
         B     ENDFILE                                                  00001680
         SPACE ,                                                        00001690
EXECOPT  L     R3,8(,R3)           POINT TO OPTION ROUTINE              00001700
         LA    R2,8(,R2)           PUSH TO PARAMETER                    00001710
         CLI   0(R2),X'FF'         MAKE SURE THERE IS ONE               00001720
         BE    BADPARM             IF NOT, ERROR                        00001730
         EX    0,0(,R3)            PERFORM THE ROUTINE                  00001740
         B     CHECKOPT            CHECK THE NEXT OPTION                00001750
         TITLE 'SCAN DIRECTORY, RETRIEVE REQUIRED INFORMATION'          00001760
EXECUTE  DS    0H                  ACTUALLY PERFORM THE FUNCTION        00001770
*                                                                       00001780
* PHASE 1  -  OPEN THE UNLOADED DATA SET                                00001790
*                                                                       00001800
         OPEN  (TAPE,INPUT)        OPEN THE INPUT FILE                  00001810
         TM    TAPE+DCBOFLGS-IHADCB,X'10'                               00001820
         BZ    NOTOPEN             MUST OPEN INPUT DATA SET             00001830
         OI    FLAGS,OPENTAPE      SIGNAL TAPE DATA SET OPENED          00001840
         SPACE ,                                                        00001850
*                                                                       00001860
* PHASE 2  -  VERIFY RECORD 1                                           00001870
*                                                                       00001880
         GET   TAPE                GET THE 1ST RECORD                   00001890
         USING COPYR1,R1           ADDRESS THE 1ST RECORD               00001900
         CLC   R1LEN,=Y(LCOPYR1)   VERIFY LENGTH                        00001910
         BL    BADTAPE             EVERYTHING MUST FIT                  00001920
         CLC   R1ID,=AL3(R1IDEQ)                                        00001930
         BNE   BADTAPE             OK . . . .                           00001940
         SPACE ,                                                        00001950
         LH    R0,R1TRKCYL                                              00001960
         ST    R0,TRKCYL                                                00001970
         LA    R2,DISK                                                  00001980
         USING IHADCB,R2           COPY THE REQUIRED FIELDS             00001990
         MVC   DCBLRECL,R1LRECL                                         00002000
         MVC   BLKSIZE,R1BLKSI                                          00002010
         MVC   DCBOPTCD,R1OPTCD                                         00002020
         MVC   DCBRECFM,R1RECFM                                         00002030
         CLI   R1KEYLEN,0                                               00002040
         BE    OKEY                                                     00002050
         WRTERM 'WARNING: DATA SET KEY LENGTH NOT ZERO, KEY IGNORED'    00002060
OKEY     DS    0H                                                       00002070
         DROP  R2,R1                                                    00002080
         SPACE ,                                                        00002090
*                                                                       00002100
* PHASE 3  -  VERIFY RECORD 2                                           00002110
*                                                                       00002120
         SPACE ,                                                        00002130
         GET   TAPE                                                     00002140
         USING COPYR2,R1           ADDRESS RECORD 2                     00002150
         CLC   =Y(LCOPYR2),R2LEN                                        00002160
         BNE   BADTAPE             MAKE SURE WE HAVE ALL WE NEED        00002170
         MVC   DEB(16),R2DEB       AND COPY DEB BASIC SECTION           00002180
         MVC   EXTENTS(16*16),R2DEBX   AND EXTENTS                      00002190
         DROP  R1                                                       00002200
         SPACE ,                                                        00002210
*                                                                       00002220
* PHASE 4  -  PREAMBLE TO DIRECTORY SCAN                                00002230
*                                                                       00002240
         SPACE ,                                                        00002250
         GETMAIN VU,LA=AREALEN,A=AREA   GET THE BUFFER                  00002260
         LM    R1,R2,AREA          GET ADDRESS AND LENGTH               00002270
         AR    R2,R1               POINT TO END OF GETMAINED AREA       00002280
         STM   R1,R2,POINTER       UPDATE POINTER/END                   00002290
         LA    R9,SHOWLIST         POINT TO DEFAULT ROUTINE             00002300
         TM    FLAG,LOAD                                                00002310
         BNO   NOTLOAD1                                                 00002320
         LA    R9,SHOWLOAD                                              00002330
NOTLOAD1 DS    0H                                                       00002340
         SPACE ,                                                        00002350
*                                                                       00002360
* PHASE 5  -  SCAN DIRECTORY                                            00002370
*                                                                       00002380
         SPACE ,                                                        00002390
NEXTPDS  BAL   R10,GETREC          GET A DIRECTORY BLOCK                00002400
         LR    R2,R1                                                    00002410
         USING COPYR3,R2                                                00002420
         CLI   R3F,R3FSTD          MAKE SURE RECORD IS VALID            00002430
         BNE   BADTAPE                                                  00002440
         CLC   R3K(3),=AL1(8,1,0)  VERIFY KDD                           00002450
         BNE   BADTAPE                                                  00002460
         DROP  R2                                                       00002470
         LA    R3,LCOPYR3(,R2)     POINT PAST RECORD PREFIX             00002480
         LA    R2,10(,R3)          POINT PAST KEY + LENGTH INDICATOR    00002490
         USING PDSREC,R2           ADDRESS THE RECORD                   00002500
SHOWNAME CLC   PDSNAME,=8X'FF'     LAST POSSIBLE ENTRY ?                00002510
         BE    WHATNOW             YES, FINISHED SCANNING DIRECTORY     00002520
         CLC   PDSNAME,FROM                                             00002530
         BL    NEXTNAME                                                 00002540
         CLC   PDSNAME,TO                                               00002550
         BH    NEXTNAME                                                 00002560
         BALR  R10,R9              PERFORM THE ROUTINE                  00002570
         SPACE ,                                                        00002580
NEXTNAME DS    0H                                                       00002590
         CLC   PDSNAME,0(R3)       IS THIS THE LAST NAME ?              00002600
         BE    NEXTPDS             YES, READ THE NEXT RECORD            00002610
         IC    R1,PDSFLAGS                                              00002620
         N     R1,=A(PDSUSER)      NUMBER OF USER HALFWORDS             00002630
         AR    R1,R1               NUMBER OF BYTES                      00002640
         LA    R2,LPDSREC(R2,R1)   POINT TO NEXT ELEMENT                00002650
         B     SHOWNAME            AND DISPLAY IT                       00002660
         SPACE ,                                                        00002670
         DROP  R2                                                       00002680
         EJECT ,                                                        00002690
*                                                                       00002700
* PHASE 6  -  FREE UNUSED AREA OBTAINED USING GETMAIN                   00002710
*                                                                       00002720
         SPACE ,                                                        00002730
WHATNOW  DS    0H                                                       00002740
         LM    R1,R2,POINTER       FREE END OF GETMAINED AREA           00002750
         SR    R2,R1               DETERMINE LENGTH                     00002760
         LR    R0,R2               PREPARE FOR FREEMAIN                 00002770
         FREEMAIN R,A=(1),LV=(0)   FREE UNUSED AREA                     00002780
         SPACE ,                                                        00002790
*                                                                       00002800
* PHASE 7  -  TERMINATE IF LIST FUNCTION                                00002810
*                                                                       00002820
         SPACE ,                                                        00002830
         TM    FLAG,LIST                                                00002840
         BO    ENDFILE             IF LIST FUNCTION, WE HAVE FINISHED   00002850
         SPACE ,                                                        00002860
*                                                                       00002870
* PHASE 8  -  GO TO THE END OF THE DIRECTORY                            00002880
*                                                                       00002890
         SPACE ,                                                        00002900
NEXTREC2 BAL   R10,GETREC          GET THE NEXT RECORD                  00002910
         USING COPYR3,R1           ADDRESS THE RECORD                   00002920
         CLI   R3F,R3FSTD                                               00002930
         BNE   BADTAPE                                                  00002940
         CLC   R3DL,=AL2(0)                                             00002950
         BNE   NEXTREC2            UNTIL END OF DIRECTORY               00002960
         SPACE ,                                                        00002970
*                                                                       00002980
* PHASE 9  -  SORT THE DIRECTORY BY ADDRESS                             00002990
*                                                                       00003000
         SPACE ,                                                        00003010
         L     R2,POINTER          GET END OF TABLE                     00003020
         S     R2,AREA                 LENGTH                           00003030
         SRL   R2,4                GET NUMBER OF ENTRIES                00003040
         LR    R4,R2               REMEMBER FOR LATER USE               00003050
         C     R2,=F'1'            HOW MANY                             00003060
         BL    NOMEMBER            NONE, FINISHED !                     00003070
         BE    NOSORT              1, ALREADY SORTED                    00003080
         SPACE ,                                                        00003090
SORT     BCTR  R2,0                DECREMENT, ONLY NEED N-1 COMPARES    00003100
         OI    FLAG,SORTED         SIGNAL FILE IS SORTED                00003110
         L     R3,AREA             POINT TO START OF AREA               00003120
COMPARE  CLC   0(8,R3),16(R3)      IS THIS IN ORDER ?                   00003130
         BNH   NOSWITCH            NO, FLIP                             00003140
         NI    FLAG,255-SORTED     NO LONGER SORTED                     00003150
         XC    0(16,R3),16(R3)     SWAP ELEMENTS                        00003160
         XC    16(16,R3),0(R3)                                          00003170
         XC    0(16,R3),16(R3)                                          00003180
NOSWITCH LA    R3,16(,R3)          POINT TO NEXT ELEMENT                00003190
         BCT   R2,COMPARE          LOOP UNTIL DONE                      00003200
         TM    FLAG,SORTED         SEE IF SORTED                        00003210
         BO    NOSORT              YES, OK                              00003220
         LR    R2,R4               COPY NUMBER OF ELEMENTS              00003230
         B     SORT                AND DO IT AGAIN                      00003240
         SPACE ,                                                        00003250
NOSORT   DS    0H                  SORT FINISHED                        00003260
         SPACE ,                                                        00003270
*                                                                       00003280
* PHASE 10  -  SCAN THROUGH TAPE, PICK OFF AND LOAD REQUIRED FILES      00003290
*                                                                       00003300
         SPACE ,                                                        00003310
         L     R3,AREA             POINT TO START OF LIST               00003320
PHASE10A BAL   R10,GETREC          GET A RECORD                         00003330
         USING COPYR3,R1           ADDRESS THE RECORD                   00003340
         CLI   R3F,R3FSTD          NOTE ENTRY?                          00003350
         BNE   PHASE10A                YES, IGNORE RECORD               00003360
         CLC   0(8,R3),R3M         IS THIS THE RIGHT ADDRESS ?          00003370
         BE    LOADFILE            YES, LOAD THE FILE                   00003380
         BH    PHASE10A            LOW, OK                              00003390
         WRTERM 'ERROR: MISSING RECORD FROM TAPE FILE'                  00003400
         MVC   RETCODE,=F'16'                                           00003410
         B     ENDFILE                                                  00003420
         DROP  R1                                                       00003430
         SPACE ,                                                        00003440
LOADFILE LR    R2,R1               COPY THE ADDRESS OF THE RECORD       00003450
         MVC   FILENAME,8(R3)      SET FILE NAME                        00003460
         TR    FILENAME(18),BADCHARS                                    00003470
         LA    R1,FILEDEF                                               00003480
         SVC   202                 ISSUE FILEDEF COMMAND                00003490
         DC    AL4(BADDISK)                                             00003500
         MVC   DISK+DCBBLKSI-IHADCB(2),BLKSIZE                          00003510
         OPEN  (DISK,OUTPUT)       OPEN THE FILE                        00003520
         OI    FLAGS,OPENDISK      SIGNAL THAT DISK WAS OPENED          00003530
         SPACE ,                                                        00003540
         USING COPYR3,R2           ADDRESS RECORD                       00003550
PUT      CLC   =H'0',R3DL          IS THE DATA LENGTH = 0               00003560
         BE    NEXTFILE            YES, END OF FILE                     00003570
         SR    R15,R15                                                  00003580
         IC    R15,R3K             GET THE KEY LENGTH                   00003590
         LA    R6,LCOPYR3(R2,R15)  POINT TO DATA AREA                   00003600
         SR    R5,R5                                                    00003610
         ICM   R5,3,R3DL           GET THE LENGTH                       00003620
         MVC   DISK+DCBBLKSI-IHADCB(2),R3DL                             00003630
         WRITE DECB,SF,DISK,(R6),(R5)  WRITE THE RECORD                 00003640
         CHECK DECB                MAKE SURE IT COMPLETED CORRECTLY     00003650
SKIPREC  BAL   R10,GETREC          GET THE NEXT RECORD                  00003660
         LR    R2,R1               COPY THE ADDRESS                     00003670
         CLI   R3F,R3FSTD          SKIP IF NOTE INFORMATION             00003680
         BNE   SKIPREC                                                  00003690
         B     PUT                 AND WRITE IT OUT                     00003700
         DROP  R2                                                       00003710
         SPACE ,                                                        00003720
NEXTFILE CLOSE (DISK,)             FINISHED WITH DISK FILE              00003730
         LINEDIT TEXT='........ LOADED',SUB=(CHARA,8(R3)),             X00003740
               DOT=NO,COMP=NO                                           00003750
SAMEADDR LR    R1,R3               COPY ADDRESS OF THIS ELEMENT         00003760
         LA    R3,16(,R3)          POINT TO NEXT ELEMENT                00003770
         BCT   R4,SHOWSAME                                              00003780
         B     ENDFILE                                                  00003790
SHOWSAME CLC   0(8,R3),0(R1)       SAME ADDRESS ?                       00003800
         BNE   PHASE10A            NO, FINISH GOING THROUGH FILE        00003810
         LINEDIT TEXT='ALSO KNOWN AS ........',SUB=(CHARA,8(R3)),DOT=NO 00003820
         B     SAMEADDR                                                 00003830
         EJECT ,                                                        00003840
ENDFILE  CLOSE (TAPE,,DISK,) CLOSE THE FILES                            00003850
         SPACE ,                                                        00003860
         TM    FLAGS,OPENDISK          ONLY FREEPOOL IF DISK OPENED     00003870
         BZ    NOFREEDS                                                 00003880
         NI    FLAGS,255-OPENDISK                                       00003890
         FREEPOOL DISK                                                  00003900
NOFREEDS DS    0H                                                       00003910
         SPACE ,                                                        00003920
         TM    FLAGS,OPENTAPE                                           00003930
         BZ    NOFREETP                                                 00003940
         NI    FLAGS,255-OPENTAPE                                       00003950
         FREEPOOL TAPE                                                  00003960
NOFREETP DS    0H                                                       00003970
         SPACE ,                                                        00003980
         L     R1,AREA                                                  00003990
         L     R0,POINTER                                               00004000
         SR    R0,R1                                                    00004010
         BZ    NOFREE                                                   00004020
         FREEMAIN R,A=(1),LV=(0)                                        00004030
NOFREE   DS    0H                                                       00004040
         SPACE ,                                                        00004050
         L     R13,4(,R13)   POP SAVE AREA CHAIN                        00004060
         L     R15,RETCODE   LOAD RETURN CODE                           00004070
         RETURN (14,12),T,RC=(15)   RETURN TO CALLER                    00004080
         SPACE ,                                                        00004090
NOMEMBER WRTERM 'WARNING: NO MEMBERS SELECTED TO BE LOADED'             00004100
         MVC   RETCODE,=F'4'                                            00004110
         B     ENDFILE                                                  00004120
         SPACE ,                                                        00004130
BADDISK  WRTERM 'ERROR: PROBLEM WITH DISK FILE'                         00004140
         MVC   RETCODE,=F'16'                                           00004150
         B     ENDFILE                                                  00004160
         SPACE ,                                                        00004170
NOTOPEN  WRTERM 'I/O FILE DID NOT OPEN'                                 00004180
         MVC   RETCODE,=F'12'                                           00004190
         B     ENDFILE                                                  00004200
         SPACE ,                                                        00004210
BADTAPE  WRTERM 'SOURCE FILE DOES NOT MATCH IEBCOPY FORMAT'             00004220
         MVC   RETCODE,=F'12'                                           00004230
         B     ENDFILE                                                  00004240
         TITLE 'LOCAL SUBROUTINES'                                      00004250
GETREC   DS    0H            OBTAIN NEXT RECORD FROM TAPE FILE          00004260
*                            RETURN ADDRESS IS IN R10                   00004270
*                            ADDRESS OF RECORD RETURNED IN R1           00004280
         SPACE ,                                                        00004290
         USING COPYR3,R1     ADDRESS THE RECORD                         00004300
         CLC   =A(0),RECLEN  IS THERE ANYTHING IN THE BUFFER ?          00004310
         BNE   GETREC10      YES, THEN GIVE IT TO THE USER              00004320
         GET   TAPE          NO, OBTAIN THE NEXT RECORD                 00004330
         LH    R15,0(,R1)    GET THE LENGTH OF THE RECORD               00004340
         SH    R15,=H'4'     SUBTRACT THE LENGTH OF THE HEADER          00004350
         LA    R1,4(,R1)     POINT PAST THE HEADER                      00004360
         ST    R15,RECLEN    SET THE LENGTH OF THE RECORD LEFT          00004370
         ST    R1,RECADDR    SET THE ADDRESS OF THE NEXT ELEMENT        00004380
         SPACE ,                                                        00004390
GETREC10 DS    0H            RETURN ADDRESS OF BUFFER IN R1             00004400
         L     R1,RECADDR    GET THE ADDRESS OF THE ELEMENT             00004410
         USING COPYR3,R1     ADDRESS THE ELEMENT                        00004420
         SR    R15,R15       CALCULATE THE LENGTH                       00004430
         SR    R0,R0                                                    00004440
         IC    R15,R3K       GET THE KEY LENGTH                         00004450
         ICM   R0,3,R3DL     GET THE DATA LENGTH                        00004460
         AR    R15,R0        CALCULATE LENGTH OF THE KEY + DATA AREA    00004470
         LA    R15,LCOPYR3(,R15)   TOTAL LENGTH OF AREA                 00004480
         L     R0,RECLEN     GET THE LENGTH                             00004490
         SR    R0,R15        CALCULATE THE LENGTH LEFT                  00004500
         BM    BADTAPE       SHOULD NEVER GO < 0                        00004510
         ST    R0,RECLEN     UPDATE LENGTH                              00004520
         LA    R15,0(R1,R15) POINT TO NEXT ELEMENT                      00004530
         ST    R15,RECADDR                                              00004540
         BR    R10           RETURN TO CALLER                           00004550
         SPACE ,                                                        00004560
         DROP  R1                                                       00004570
         EJECT ,                                                        00004580
         USING PDSREC,R2     DISPLAY THE INFORMATION                    00004590
SHOWLIST DS    0H            DISPLAY THE INFO. ABOUT A MEMBER           00004600
         IC    R4,PDSFLAGS                                              00004610
         N     R4,=A(PDSUSER)                                           00004620
         AR    R4,R4                                                    00004630
         LA    R4,L'PDSADDR+L'PDSFLAGS(,R4)                             00004640
         LINEDIT TEXT='MEMBER ........ ................................X00004650
               .......................................',               X00004660
               DOT=NO,RENT=NO,COMP=NO,                                 X00004670
               SUB=(CHARA,PDSNAME,HEX4A,(PDSADDR,(R4)))                 00004680
         BR    R10                                                      00004690
         SPACE ,                                                        00004700
         DROP  R2                                                       00004710
         EJECT ,                                                        00004720
         USING PDSREC,R2                                                00004730
SHOWLOAD DS    0H            ENTER LINE INTO INCORE LIST                00004740
         LM    R4,R5,POINTER POINT TO LAST ELEMENT USED                 00004750
         LA    R6,16(,R4)    POINT TO NEW LAST ELEMENT                  00004760
         CR    R6,R5         PAST THE END ?                             00004770
         BH    TOOMANY       YES, CAN'T DO THIS                         00004780
         ST    R6,POINTER    UPDATE POINTER                             00004790
         SPACE ,                                                        00004800
         MVC   8(8,R4),PDSNAME     COPY THE MEMBER NAME                 00004810
         MVC   7(1,R4),PDSADDR+2   COPY THE R FROM TTR                  00004820
         SR    R5,R5         CALCULATE MBBCCHHR                         00004830
         IC    R5,DEBNMEXT   GET THE NUMBER OF EXTENTS                  00004840
         LA    R6,EXTENTS    POINT TO DEB EXTENTS                       00004850
         USING DEBXTENT,R6                                              00004860
         SR    R7,R7         GET THE TT OF THE TTR                      00004870
         ICM   R7,3,PDSADDR                                             00004880
         SPACE ,                                                        00004890
NEXTENT  CH    R7,DEBNMTRK                                              00004900
         BL    HAVEXNT       TT < NO. TT IN EXTENT                      00004910
         SH    R7,DEBNMTRK   RELOCATE TT                                00004920
         LA    R6,LDEBXNT(,R6)                                          00004930
         BCT   R5,NEXTENT                                               00004940
         B     BADTAPE                                                  00004950
         SPACE ,                                                        00004960
HAVEXNT  MVC   1(2,R4),DEBINUM     BB                                   00004970
         AH    R7,DEBSTRHH                                              00004980
         CLC   DEBSTRCC,DEBENDCC   CROSS CYLINDER BOUNDARIES ?          00004990
         BE    HAVECCHH                                                 00005000
         SPACE ,                                                        00005010
         LR    R1,R7                                                    00005020
         SR    R0,R0                                                    00005030
         D     R0,TRKCYL                                                00005040
         STCM  R0,3,5(R4)          HH                                   00005050
         AH    R1,DEBSTRCC         CC                                   00005060
         STCM  R1,3,3(R4)                                               00005070
         B     DOEXTENT                                                 00005080
         SPACE ,                                                        00005090
HAVECCHH MVC   3(2,R4),DEBSTRCC    CC                                   00005100
         STCM  R7,3,5(R4)          HH                                   00005110
         SPACE ,                                                        00005120
         DROP  R6,R2                                                    00005130
DOEXTENT S     R6,=A(EXTENTS)                                           00005140
         SRL   R6,4                                                     00005150
         STC   R6,0(,R4)           M                                    00005160
         BR    R10                                                      00005170
         SPACE ,                                                        00005180
TOOMANY  WRTERM 'TOO MANY MEMBERS TO BE LOADED'                         00005190
         MVC   RETCODE,=F'8'                                            00005200
         B     ENDFILE                                                  00005210
         TITLE 'PARAMETER PROCESSING ROUTINE(S)'                        00005220
OPTIONS  DS    0D                                                       00005230
         OPT   MEMBER,SMEMBER                                           00005240
         OPT   FROM,SFROM                                               00005250
         OPT   TO,STO                                                   00005260
         OPT   THRU,STO                                                 00005270
         OPT   THROUGH,STO                                              00005280
         OPT   FILETYPE,STYPE                                           00005290
         OPT   FTYPE,STYPE                                              00005300
         OPT   FILEMODE,SMODE                                           00005310
         OPT   FMODE,SMODE                                              00005320
NOPTIONS EQU   (*-OPTIONS)/12                                           00005330
         SPACE ,                                                        00005340
SMEMBER  BAL   R1,*+4                                                   00005350
         MVC   FROM,0(R2)                                               00005360
         MVC   TO,0(R2)                                                 00005370
         BR    R1                                                       00005380
         SPACE ,                                                        00005390
SFROM    BAL   R1,*+4                                                   00005400
         MVC   FROM,0(R2)                                               00005410
         LA    R14,FROM+7                                               00005420
         LA    R15,L'FROM                                               00005430
TONULL   CLI   0(R14),C' '                                              00005440
         BNER  R1                                                       00005450
         MVI   0(R14),0                                                 00005460
         BCTR  R14,0                                                    00005470
         BCT   R15,TONULL                                               00005480
         BR    R1                                                       00005490
         SPACE ,                                                        00005500
STO      BAL   R1,*+4                                                   00005510
         MVC   TO,0(R2)                                                 00005520
         LA    R14,TO+7                                                 00005530
         LA    R15,L'TO                                                 00005540
TOFF     CLI   0(R14),C' '                                              00005550
         BNER  R1                                                       00005560
         MVI   0(R14),X'FF'                                             00005570
         BCTR  R14,0                                                    00005580
         BCT   R15,TOFF                                                 00005590
         BR    R1                                                       00005600
         SPACE ,                                                        00005610
STYPE    MVC   FILETYPE,0(R2)                                           00005620
SMODE    MVC   FILEMODE,0(R2)                                           00005630
         TITLE 'WORK AREA(S), CONSTANTS AND DCBS'                       00005640
DISK     DCB   DDNAME=DISK,MACRF=W,DEVD=DA,DSORG=PS,EXLST=EXLST,BUFNO=1 00005650
TAPE     DCB   DDNAME=TAPE,MACRF=GL,LRECL=32756,BLKSIZE=32760,         X00005660
               RECFM=VB,DSORG=PS,BUFNO=1                                00005670
EXLST    DC    X'87',AL3(JFCB)                                          00005680
JFCB     DS    22D                     JFCB FOR DISK FILES              00005690
         SPACE ,                                                        00005700
FLAGS    DC    X'00'                   INTERNAL FLAGS                   00005710
OPENDISK EQU   X'80'                       SIGNALS DISK FILE WAS OPENED 00005720
OPENTAPE EQU   X'40'                       SIGNALS TAPE FILE WAS OPENED 00005730
         SPACE ,                                                        00005740
AREALEN  DC    A(1024,1000*1024)       MIN/MAX LENGTH REQUESTED         00005750
AREA     DC    A(0,0)                  ADDRESS/LENGTH OF AREA           00005760
POINTER  DC    A(0)                    NEXT ELEMENT TO BE USED          00005770
END      DC    A(0)                    END OF GETMAINED AREA            00005780
RECADDR  DC    A(0)                    ADDRESS OF NEXT BUFFER           00005790
RECLEN   DC    A(0)                    LENGTH OF RECORD, 0 IF NOTHING   00005800
RETCODE  DC    F'0'                    RETURN CODE                      00005810
BLKSIZE  DC    H'0'                    BLOCK SIZE OF DISK FILE          00005820
         SPACE ,                                                        00005830
FROM     DC    X'0000000000000000'     FIRST VALID MEMBER               00005840
TOZERO   EQU   AREA,*-AREA,C'X'                                         00005850
TO       DC    X'FFFFFFFFFFFFFFFF'     LAST VALID MEMBER                00005860
FILEDEF  DS    0D                                                       00005870
         DC    CL8'FILEDEF',CL8'DISK',CL8'DISK'                         00005880
FILENAME DS    CL8                                                      00005890
FILETYPE DC    CL8'IEBCOPY'            DEFAULT FILE TYPE                00005900
FILEMODE DC    CL8'A2'                 DEFAULT FILE MODE                00005910
GATE     DC    8X'FF'                                                   00005920
FLAG     DC    X'00'                   FLAG                             00005930
LOAD     EQU   X'80'                           LOAD FUNCTION            00005940
LIST     EQU   X'40'                           LIST FUNCTION            00005950
SORTED   EQU   X'20'                           LIST IS SORTED           00005960
SAVEAREA DC    18A(0)        O/S SAVE AREA                              00005970
         SPACE 2                                                        00005980
TRKCYL   DS    F             NUMBER OF TRACKS / CYLINDER                00005990
DEB      DS    0D            INCORE MAP OF DEB, LAST 16 BYTES OF BASIC  00006000
DEBNMEXT DS    X             NUMBER OF EXTENTS                          00006010
         DS    XL15          *** RESERVED ***                           00006020
EXTENTS  DS    16XL16        UP TO 16 EXTENTS                           00006030
         EJECT ,                                                        00006040
BADCHARS DC    256C'$'       INVALID CHARACTER TRANSFORMATION           00006050
         ORG   BADCHARS+C' '                                            00006060
         DC    AL1(*-BADCHARS)                                          00006070
         ORG   BADCHARS+C'a'                                            00006080
         DC    9AL1(*-BADCHARS)                                         00006090
         ORG   BADCHARS+C'j'                                            00006100
         DC    9AL1(*-BADCHARS)                                         00006110
         ORG   BADCHARS+C's'                                            00006120
         DC    8AL1(*-BADCHARS)                                         00006130
         ORG   BADCHARS+C'A'                                            00006140
         DC    9AL1(*-BADCHARS)                                         00006150
         ORG   BADCHARS+C'J'                                            00006160
         DC    9AL1(*-BADCHARS)                                         00006170
         ORG   BADCHARS+C'S'                                            00006180
         DC    8AL1(*-BADCHARS)                                         00006190
         ORG   BADCHARS+C'0'                                            00006200
         DC    10AL1(*-BADCHARS)                                        00006210
         ORG   ,                                                        00006220
         LTORG ,             LITERAL POOL                               00006230
         SPACE ,                                                        00006240
         END   IEBCOPY       END OF PROGRAM                             00006250
:READ IEBCOPY HELP
IEBCOPY
.sp
  Use the IEBCOPY command to LIST or LOAD member(s) from a partitioned
dataset, on tape created by the IEBCOPY utility (OS version), to CMS.
.sp
.fo off
The format of the IEBCOPY command is :
.sp
+----------------------------------------------------------+
!           !                                              !
!  IEBCOPY  !  < LIST | LOAD >  < options >                !
!           !                                              !
!           !  options: +           +  +          +        !
!           !           | FTYPE  ft |  | FMODE fm |        !
!           !           +           +  +          +        !
!           !           +                         +        !
!           !           | FROM   fn1 |            |        !
!           !           +            | MEMBER fn  |        !
!           !           | TO     fn2 |            |        !
!           !           +                         +        !
!           !                                              !
+----------------------------------------------------------+
.sp
.tr ¬ 40
.fo on
.il 5
The IEBCOPY command requires that the tape containing the desired
dataset is attached to your account and that a filedef for the tape
device has been made eg. FILEDEF TAPE TAP1 SL VOLID tapename.
For more information try HELP FILEDEF or HELP MOUNT to attach the tape.
.sp
where:
.fo on
.sp
.sp
.of 5
ft¬¬¬is the filetype given to the member(s) copied to CMS. The default
is IEBCOPY.
.sp
.of 5
fm¬¬¬is the filemode given to the member(s) copied to CMS. The default
is A.
.sp
.of 5
fn1¬¬is the member name from which the LIST or LOAD is to begin with.
The member names are sorted alphabetically. Default is to start from
the begining of the sorted list.
.sp
.of 5
fn2¬¬is the member name to be the last to be LISTed or LOADed.
Default is to the end.
.sp
.of 5
fn¬¬¬indicates the name of the MEMBER to be LISTed or LOADed. Only
one name may be given if the option MEMBER is used.
:READ PUTFILES PACKAGE
    PUTFILES PACKAGE  *
    PUTFILES REXX     *
    PUTFILES DESCRIPT *
    PUTFILES HELPPIPE *
    PUTFILES REXX     *
:READ PURFILES REXX
/* This exec is a converse of PIPEs GETFILES stage
   The fileid is placed in front of each record:
   - by default: place a fileid in cols 1->19 and the data in cols 20->*
   - with the FIELDSEP option you place a char between fileid and data
   Then you call PUTFILES

   The input does NOT need to be sorted by fileid, but, the fileid in
   in front of the records needs to be written "nicely": that is:
   all occurrences of the same fileid need to be coded identically (same
   case, same number of spaces...)

    +-----------------------------------------------------------+
    | format:  | PUTFILES <FIXED> <FIELDSEParator|FS xorc>      |
    |          |          <APPEND> <GROUPED | BATCHED>          |
    |          |          <NOUSESFS|USESFS <WORKUNIT xx>        |
    |          |                      <ONERRor ROLlback|COMmit>>|
    +-----------------------------------------------------------+

For more information issue HELP PIPE PUTFILES.

31 Oct 2000: Add FIXED option to create RECFM F files
31 Oct 2000: Correct: fileid is col1-19 (and not col 1-20)
25 May 2004: Add "GROUPED" option
27 May 2005: Allow writing into not-accessed SFS dirs; add BATCHED option
 2 Sep 2010: Use >SFS or >>SFS if writing to SFS: gives more debug info
 6 Sep 2010: The default behaviour of the write stages is to open a new
             workunit for each SFS file.  If your PUTFILES would write
             to 20 files, this will cost 20 APPC connections to the SFS
             server.  These connections remain "consumed" till IPL CMS,
             many users using this procedure could make your SFS server
             run out of "USERS" (a DMSPARMS value)
13 Sep 2010: If using SFS drivers and no WORKUNIT is passed to PUTFILES
             we will use one workunit of our own and commit at end.
 3 Jan 2014: Test the returncode of DMSCOMM, avoid workunits left open.

(c) Copyright International Business Machines Corporation 2005
    All Rights Reserved.
Written by: Kris Buelens IBM Belgium;   27 Sep 2000*/

parse upper source . . myname mytype . syn .
if word(arg(1),1)='$Weof' then signal WaitForEOF

parse value 0      0       0     0      0 ,
      with grouped batched used. Append UseSFS . ,
        '' Fixed FieldSep emsg Workunit OnError

parse upper arg options
do while options<>'' & emsg=''
   parse var options option options
   select
    when abbrev('GROUPED',option,5) then grouped=1
    when abbrev('BATCHED',option,5) then batched=1
    when abbrev('APPEND',option,3) then Append=1
    when abbrev('FIXED',option,1) then fixed='F'
    when option='USESFS' then useSFS=1
    when option='NOUSESFS' then useSFS=0
    when abbrev('FIELDSEPARATOR',option,8) | option='FS' then do
       parse var options FieldSep options; l=length(Fieldsep)
       Select
        when l=0 then emsg='Separator char missing for FIELDSEP'
        when l=1 then xFieldSep=c2x(FieldSep)
        when l>2 then emsg=,
            'Invalid Separator char for FIELDSEP:',
            'not a character or hexadecimal representation:' Fieldsep
        when DataType(FieldSep,'X') then
           parse value FieldSep x2c(FieldSep) with xFieldSep FieldSep
        Otherwise emsg=,
            'Invalid Separator char for FIELDSEP:',
            'not a character or hexadecimal representation:' Fieldsep
       end
    end
    when option='WORKUNIT' then
         parse var options workunit options
    when abbrev('ONERROR',option,5) then
         parse var options OnError options
    otherwise emsg='Invalid parm "'option'" for' myname mytype
   end
end
if UseSFS=0 then do
   if WorkUnit<>'' then
      'MESSAGE WORKUNIT parameter ignored: requires USESFS'
   if Onerror<>'' then
      'MESSAGE ONERROR parameter ignored: requires USESFS'
end; else do
   if WorkUnit<>'' then
    if WorkUnit<>'DEFAULT' & WorkUnit<>'PRIVATE' then
      if \datatype(WorkUnit,'W') Then do
         'MESSAGE Invalid value "'workunit'" for WORKUNIT parameter,',
                'consult PIPE AHELP >SFS'
         exit 53
      end
   rollBack=abbrev('ROLLBACK',onError,3)
   if OnError='' then OnError='COMMIT'

   If \abbrev('COMMIT',onError,3) & \abbrev('ROLLBACK',onError,3) then do
      'MESSAGE Invalid value "'onError'" for ONERROR parameter,',
              'must be COMMIT or ROLLBACK'
      exit 1953
   end
end

if emsg='' then if Batched+Append=2 then
   emsg='Cannot combine BATCHED and APPEND options.'
if emsg<>'' then do
   'MESSAGE' myname':' emsg
   exit 55
end

disk = word('> >>',Append+1)

'streamstate input'
if (rc = 12) then do
   'MESSAGE stage' myname mytype' should not be first stage'
   exit 56
end

/* check that no-one is behind us, we don't pass records through */
/*   (possible indeed, but requires more plumming here)          */
/*   (a bypass is easy: place a FANOUT before PUTFILES)          */
'streamstate output'
if rc<>12 then do /* output stream is connected */
   'MESSAGE stage' myname mytype' should be the last stage'
   exit 57
end
Fs=(FieldSep<>'')
'PEEKTO fileid'
If Fs then RmvFid='| c: Chop After' xFieldSep'?c:'
      else RmvFid='| c: Chop 19?c:'

if grouped | Batched then Do while rc = 0
   if Fs then do
      parse var fileid fileid (fieldsep)
      if Batched then do; disk=word('> >>',Used.fileid+1)
                      Used.fileid=1 ;end
      'CALLPIPE (end ?) *:',       /* Connect to Input */
        '|StrWhilelabel X'c2x(fileid||FieldSep),/* Handle this file */
        RmvFid,                                 /* Remove fileid itself*/
        '|' WriteStage(fixed)                   /* Write to disk */
   end; else do
      fileid = left(fileid,19)
      if Batched then do; disk=word('> >>',Used.fileid+1)
                      Used.fileid=1 ;end
      'CALLPIPE (end ?) *:',         /* Connect to Input */
        '|StrWhilelabel /'fileid'/', /* Remove all with same fileid */
        RmvFid,                      /* Remove fileid itself */
        '|' WriteStage(fixed)        /* Write to disk */
   end
   if rc=0 then 'PEEKTO fileid' /* Get next, new, fileid */
End
else Do while rc = 0
   if Fs then parse var fileid fileid (fieldsep)
         else fileid = left(fileid,19)
   if Verify(fileid FieldSep,'_?|','M')=0
      then            findFid= 'find' translate(fileid||FieldSep,'_',' ')
      else if Fs then FindFid= 'PICK FS' xFieldSep 'F1 == /'fileid'/'
                 else findFid= 'PICK 1.19 == /'left(fileid,19)'/'
   'ADDPIPE (end ?) *:',        /* Connect to Input */
      '|f:' FindFid || ,        /* Remove all with same fileid */
      RmvFid,                   /* Remove fileid itself */
      '|' WriteStage(fixed),    /* Write to disk */
      '?f:',                    /* Records with other fileid : */
      '| *.input:'              /* Send them back to me */
   if rc=0 then 'PEEKTO fileid' /* Get next, new, fileid */
End
AggRc=rc*(rc<>12)
if rc<>12 then 'SEVER INPUT' /* we didn't reach EOF, avoid STALL */

/* If the >SFS needed a workunit of our own: commit it */
if symbol('myWorkUnit')='VAR' then    /* Yes, we wanted one */
 if myWorkUnit<>'' then do            /* No, DMSGETWU didn't fail */
    trace -1; 'CALLPIPE (end ?) *.input.Weof:',
       '|O: Fanout|SPEC W1 1|Literal' AggRc'|Aggrc ?O:',
         '|trace|Count lines|Insert /closes: /|Cons'
    AggRc=rc
    if aggRc<>0 & RollBack then call csl 'DMSROLLB RETC REAS myWorkUnit'
    else do
       call csl 'DMSCOMM  RETC REAS myWorkUnit'
       if retc<>0 then do
          say Myname': Commit failed: Reason' reas 'from DMSCOMM'
          if reas='79061' then
          say Myname': SFS filespace is probably full'
          aggRc=reas
          call csl 'DMSROLLB RETC REAS myWorkUnit'
       end
    end
    call csl 'DMSRETWU RETC REAS myWorkUnit'
 end
exit aggRc

/*-----------------------------------------------------------------*/
WriteStage: /* use >SFS or >>SFS if approp, gives better debug info*/
/*-----------------------------------------------------------------*/
 if UseSFS=0 then return disk fileid arg(1)
 parse var fileid fn ft fm rest '' fmNr
 if pos('.',fm)=0 then do  /* not a dirid */
    parse var fm fm 2 fmnr
    call csl 'DMSQFMOD retc reas fm buffer flag'
    if reas<>0       then return disk fileid arg(1)
    if flag=3|flag=4 then return disk fileid arg(1)
    fm=strip(buffer,'T')
 end
 if wordpos('WORKUNIT',rest)>0 then /* WKunit asked in pipe stream */
    return disk'SFS' fn ft fm fmNr arg(1) rest
 if grouped | Batched,              /* working with CALLPIPEs */
  | workunit<>'' then               /* WKunit passed as input parm */
    return disk'SFS' fn ft fm fmNr arg(1),
               'WORKUNIT' word(workunit 'DEFAULT',1) rest

 /* No WORKUNIT asked for: use one of our own, but use the same for */
 /* all added PIPEs, and commit that workunit when all is done.     */
 /* Note that we cannot simply COMMIT & return the WU when at EOF   */
 /* in the main: when at EOF, the added >SFS stages have not yet    */
 /* really done their job (they must empty the last buffers & close */
 /* the files.  So we make a construct to feed a kind "EOF" to the  */
 /* main loop in a new stream.  We will ADDPIPE a call to a REXX    */
 /* stage that will use CALLPIPE to run >SFS and when that CALLPIPE */
 /* ends: we know >SFS has really terminated after what we can      */
 /* COMMIT the workunit and send our RC into the stream for main.   */

 if symbol('myWorkUnit')<>'VAR' then do /* first time we need WU ?*/
    call csl 'DMSGETWU RETC REAS myWorkUnit'
    if retc<>0 then myWorkUnit=''
    else do
       'ADDSTREAM INPUT Weof'       /* Add a stream and some stage  */
       'ADDPIPE HOLE|*.input.Weof:' /* so we can ADDPIPE more stages*/
    end
 end
 if myWorkUnit='' then
    return disk'SFS' fn ft fm fmNr arg(1) rest

/* Write the file via a small REXX sunroutine that will allow      */
/* our main subroutine to wait till all >SFS stages have returned. */
/* A BUFFER stage is not really required here, but I like it.      */
return 'Eof: REXX('myname mytype') $Weof',
           disk'SFS' fn ft fm fmNr arg(1) rest,
               'WORKUNIT' myWorkUnit,
         '?*.input.Weof:|In: FaninAny|Buffer|*.input.Weof:',
         '?Eof:|In:'

/*-----------------------------------------------------------------*/
WaitForEOF: /* This subroutine creates the file, but as it has     */
/*             a second input stream, the main PUTFILES REXX stage */
/*             can be made waiting untill all files are closed.    */
/*-----------------------------------------------------------------*/
/* Main work: create the file from all the input records we get */
 'CALLPIPE *.input.0:|' 'trace Schrijver:|' subword(arg(1),2)
 FileRc=rc
/* Second work: signal the main PUTFILES subrtn that we are done */
/* we will pass the returncode of the file creation */
 'CALLPIPE Literal' FileRc 'Gedaan' subword(arg(1),2,3) '|*.output.1:'
exit rc
:READ PUTFILES DESCRIPT
From <a href="mailto:kris_buelens@be.ibm.com">Kris Buelens</a>, IBM Belgium
<p>  PUTFILES is a REXX Pipelines stage that allows you to store
     records in CMS different files.  Each record is prefaced by
     the target fileid.

<p>For example, you get a big file in your reader that must be split
   into different CMS files.  The target fileids are inside the reader
   file itself.  Thanks to PUTFILES the task becomes easy and fast.
<br>Example.  Suppose :MEMBER cards separate the file data.
<pre>
      'PIPE (end ?)',
         '|READER FILE' spid,             /* Get the RDR file */
         ... remove CCW, etc, maybe DEBLOCK NETDATA ...
         '|Fid: strFind /:MEMBER_/',      /* Find separator */
         '|SPEC W2 1.8 W3 10.8 /A/ 19',   /* Store fileid */
         '|JX: Juxtapose',                /* Join fileid with data */
         '|PUTFILES',                     /* Store the files */
         '?Fid:|JX:'                      /* Route data to Juxtapose*/
</pre>

<h2>Changes in V2.1 <tt>&nbsp;&nbsp;(Januari 2014)</tt></h2><hr>
<p>
We did not test the return code of DMSCOMM (the CSL routine to commit
the work in SFS).
As a result, servers that not return to CMS Ready continued with an
open workunit, and updated files were left open, and these files remained
locked, even for the server that left ot open.  An example:
<xmp>
FPLDBK790E File locked by other user or other unit of work
FPLMSG003I ... Issued from stage 2 of pipeline 2
FPLMSG001I ... Running ">>SFS 20131230 PTKGSU00 VMSYSU:MAINT.PTKGUI WORK"
</xmp>
A reason to encounter this problem is "SFS filespace full".

<h2>Changes in V2.0 <tt>&nbsp;&nbsp;(September 2010)</tt></h2><hr>
<p>
The problems explained below with V1.2 have been fixed.
<ul>
<li>By default PUTFILES V2 works again like V1.1.  That is it does
    not always use the >SFS and >>SFS stages if writing to SFS.
    PUTFILES calls the ">" or ">>" stages; but, when the filemode of
    file to write is written as a dirid, the > stage itself
    will call >SFS stage (similar for >>).  Consequently, the default
    for >SFS is that many SFS connections will be used.
<li>You can explictely request PUTFILES to use >SFS and >>SFS by using
    the <b>USESFS</b> parameter.  PUTFILES will then either allow you to
    use workunits you obtained (and you commit/rollback them), either let
    PUTFILES use its own, single, workunit for all the files it will
    write to.  In the latter case, PUTFILES will commit/rollback.
    Advantage with USESFS: only one SFS connection is used, you don't
    need to control the commit.
</ul>
<p>Summary: if your PUTFILES use may create many files in SFS, use its
   USESFS parameter to reduce the number of SFS connections.
<p>For more information, refer to PUTFILES HELPPIPE.

<h2>Changes in V1.2 <tt>&nbsp;&nbsp;(September 2010)</tt></h2><hr>
<p>
When PUTFILES's target is SFS, it now explicitly uses >SFS and >>SFS
instead of > and >>; this sometimes gives better messages when strange
errors happen.
<p>Furthermore, we detected that >SFS and >>SFS use by default a new
workunit for each file created concurrently.&nbsp; As PUTFILES can be
used to create many files, it is easy to have for example 20 files open
concurrently, consequently 20 APPC connections to the SFS server.
<br>Many users and an SFS server with a relatively small USERS values
in its DMSPARMS file may cause the SFS server (or end-user) to run out
of connections.&nbsp; The end-user may even end up in an ethernal wait
(experienced with IPGATE).
<br>Since V1.2, PUTFILES passes by default WORKUNIT DEFAULT to the
>SFS or >>SFS stages, than only one connection to SFS is used.
<p>
<span style="font-weight: bold; color: rgb(255, 0, 0);">Beware</span>,
I just found out that with WORKUNIT DEFAULT, you explicitely must
commit the files written in SFS using PUTFILES.&nbsp; I' working on a
solution.&nbsp; Till then, <br>
</p>
<ul>
<li>either code <span style="font-family: monospace;">PUTFILES
WORKUNIT PRIVATE</span>, and we work as before (that is with an APPC
connection per created SFS file)</li>
<li>either change line 44 in PUTFILES REXX to become
<span style="font-family: monospace;">Workunit='PRIVATE'</span>
and the default of PUTFILES is again as before (that is with an APPC
connection per created SFS file)</li>
<li>either commit all workunits after using PUTFILES:<br>
<span style="font-family: monospace;">
&nbsp; 'PIPE ..... |PUTFILES |....'<br>
&nbsp; call CSL 'DMSCOMM retc reas'&nbsp; /* Commit all the work*/<br>
</span></li>
<li>either get your own workunit and commit it at the end:<br>
<span style="font-family: monospace;">&nbsp; call csl
'DMSGETWU retc reas WID' /* Get a new workunit */<br>
&nbsp; 'PIPE ..... |PUTFILES WORKUNIT' wid '|....'<br>
&nbsp; call CSL 'DMSCOMM retc reas WID'&nbsp; /* Commit the work from
PUTFILES*/<br>
&nbsp; call CSL 'DMSRETWU retc reas WID'&nbsp;/* Tell CMS we're done
with PUTFILES*/<br>
</span></li>
</li>
</ul>
<p>For more information, refer to PUTFILES HELPPIPE.

:READ PUTFILES HELPPIPE
PUTFILES stage                       Written by Kris Buelens, IBM Belgium

(c) Copyright IBM Corporation 2005

This REXX stage is a converse of PIPEs GETFILES stage

The fileid is placed in front of each record:
  - by default: place a fileid in cols 1->19 and the data in cols 20->*
  - with the FIELDSEP option you place a char between fileid and data

  +-----------------------------------------------------------+
  | format:  | PUTFILES <FIXED> <FIELDSEParator|FS xorc>      |
  |          |          <APPEND> <GROUPED | BATCHED>          |
  |          |          <NOUSESFS|USESFS <WORKUNIT xx>        |
  |          |                      <ONERRor ROLlback|COMmit>>|
  +-----------------------------------------------------------+

Operation:

 - PUTFILES looks at the fileids and issues an ADDPIPE or CALLPIPE
   for each new fileid it sees.
 - The input does NOT need to be sorted by fileid, but, the fileid in
   col 1-19 (or in the first field) must be written "nicely": that is:
   all occurrences of the same fileid need to be coded identically (same case,
   same number of spaces..., see usage note 1)

 - PUTFILES must be the last stage in a pipeline.

Parameters:
 - FIXED: to create a RECFM F file; the lrecl depends of the first record of a
   file.  If later records arrive with another length, an error will happen
   (issue PIPE AHELP >MDSK to learn about the FIXED option).
     Example to make RECFM F, LRECL 80 files:
        'PIPE  .. get your data ...,
         .... place fileid in col 1-19, data in col20->  ...,
         '|CHOP 99|PAD 99|PUTFILES F'
 - FIELDSEP: by default, the fileid of the files to creats is in cols 1 to 19;
   with this option you can tell that the fileid information is everything
   before the fieldseparation character.  Cfr usage note 2.

 - APPEND: when using the APPEND option, the files will be appended to; else
   the output files are replaced.  (That is: we use stage > or >>)


 - GROUPED: use this option when you know that the input records are sorted by
   fileid.  It uses less resources, cfr usage note 3.

 - BATCHED: is similar to GROUPED, but here we accept that several series of
   records for an output file are present in the input, cfr usage note 4.
 - USESFS: then we will use the >SFS or >>SFS stages instead of > and >>,
   but only when the target is in SFS (that is you specify a dirid, or
   if a filemode is coded that points to an SFS directory).
   Experience learned us that when the SFS stages are used one sometimes gets
   more explicit information when errors occur (at least with the PIPE level
   built-in with z/VM).
   Furthermore, the SFS stages have more options (PIPE AHELP >SFS tells you
   about them).  So, using the USESFS option together with the FIELDSEP option
   makes it possible to use them all.  See usage notes 2, 3, 6, and 7.

 - WORKUNIT: tells which workunit >SFS and >>SFS should use.  Ignored
   when USESFS is not specified.  See usage notes 6 and 7.
 - ONERROR ROLLBACK|COMMIT: tells what must happen when an error occurs.
   Ignored when USESFS is not specified.  See usage notes 6 and 7.



Usage notes and option explanation:
------------------------------------
1. As we do not want to induce -often needless- overhead, you must
   assure that FILEIDS are WRITTEN in a CONSISTENT way.
   This is a **bad** example
      MY FILE A        data for MY FILE A
      MY  FILE A       data for MY FILE A
      My FILE A        data for MY FILE A
   This looks like 3 different files to our code.  So, you should make
   sure that a given fileid is always written in the same fashion: same
   case, same placement of spaces.  When using FIELDSEP, everything must
   be identical up to the fieldsep.
     If your inputfile would not have consistent file names, place some
     stages before the PUTFILES stage to make it all identical.  E.g.
        ...
        |SPEC W1 1 W2 9 W3 19.1 20-* 20 | XLATE 1-19 UPPER
        |PUTFILES

2. The FIELDSEP option makes it possible to write to not ACCESSed
   SFS directories.  Example
    'PIPE <' userid() 'NETLOG A',               /* Input data */
       '|SPEC /NETLOG/ 1 W11 NW ',              /* place target fn ft */
             '/SFSZVM:.NETLOG_INFO/ NW',        /* place dirid */
             '/;/ N 1-* N',                     /* Fieldsep & data */
       '|CHANGE W2 /-//',                       /* Remove ISO sepchars */
       '|CHANGE W2 "/""',                       /* Remove US sepchars */
       '|PUTFILES FIELDSEP ; GROUPED'

   FIELDSEP makes it also possible to use all options that >SFS and >>SFS
   recognize. Example: set the Modification date of the created files:
    'PIPE <' userid() 'NETLOG A',               /* Input data */
       '|SPEC /NETLOG/ 1 W11 NW ',              /* place target fn ft */
             '/SFSZVM:.NETLOG_INFO/ NW',        /* place dirid */
             '/MDATE/ NW W11 NW W12 N',         /* Add "MDATE dateTime"*/
             '/;/ NW 1-* N',                    /* Fieldsep & data */
       '|CHANGE W2 /-//',                       /* Remove ISO sepchars */
       '|CHANGE W2 "/""',                       /* Remove US sepchars */
       '|CHANGE W5 /-//',                       /* Remove ISO sepchars */
       '|CHANGE W5 "/""',                       /* Remove US sepchars */
       '|CHANGE W5 ":""',                       /* Remove time sepchars*/

3. Creating files in SFS: which stage is used?
   If you do *not* use USESFS parameter, we use > or >> as stage.  Both stages
   are generic (PIPE AHELP > explains):
    - if one gives it a dirid instead of a filemode > will call >SFS,
      hence all options of >SFS can be coded following the dirid.
    - if one passes a filemode, > calls >MDSK, and the specific >SFS
      options get rejected.
   When you use PUTFILE's USESFS option and you pass a filemode, PUTFILES will
   check if the filemode points to an SFS directory, and if so it uses
   >SFS (or >>SFS as appropriate) and all SFS options are accepted.

4. When you know that all records of each file arrive as one group of
   consecutive records, you can reduce storage consumption by using the
   GROUPED option
    - by default, ADDPIPE is used for each file to create; all output
      files are kept open until the input stream gets empty
      (we had a case with a file to split into 400 files and ran out of
       storage after opening +/- 180 files; the storage needed is below
       the 16MB line, so enlarging the DEF STOR didn't help)
    - with the GROUPED option, we use CALLPIPE and only one output
      file is open at a time
    (this is a bit elaborated in usage note 5).

   The BATCHED option is similar to GROUPED, you can use it when expecting
   batches of records for the same output file.  The first time a new fileid is
   found, we use > to write to the file (so the file gets ERASEd if it exists),
   next times >> is used (so we append).
   Using BATCHED and APPEND together is nonsense: APPEND requests that the
   outfiles are never erased, BATCHED asks to erase at the beginning.

5. Performance
   PUTFILES uses ADDPIPE or CALLPIPE to process all records for a given
   file (see note 3).  Our logic wants to avoid that each and every record in
   the input stream must be analyzed by REXX code (executing REXX code
   normally costs much more than using built-in PIPE stages).  So performance
   should normally be fine.

  A. When *not* using BATCHED or GROUPED, PUTFILES uses ADDPIPE.  Basically,
     we insert PIPE stages just before PUTFILES to divert records of a file
     from PUTFILES' input stream.  Initially the PIPE network looks like:
        ...stages_getting-Input...
        '|PUTFILES'
     After processing 2 files, 2 ADDPIPEs are executed and the PIPE network
     looks like:
        ...stages_getting-Input...
        '|File1: FIND' fn1 ft1 fm1'|>' fn1 ft1 fm1,
        '?File1:',
        '|File2: FIND' fn2 ft2 fm2'|>' fn2 ft2 fm2,
        '?File2:',
        '|PUTFILES'
     As you can see, the records for "fn1 ft1 fm1" and "fn2 ft2 fm2" no longer
     pass through PUTFILES (PUTFILES only sees the first record of each file).
     Performance is mostly independant of record grouping, the only drawback is
     that many files can be open concurrently.

  B. However: if you use the GROUPED or BATCHED option, CALLPIPE is used in a
     REXX "do forever" loop.  In each iteration we look at a record, extract
     the fileid, and create a Pipeline to process all records until a record
     for another file is found.  Basically we execute:
            'CALLPIPE *:',                   /* Get input records */
              '|TOTARGET NFIND' fn1 ft1 fm1, /* Get all for this file */
              '|>' fn1 ft1 fm1               /* Store on disk */

     Consequently: if the records of the different files are in fact grouped
     more or less, the CALLPIPE will process many records in an iteration of
     the "do forever" loop.
     At the other hand, if there is no grouping at all, PUTFILES' REXX code has
     to look at each record, and the output files are opened/closed very often.
     In such a case it may be better to insert a SORT stage before calling
     PUTFILES and the CALLPIPE based solution will work as fast as with
     ADDPIPE.

6. SFS connections - WORKUNIT to use
   (note: in the following text ">SFS" can mean ">SFS" or ">>SFS")
   When PIPE uses the >SFS stage to write to the file, by default it uses a new
   workunit for each file being written to.  For each active workunit (that is:
   one with an open file), a unique APPC connection is set up with the SFS
   server.
   If your PUTFILES creates many files, and uses ADDPIPE (cfr notes 4 & 5),
   all those files have their own APPC connection to SFS.  These connections
   remain active even after returning to CMS Ready.
   Consequently: many users using "PUTFILES to create many files" and an SFS
   server with a relatively small USERS value in its DMSPARM files may make the
   SFS server (or the end-user) run out of connections.
   Therefore:
    - version 1.2 of PUTFILES was changed to pass WORKUNIT DEFAULT as parameter
      to the >SFS stage (the default being WORKUNIT PRIVATE).
      As a -somewhat unexpected- result the files created by PUTFILES were no
      longer committed by the SFS stage itself, but remained open until someone
      commits the default workunit.  Maybe only when you return to CMS Ready.
      (the Piper's design is right: the SFS stages should not simply decide to
       commit the default workunit: it might commit things you don't want yet).
    - version 2 of PUTFILES tries to cure these problems and extends
      the possibilities of people wanting to manage workunits themselves

   What can you request?
   - You do not any "WORKUNIT" information at all to PUTFILES: it will get a
     workunit of its own, write all SFS files using that workunit and COMMIT it
     at the end (that is we work as if using minidisks).
   - You can pass "WORKUNIT xxxx" as a parameter to the PUTFILES stage.  It
     indicates the workunit you want to be used by default.
     (xxxx can be a workunit number, DEFAULT or PRIVATE)
   - When using FIELDSEP, you can include "WORKUNIT xxxx" in the data
     records, it indicates the workunit to use for that specific file.
     (xxxx can be a workunit number, DEFAULT or PRIVATE)
   Example 1:
     '|LITERAL SOME FILE dirid ;rec2 for SOME FILE',
     '|LITERAL SOME FILE dirid ;rec1 for SOME FILE',
     '|LITERAL FILE TWO dirid ;data for FILE TWO',
     '|PUTFILES USESFS FIELDSEP ;'
   In this case, PUTFILES will get a new workunit and create both files
   in it.  It will COMMIT the new files in any case.

   Example 2:
     '|LITERAL SOME FILE dirid ;rec2 for SOME FILE',
     '|LITERAL SOME FILE dirid ;rec1 for SOME FILE',
     '|LITERAL FILE TWO dirid ;data for FILE TWO',
     '|PUTFILES USESFS FIELDSEP ; ONERROR ROLLB'
   Just like example 1, but if there is an error, the SFS files will
   be rolled back.

   Example 3:
     '|LITERAL SOME FILE dirid WORKUNIT 1234 ;rec2 for SOME FILE',
     '|LITERAL SOME FILE dirid WORKUNIT 1234 ;rec1 for SOME FILE',
     '|LITERAL FILE TWO dirid ;data for FILE TWO',
     '|PUTFILES USESFS FIELDSEP ;'
   Here SOME FILE will be created in WORKUNIT 1234 (explicitely asked);
   FILE TWO is created in WORKUNIT nnnn (defaulted, gotten by PUTFILES).
   An ONERROR ROLLBACK/COMMIT option will only define what happens with
   FILE TWO; PUTFILES will only COMMIT/ROLLBACK its own workunit.


   If you pass workunits id(s) or WORKUNIT DEFAULT, it is your responsablity to
   COMMIT or ROLLBACK them at a convenient time.  All files written to with
   WORKUNIT PRIVATE are comitted/rolled back by the >SFS stage itself.

   Example 4:
     '|LITERAL SOME FILE dirid WORKUNIT 1234 ;data for SOME FILE',
     '|LITERAL FILE TWO dirid ;data for FILE TWO',
     if rc=0 then what='DMSCOMM' ; else what='DMSROLLB'
     call CSL what 'retc reason 1234'
     call CSL what 'retc reason 1111'
     /* or, commit/rollback   e v e r y t h i n g  */
     call CSL what 'retc reason'

  If you didn't understand it at all:
   - if you code filemodes and not dirids and don't code USESFS
     -> there are no such problems, the >MDSK driver is used; only one
        APPC connection to SFS is created.  But for some SFS errors you
        can miss debugging information (no SFS reason codes).
   - if you code dirids and don't code USESFS
     -> the >SFS driver is used, may APPC connections to SFS are used,
        you will see SFS reason codes in case of problems.
   - if you code dirids and do code USESFS
     -> the >SFS driver is used, only 1 APPC connection to SFS is used,
        you will see SFS reason codes in case of problems.


7. Wisdom - Experience - Beware
   -----------------------------
   When you have uncomitted, new, SFS files (thus created by >SFS):
   - LISTFILE doesn't see them yet.
   - "LISTFILE (BEFORE x-days-ago" will find them, i.e. they look old to
     it even though they are brandnew. ||||
   - ERASE can erase them
   - "LISTFILE (ALLDATES" causes a COMMIT, resulting in:
      -- LISTFILE will see them.
      -- "LISTFILE (BEFORE x-days-ago" will no longer list them as old.

